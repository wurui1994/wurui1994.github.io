<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习入门</title>
      <link href="/2024/03/02/media-guide/"/>
      <url>/2024/03/02/media-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="先了解三个工具"><a href="#先了解三个工具" class="headerlink" title="先了解三个工具"></a>先了解三个工具</h2><p>ChatGPT <a href="https://codenews.cc/chatgpt">https://codenews.cc/chatgpt</a><br>火山写作 <a href="https://www.writingo.net/">https://www.writingo.net</a><br>百度AI成片 <a href="https://aigc.baidu.com/">https://aigc.baidu.com</a></p><h2 id="ChatGPT参考读物"><a href="#ChatGPT参考读物" class="headerlink" title="ChatGPT参考读物"></a>ChatGPT参考读物</h2><p><a href="https://weread.qq.com/web/bookDetail/86932d70813ab7dd6g015ee7">从零开始玩转ChatGPT</a></p><p>并不是，就是对ai有一定了解，最好。这个更像是玩游戏。</p><h2 id="准备好两个平台的账户"><a href="#准备好两个平台的账户" class="headerlink" title="准备好两个平台的账户"></a>准备好两个平台的账户</h2><p>头条号：<a href="https://mp.toutiao.com/">https://mp.toutiao.com</a><br>百家号：<a href="https://baijiahao.baidu.com/">https://baijiahao.baidu.com</a></p><p>简单来说，入门可以设两个目标，攒一百个粉丝和赚十块钱</p><h2 id="第一个小任务，百家号AI写诗"><a href="#第一个小任务，百家号AI写诗" class="headerlink" title="第一个小任务，百家号AI写诗"></a>第一个小任务，百家号AI写诗</h2><p>输入几个关键词，用百家号AI写一首小诗，然后发出去：<br><a href="https://baijiahao.baidu.com/builder/rc/edit?type=events">https://baijiahao.baidu.com/builder/rc/edit?type=events</a></p><p><img src="/image/events_step_one.png?100x100" alt="step 1"></p><p><img src="/image/events_step_two.png" alt="step 2"></p><p>如果你完成了，可以截图发给我</p><p>有问题，可以随时问</p><h2 id="第二个小任务，ChatGPT写诗"><a href="#第二个小任务，ChatGPT写诗" class="headerlink" title="第二个小任务，ChatGPT写诗"></a>第二个小任务，ChatGPT写诗</h2><p>用ChatGPT写一首小诗，在头条号发一条微头条</p><p><a href="https://mp.toutiao.com/profile_v4/weitoutiao/publish">https://mp.toutiao.com/profile_v4/weitoutiao/publish</a></p><p><img src="/image/weitoutiao_step_one.png" alt="step one"></p><p><img src="/image/weitoutiao_step_two.png" alt="step two"></p><h2 id="第三个小练习，好物推荐"><a href="#第三个小练习，好物推荐" class="headerlink" title="第三个小练习，好物推荐"></a>第三个小练习，好物推荐</h2><p>选一个自己感兴趣的商品，用百家号Ai写一段好物推荐，挂商品，然后发布出去。</p><p><img src="/image/baijiahap_ai_goods.png" alt="alt text"></p><p>一个示例</p><h2 id="第一个视频小任务，一键成片"><a href="#第一个视频小任务，一键成片" class="headerlink" title="第一个视频小任务，一键成片"></a>第一个视频小任务，一键成片</h2><p>选一个热点，生成文案，用一键成片生成一个视频，发布出去</p><p><img src="/image/video_step_one.png" alt="alt text"></p><p><img src="/image/video_step_two.png" alt="alt text"></p><p><img src="/image/video_step_three.png" alt="alt text"></p><p><img src="/image/video_step_four.png" alt="alt text"></p><h2 id="第二个视频小任务，上传到其他网站"><a href="#第二个视频小任务，上传到其他网站" class="headerlink" title="第二个视频小任务，上传到其他网站"></a>第二个视频小任务，上传到其他网站</h2><p>将生成的视频下载下来，上传到B站，发布出去</p><p>B站限制比较少</p><p>Q：百度AI成片的视频不可以下载吗<br>A：可以下载，有下载按钮</p><p><img src="/image/video_download.png" alt="alt text"></p><h2 id="第三个视频小任务-熟悉细节"><a href="#第三个视频小任务-熟悉细节" class="headerlink" title="第三个视频小任务, 熟悉细节"></a>第三个视频小任务, 熟悉细节</h2><p>找一篇新闻文案，使用一键成片，尝试选一个自己喜欢的背景音乐，以及自己收集视频片段和图片，替换画面内容</p><p>熟悉平台规则，也是学习的一部分</p><h2 id="第四个视频小任务，文案改写"><a href="#第四个视频小任务，文案改写" class="headerlink" title="第四个视频小任务，文案改写"></a>第四个视频小任务，文案改写</h2><p>找一篇文案，用火山写作改写，然后用一键成片制作视频<br>火山写作：<a href="https://www.writingo.net/">https://www.writingo.net</a></p><p><img src="/image/rewrite_step_one.png" alt="alt text"></p><p><img src="/image/rewrite_step_two.png" alt="alt text"></p><p><img src="/image/rewrite_step_three.png" alt="alt text"></p><p>Q: 火山写作要开会员嘛，三天以后<br>A: 没有会员。登陆，每天打开，目前是无限额度</p><p><img src="/image/rewrite_writingo.png" alt="alt text"></p><h2 id="第一个图文任务，火山写作改写"><a href="#第一个图文任务，火山写作改写" class="headerlink" title="第一个图文任务，火山写作改写"></a>第一个图文任务，火山写作改写</h2><p>选取文章，使用火山写作改写，然后发布出去</p><p>可选的参考</p><p>百家号参考:<br><a href="https://author.baidu.com/home/1699891169664338">https://author.baidu.com/home/1699891169664338</a><br>头条号参考:<br><a href="https://www.toutiao.com/c/user/token/MS4wLjABAAAAMVgiZI3CnqL2UyL5FIUlfF64cN7kTJOLxNHy6GAlfG4">https://www.toutiao.com/c/user/token/MS4wLjABAAAAMVgiZI3CnqL2UyL5FIUlfF64cN7kTJOLxNHy6GAlfG4</a><br><a href="https://www.toutiao.com/c/user/token/MS4wLjABAAAAEzhqKlMi99vaUEzZtzIkYTTId2IybHkD4a1gGqWvoMI">https://www.toutiao.com/c/user/token/MS4wLjABAAAAEzhqKlMi99vaUEzZtzIkYTTId2IybHkD4a1gGqWvoMI</a></p><p>百家号和头条号都发</p><p>图片有水印，可以裁剪图片避开水印，或者从图库中找图片替换</p><p>改写可分段处理</p><h2 id="第二个小任务，每天发五篇图文"><a href="#第二个小任务，每天发五篇图文" class="headerlink" title="第二个小任务，每天发五篇图文"></a>第二个小任务，每天发五篇图文</h2><p>百家号和头条号都发一下。视频的话，可以自己安排。</p><h2 id="语音任务，只做了解"><a href="#语音任务，只做了解" class="headerlink" title="语音任务，只做了解"></a>语音任务，只做了解</h2><p>语音学习</p><p>可用的免费工具<br><a href="https://www.ttson.cn/">https://www.ttson.cn/</a><br><a href="https://www.text-to-speech.cn/">https://www.text-to-speech.cn/</a></p><p>语音自媒体平台<br><a href="https://mp.tencentmusic.com/">https://mp.tencentmusic.com</a><br><a href="https://music.163.com/st/ncreator">https://music.163.com/st/ncreator</a></p><p>找一些文案，比如新闻、经典散文、小故事，使用语音工具生成语音文件，如mp3, 然后上传到媒体平台。</p><h2 id="改写工具，-待定"><a href="#改写工具，-待定" class="headerlink" title="改写工具， 待定"></a>改写工具， 待定</h2><p>测试链接：<br><a href="https://www.toutiao.com/article/7333055589117231667">https://www.toutiao.com/article/7333055589117231667</a><br><a href="https://baijiahao.baidu.com/s?id=1705416852155400964">https://baijiahao.baidu.com/s?id=1705416852155400964</a></p><p>Q: 这个主要做什么的呢<br>A: 功能：1.从文章链接获取文章内容 2.自动分段改写内容<br>A: 小任务，找几个文章链接，点提交，完成改写。点拷贝输出内容，然后Ctrl+V粘贴到编辑区（头条号或百家号）<br>A: 使用工具完成五篇图文<br>A: 工具有一定局限性，试试看，有什么改进意见</p><h2 id="小目标，完成一次提现"><a href="#小目标，完成一次提现" class="headerlink" title="小目标，完成一次提现"></a>小目标，完成一次提现</h2><p>Q: 我头条没发<br>A: 头条要弄一下<br>每天发5篇图文<br>达到1块钱，在某个周四提现<br>你可以先每天发一篇，看看头条多少钱<br>然后计算1块钱要多少天<br>Q: 百家号现在不管了吗<br>A: 百家号也可以发<br>只是要100块钱才能体现<br>你需要一些反馈，然后逐步改进<br>等你完成这个小目标，下一个小任务是攒到100个粉丝</p><h2 id="熟悉平台规则，不要违规"><a href="#熟悉平台规则，不要违规" class="headerlink" title="熟悉平台规则，不要违规"></a>熟悉平台规则，不要违规</h2><p>百家号确实比头条号严格一点。头条的严格在首发，其他方面松一点。<br>尽量不要发负面内容，要发正能量的，对大家有用的内容。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clipboard笔记</title>
      <link href="/2023/10/22/clipboard-note/"/>
      <url>/2023/10/22/clipboard-note/</url>
      
        <content type="html"><![CDATA[<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>头条号：<a href="https://mp.toutiao.com/profile_v4/graphic/publish">https://mp.toutiao.com/profile_v4/graphic/publish</a><br>百家号：<a href="https://baijiahao.baidu.com/builder/rc/edit?type=news">https://baijiahao.baidu.com/builder/rc/edit?type=news</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install jaraco.clipboard</span></span><br><span class="line"><span class="keyword">from</span> jaraco <span class="keyword">import</span> clipboard</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;dpu8C _2kCxD &quot;&gt;&lt;span class=&quot;bjh-p&quot;&gt;有时候，我们就像深海里迷失的小船一样，不知道该何去何从，又怕被风浪打翻，袭来的一切感受，都是万般皆苦，也只能是自己默默承受。&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;_3hMwG _2kCxD &quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;_1NCGf&quot;&gt;&lt;img</span></span><br><span class="line"><span class="string">                src=&quot;https://pics4.baidu.com/feed/5366d0160924ab180d0e2b7e4df528c87b890b70.jpeg@f_auto?token=14c33a6d6c74b9ecd5d123ff86da1938&amp;amp;s=3B22C604B3E3CB744E98346D030060F9&quot;</span></span><br><span class="line"><span class="string">                width=&quot;639&quot; class=&quot;_1g4Ex _1i_Oe&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;dpu8C _2kCxD &quot;&gt;&lt;span class=&quot;bjh-p&quot;&gt;&lt;span class=&quot;bjh-strong&quot;&gt;人生一世，万般皆苦，都是命，苦乐自渡，只有靠自己，才靠得住。&lt;/span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;dpu8C _2kCxD &quot;&gt;&lt;span class=&quot;bjh-p&quot;&gt;再难的人生，也要一步一步好好走完；再苦的生活，也能咬咬牙，踮起脚，挺挺胸自己扛下。&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;dpu8C _2kCxD &quot;&gt;&lt;span class=&quot;bjh-p&quot;&gt;人生的路，靠自己走，才能走的踏实，走的安心，靠自己过的人生，得失无悔，苦乐自渡，不管生活如何，结局怎样，都能够笑的漂亮。&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">clipboard.copy_html(html)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clipboard.paste_html())</span><br></pre></td></tr></table></figure><p><a href="https://superuser.com/questions/912712/how-to-send-rich-text-to-the-clipboard-from-command-line">https://superuser.com/questions/912712/how-to-send-rich-text-to-the-clipboard-from-command-line</a></p><h2 id="pbpaste"><a href="#pbpaste" class="headerlink" title="pbpaste"></a>pbpaste</h2><p>To extract html content from the clipboard, plain pbpaste can be used:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbpaste -Prefer public.html</span><br></pre></td></tr></table></figure><h2 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h2><p>Linux</p><p>via this answer</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> text.html | xclip -t text/html</span><br></pre></td></tr></table></figure><p>Mac</p><p>via this answer</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> text.html | textutil -stdin -format html -convert rtf -stdout | pbcopy</span><br></pre></td></tr></table></figure><p>Windows</p><p>In older Windows, you can natively only copy plaintext (via this answer).</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> text.html | clip</span><br></pre></td></tr></table></figure><p>In PowerShell you can copy rich text:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> text.html | Set-Clipboard -AsHtml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>优化相关</title>
      <link href="/2023/08/04/optimize-note/"/>
      <url>/2023/08/04/optimize-note/</url>
      
        <content type="html"><![CDATA[<h2 id="底层优化"><a href="#底层优化" class="headerlink" title="底层优化"></a>底层优化</h2><p>缓存友好程序设计指南<br><a href="https://zhuanlan.zhihu.com/p/484951383">https://zhuanlan.zhihu.com/p/484951383</a><br>函数调用的代价与优化<br><a href="https://zhuanlan.zhihu.com/p/485620829">https://zhuanlan.zhihu.com/p/485620829</a><br>分支对代码性能的影响和优化<br><a href="https://zhuanlan.zhihu.com/p/487690985">https://zhuanlan.zhihu.com/p/487690985</a><br>浅谈软件性能提升相关的概念<br><a href="https://zhuanlan.zhihu.com/p/491092870">https://zhuanlan.zhihu.com/p/491092870</a><br>循环优化方法如数家珍<br><a href="https://zhuanlan.zhihu.com/p/495735031">https://zhuanlan.zhihu.com/p/495735031</a><br>CPU 软件性能分析指标解释<br><a href="https://zhuanlan.zhihu.com/p/521597381">https://zhuanlan.zhihu.com/p/521597381</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> optimize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于爱情</title>
      <link href="/2023/08/04/love-note/"/>
      <url>/2023/08/04/love-note/</url>
      
        <content type="html"><![CDATA[<h2 id="book"><a href="#book" class="headerlink" title="book"></a>book</h2><p>恋爱课<br><a href="https://weread.qq.com/web/bookDetail/534327605c9efb534d11ee8">https://weread.qq.com/web/bookDetail/534327605c9efb534d11ee8</a><br>爱你就像爱生命<br><a href="https://weread.qq.com/web/bookDetail/ea53264071d57585ea5b53b">https://weread.qq.com/web/bookDetail/ea53264071d57585ea5b53b</a><br>爱与孤独<br><a href="https://weread.qq.com/web/bookDetail/a2a328a0715932fda2a2788">https://weread.qq.com/web/bookDetail/a2a328a0715932fda2a2788</a></p><h2 id="answer"><a href="#answer" class="headerlink" title="answer"></a>answer</h2><p>谈恋爱到底是相似好还是互补好？<br><a href="https://www.zhihu.com/question/395796477/answer/1743782479">https://www.zhihu.com/question/395796477/answer/1743782479</a><br>通过MBTI找对象靠谱吗?<br><a href="https://www.zhihu.com/question/443959810/answer/1775309468">https://www.zhihu.com/question/443959810/answer/1775309468</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多巴胺相关</title>
      <link href="/2023/07/20/dopamine-note/"/>
      <url>/2023/07/20/dopamine-note/</url>
      
        <content type="html"><![CDATA[<h2 id="book"><a href="#book" class="headerlink" title="book"></a>book</h2><p>愉悦回路<br><a href="https://book.douban.com/subject/26202327/">https://book.douban.com/subject/26202327/</a><br>贪婪的多巴胺<br><a href="https://book.douban.com/subject/35545272/">https://book.douban.com/subject/35545272/</a></p><h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><p>《贪婪的多巴胺》：面对欲望，随波逐流 or 乘风破浪？<br><a href="https://zhuanlan.zhihu.com/p/502794511">https://zhuanlan.zhihu.com/p/502794511</a><br>《贪婪的多巴胺》第6篇 自我抑制回路<br><a href="https://zhuanlan.zhihu.com/p/610090236">https://zhuanlan.zhihu.com/p/610090236</a><br>你想不到中年人为了「戒断多巴胺」能做到什么程度<br><a href="https://baijiahao.baidu.com/s?id=1767269949720917677">https://baijiahao.baidu.com/s?id=1767269949720917677</a><br>如何才能得到幸福<br><a href="https://zhuanlan.zhihu.com/p/536812171">https://zhuanlan.zhihu.com/p/536812171</a></p><p>目前科学家主要发现了 4 条多巴胺通路。分别是：黑质纹状体通路（调控运动功能）、结节漏斗通路（调节内分泌功能）、中脑边缘通路（欲望回路）、中脑皮质通路（控制回路）。</p><h2 id="喜欢回路"><a href="#喜欢回路" class="headerlink" title="喜欢回路"></a>喜欢回路</h2><p>多巴胺欲望系统在大脑中具有强大的影响力，而喜欢回路则又小又脆弱，很难触发。<br>两者之间的区别在于“生活中强烈的愉悦比强烈的欲望更罕见，也更短暂”。<br>“喜欢”涉及的大脑回路与欲望回路不同，并使用”当下化学物质”来发送信息，而不是多巴胺。<br>“喜欢”依赖的化学物质与促进陪伴式爱情的长期满足相同，它们是内啡肽和内源性大麻素。<br>海洛因是目前最容易上瘾的药物之一，正是因为它们同时扰乱了欲望回路和喜欢回路也就是多巴胺和内啡肽分别在其中起作用。<br>它与两个回路相互作用，刺激<strong>多巴胺</strong>和<strong>内源性大麻素</strong>系统。这种双重效应叠加导致非常容易上瘾。</p><p>四种最重要的内源性药物分别是多巴胺、5-羟色胺、内啡肽和内源性大麻素。</p><p>如果说多巴胺是“未来分子”,与之相对的,是另一系列神经递质,“当下分子”,包括血清素,催产素,内啡肽,和内源性大麻素。</p><h2 id="岛叶又称脑岛"><a href="#岛叶又称脑岛" class="headerlink" title="岛叶又称脑岛"></a>岛叶又称脑岛</h2><p>脑岛：大脑中的情绪控制中心<br><a href="https://zhuanlan.zhihu.com/p/69173442">https://zhuanlan.zhihu.com/p/69173442</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MeshRoom相关</title>
      <link href="/2023/07/03/meshroom-note/"/>
      <url>/2023/07/03/meshroom-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/alicevision/QtAliceVision.git">https://github.com/alicevision/QtAliceVision.git</a></p><h2 id="View-and-Edit-Models"><a href="#View-and-Edit-Models" class="headerlink" title="View and Edit Models"></a>View and Edit Models</h2><p><a href="https://meshroom-manual.readthedocs.io/en/latest/more/view-edit/view-edit.html">https://meshroom-manual.readthedocs.io/en/latest/more/view-edit/view-edit.html</a><br>Meshlab<br>Blender<br>Meshroom2Blender Blender Plugin<br>BlenderLandscape<br>Instant Meshes<br>CloudCompare<br>Export model to Unity<br>Export to Maya (Plugin)<br>Alembic bridge<br>SideFX Houdini Plugin</p><h2 id="Third-parties"><a href="#Third-parties" class="headerlink" title="Third parties"></a>Third parties</h2><p>Qt&#x2F;PySide2 <a href="https://www.qt.io/">https://www.qt.io/</a><br>qmlAlembic <a href="https://github.com/alicevision/qmlAlembic">https://github.com/alicevision/qmlAlembic</a><br>QtOIIO <a href="https://github.com/alicevision/QtOIIO">https://github.com/alicevision/QtOIIO</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> meshroom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sleep函数</title>
      <link href="/2023/07/01/sleep-note/"/>
      <url>/2023/07/01/sleep-note/</url>
      
        <content type="html"><![CDATA[<p>sleep(0)、usleep(0)与sched_yield() 调度<br><a href="https://www.cnblogs.com/schips/p/11002589.html">https://www.cnblogs.com/schips/p/11002589.html</a></p><p>Sleep 0可能死锁<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/synchapi/nf-synchapi-sleep">https://learn.microsoft.com/zh-cn/windows/win32/api/synchapi/nf-synchapi-sleep</a></p><p>windows线程yield以及Sleep(0)和SwitchToThread之间的区别<br><a href="https://www.cnblogs.com/kex1n/p/5142752.html">https://www.cnblogs.com/kex1n/p/5142752.html</a></p><p>探究 sleep(0) 和 sched_yield()<br><a href="https://blog.csdn.net/m0_47696151/article/details/121338660">https://blog.csdn.net/m0_47696151/article/details/121338660</a></p><p>macOS也是sleep(0)开销大 但是不明显 1e6次 0.6s vs 0.2s</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代理记录</title>
      <link href="/2023/06/29/proxy-note/"/>
      <url>/2023/06/29/proxy-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p>透明代理 or 全局代理</p></blockquote><h2 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h2><p><a href="https://www.proxifier.com/">Proxifier</a></p><h2 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h2><ul><li>winget</li></ul>]]></content>
      
      
      <categories>
          
          <category> proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行计算</title>
      <link href="/2023/06/29/parallel-compute/"/>
      <url>/2023/06/29/parallel-compute/</url>
      
        <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/35947107/">并行计算与高性能计算</a><br>-&gt; <a href="https://github.com/essentialsofparallelcomputing/EssentialsOfParallelComputing">EssentialsOfParallelComputing</a><br><a href="https://book.douban.com/subject/1239603/">MPI与OpenMP并行程序设计</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> parallel </tag>
            
            <tag> compute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPU计算</title>
      <link href="/2023/06/28/gpgpu-note/"/>
      <url>/2023/06/28/gpgpu-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/StapleCactus764/WebGL-Compute-Shader">WebGL-Compute-Shader</a> WebGL 1&#x2F;OES_texture_float<br><a href="https://webglfundamentals.org/webgl/lessons/webgl-gpgpu.html">webgl-gpgpu</a><br><a href="https://github.com/gpujs/gpu.js">gpu.js</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WebAssembly记录</title>
      <link href="/2023/06/28/wasm-note/"/>
      <url>/2023/06/28/wasm-note/</url>
      
        <content type="html"><![CDATA[<p>WebAssembly多线程支持的内部原理<br><a href="https://zhuanlan.zhihu.com/p/77083205">https://zhuanlan.zhihu.com/p/77083205</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Objective-C记录</title>
      <link href="/2023/06/27/objc-note/"/>
      <url>/2023/06/27/objc-note/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Objective-C 在基本语言上做了两个扩展：范畴（categories）和协议（protocols），它们是强大的软件开发工具。这两个扩展引入了声明方法并将它们关联到某个类的技术。</span><br><span class="line">感觉上，categories像是方法动态绑定，protocols像是接口而用于继承[虚方法]</span><br><span class="line">非正式协议respondsToSelector [NSObject]</span><br><span class="line">检查协议conformsToProtocol</span><br><span class="line"></span><br><span class="line">正式协议有其自己的限制。如果协议声明的方法列表随着时间而增长，协议的采纳者就会不再遵循该协议。</span><br><span class="line">因此，Cocoa 中的正式协议被用于稳定的方法集合，比如 NSCopying 和 NSCoding。如果您预期协议方法会增多，则可以声明为非正式协议，而不是正式协议。</span><br><span class="line"></span><br><span class="line">Cocoa 提供了两个根类：NSObject 和 NSProxy。Cocoa 将后者定义为抽象类，用于表示其它对象的</span><br><span class="line">替身对象。因此 NSProxy 类在分布式对象架构中是很重要的。由于作用比较特别，NSProxy 在 Cocoa</span><br><span class="line">程序中出现频率很低。Cocoa 开发者在提到根类时，几乎总是指 NSObject。</span><br><span class="line"></span><br><span class="line">NSObject</span><br><span class="line">分配、初始化、和复制 [alloc init new copy]</span><br><span class="line">对象的保持和清理 [retain release autorelease retainCount dealloc]</span><br><span class="line">内省和比较 [superclass class isKindOfClass IsMemberOfClass isSubclassOfClass conformsToProtocol isEqual description]</span><br><span class="line">对象的编码和解码 [encodeWithCoder initWithCoder classForCoder replacementObjectForCoder awakeAfterUsingCoder]</span><br><span class="line">消息的转发 forwardInvocation</span><br><span class="line">消息的派发 performSelector</span><br><span class="line"></span><br><span class="line">在 dealloc 方法中，您则在最后一步调用超类的 dealloc 实现</span><br><span class="line"></span><br><span class="line">类工厂方法的实现是为了向客户提供方便，它们将分配和初始化合在一个步骤中，返回被创建的对象，并</span><br><span class="line">进行自动释放处理。这些方法的形式是+ (type)className...（其中 className 不包括任何前缀）。</span><br><span class="line">工厂方法则可以避免为可能没有用的对象盲目分配内存</span><br><span class="line">类工厂方法约定俗成地将返回对象放到自动释放池中</span><br><span class="line"></span><br><span class="line">在碰到对象可变性的问题时，最好采纳一些防御性的编程实践</span><br><span class="line"></span><br><span class="line">为对象制作快照以备后用的问题在于开销太昂贵，您需要为同一个对象制作多个拷贝。一个更有效的选择</span><br><span class="line">是使用键-值观察协议。</span><br><span class="line"></span><br><span class="line">子类必须重载它继承的、直接访问对象实例变量的所有方法，这样的方法称为基元方法（primitive methods）。类的基元方法是其接口的基础。</span><br><span class="line"></span><br><span class="line">在接口上区分基元方法和衍生方法使子类的创建更加容易。您的子类必须重载通过继承得到的基元方法，</span><br><span class="line">而重载基元方法之后就可以保证继承而来的衍生方法可以正确地工作。</span><br><span class="line"></span><br><span class="line">Objective-C @synchronized深入理解 https://www.cnblogs.com/yangwenhuan/p/9193840.html</span><br><span class="line"></span><br><span class="line">委托者对象需要公布一个被称为非正式协议的接</span><br><span class="line">口，客户对象则必须首先注册为委托，然后实现该接口中的一个或多个方法。发布通告的对象要公布</span><br><span class="line">自己广播的通告列表，而所有的客户对象都可以自由监听其中的一个或多个公告。</span><br><span class="line">NSApplication、NSText、和 NSWindow 就是一些委托者类，而很多框架类都可以广播通告。</span><br><span class="line"></span><br><span class="line">在满足自动观察者通知的基础上，简单地保证您的对象遵循 KVC 就可以使之遵循 KVO。然而，如果您选</span><br><span class="line">择实现手工的键-值观察，就需要额外的工作。</span><br><span class="line"></span><br><span class="line">设计模式在 Cocoa 框架中的主要实现方式，特别是模型-视图-控制器和对象建模模</span><br><span class="line">式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">协议是一个编程语言级别（Objective-C）的特性，它使定义适配器模式的实例成为可能（在 Java 中的“接口”和“协议”是同义的）。</span><br><span class="line">如果您希望一个客户对象和另一个对象进行交流，但由于它们的接口不兼容而导致困难，您就可以定义一个协议，它本质上是一系列和类不相关联的方法声明。</span><br><span class="line">这样，其它对象的类就可以正式采纳该协议，并通过实现协议中的全部方法来“遵循”该协议。结果，客户对象就可以通过协议接口向其它对象发送消息。</span><br><span class="line">协议是一组独立于类层次的方法声明，这样就有可能象类的继承那样，根据对象遵循的协议对其进行分组。</span><br><span class="line">您可以通过NSObject的 conformsToProtocol:方法来确认一个对象的协议关系。</span><br><span class="line">除了正式协议之外，Cocoa还有一个非正式协议的概念。这种类型的协议是NSObject类中的一个范畴</span><br><span class="line">（category），这样就使所有的对象都成为范畴方法的潜在实现者（参见 &quot;范畴&quot;部分）。</span><br><span class="line">非正式协议的方法可以选择性地实现。非正式协议是委托机制实现的一部分（参见 &quot;委托&quot;部分。</span><br><span class="line">请注意，协议的设计和适配器模式并不完全匹配。但它是使接口不兼容的类在得以协同工作的手段。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSInvocation 对象是分布式、撤消管理、消息传递、和定时器对象编程接口的一部分。在需要去除消</span><br><span class="line">息发送对象和接收对象之间的耦合关系的类似场合下，您也可以使用。</span><br><span class="line">分布式对象是一种进程间通讯技术</span><br><span class="line"></span><br><span class="line">有点像QObject connect</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">委托是在宿主对象中嵌入一个指向另一对象（也就是委托对象）的弱引用（一个未保持的插座变量），并</span><br><span class="line">不时地向该委托对象发送消息，使其对有关的任务进行输入的机制。宿主对象一般是一个“复活”的框架对</span><br><span class="line">象（比如一个 NSWindow 或 NSXMLParser 对象），它寻求完成某项工作，但又只能以一般的方式来</span><br><span class="line">进行。委托几乎总是一个定制类的实例，它负责配合宿主对象，在有关任务的特定点（参见图 4-3）上提</span><br><span class="line">供与具体程序有关的行为。这样，委托机制使我们可以对另一个对象的行为进行修改或者扩展，而不需要</span><br><span class="line">生成子类。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSImage 类为装载和使用基于位图（比如 JPEG、PNG、或者 TIFF 格式）或向量（EPS 或 PDF 格式）</span><br><span class="line">的图像提供统一的接口。NSImage 可以为同一个图像保持多个表示，不同的表示对应于不同类型的</span><br><span class="line">NSImageRep 对象。NSImage 可以自动选择适合于特定数据类型和显示设备的表示。同时，它隐藏了</span><br><span class="line">图像操作和选择的细节，使客户代码可以交替使用很多不同的表示。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Foundation 框架中的 NSEnumerator 类实现了迭代器模式。NSEnumerator 抽象类的私有具体子类</span><br><span class="line">返回的枚举器对象可以顺序遍历不同类型的集合—数组、集合、字典（值和键）—并将集合中的对象返回</span><br><span class="line">给客户代码。</span><br><span class="line">所有的枚举器的工作方式都一样。您可以在循环中向枚举器发送 nextObject 消息，</span><br><span class="line">如果该消息返回 nil，而不是集合中的下一个对象，则退出循环。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 Cocoa 中，控制器对象一般有两个类型：仲裁控制器或者协调控制器。</span><br><span class="line">仲裁控制器负责仲裁应用程序中视图对象和模型对象之间的数据流。仲裁控制器通常是 NSController 对象。</span><br><span class="line">协调控制器则负责实现应用程序的集中化通讯和控制逻辑，作为框架对象的委托和动作消息的目标。它们通常是NSWindowController 对象或定制 NSObject 子类的实例。</span><br><span class="line">由于协调控制器高度专用于特定的程序，因此不考虑重用。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">几乎任何一对对象之间都可以建立绑定关系，只要它们遵循 NSKeyValueCoding 和</span><br><span class="line">NSKeyValueObserving 这两个非正式协议。但是，我们推荐您通过仲裁控制器来建立绑定，以得到</span><br><span class="line">NSController 及其子类为您提供的各种好处。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有几个 Cocoa 框架类采用单件模式，包括 NSFileManager、NSWorkspace、和 NSApplication</span><br><span class="line">类。这些类在一个进程中只能有一个实例。当客户代码向该类请求一个实例时，得到的是一个共享的实例，该实例在首次请求的时候被创建。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">视图对象和模型对象应该是程序中最具可重用性的对象。视图对象代表操作系统及操作系统支持的应用程序的“观感”；外观和行为的一致性是很重要的，这就要求对象是高度可重用的。顾名思义，模型对象负责对问题域的关联数据进行封装，以及执行相关的操作。从设计的角度上看，最好让模型对象和视图对象彼此分离，因为这样可以增加它们的可重用性。</span><br><span class="line"></span><br><span class="line">委托几乎总是您的一个定制对象，它通过定义将应用程序具体逻辑结合到程序中，而这些逻辑是</span><br><span class="line">具有一般性的，是向外委托任务的对象自身不可能知道的。</span><br><span class="line">理解通告和委托消息的关系是很重要的。向外委托的对象自动使自己的委托成为自己发出的所有通告</span><br><span class="line">的观察者。委托需要做的是实现相关联的方法，以获取通告。</span><br><span class="line"></span><br><span class="line">由于控件开销比较大，我们就通过单元将其在屏幕上的空间划分成不同的功能区域。单元是轻</span><br><span class="line">量级的对象，我们可以将它考虑为覆盖全部或部分控件的区域。但它不仅是区域的分割，还是对任务的分</span><br><span class="line">割。单元负责一些本来由控件描画的工作，而且保有一些本来由控件保有的数据，其中的两项就是目标和</span><br><span class="line">动作的实例变量。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">尽管常规的通告中心允许任何对象作为通告对象（也就是通告封装的对象），分布式通告中心只支持将</span><br><span class="line">NSString 对象作为它的通告对象。由于发出通告的对象和通告的观察者可能位于不同的任务中，通告</span><br><span class="line">不能包含指向任意对象的指针。因此，分布式通告中心要求通告使用字符串作为通告对象。通告的匹配就</span><br><span class="line">是基于这个字符串进行的，而不是基于对象指针。</span><br><span class="line"></span><br><span class="line">当然，当您希望通过聚结移除队列中类似的</span><br><span class="line">通告时，应该用 enqueueNotification...方法，且使用 NSPostNow 风格，而不是使用</span><br><span class="line">postNotification:方法。</span><br><span class="line"></span><br><span class="line">除了保证单件实例之外，sharedApplication 方法主要做什么呢？它还负责建立一些程序的基础设</span><br><span class="line">施，以便接收和处理来自窗口服务器的事件。在初始化全局应用程序对象的过程中，NSApplication</span><br><span class="line">通过生成一个接收事件的事件源建立一个与窗口服务器的连接（实现为一个 Mach 端口），并建立一个应</span><br><span class="line">用程序事件队列，即一个 FIFO（先进先出）的机制，使事件在到达事件源时被取出，并放入队列等待处理。</span><br><span class="line">最后，NSApplication 将事件源作为输入源，对主运行循环，即主线程的运行循环，进行初始化</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">由于有缓冲的窗口对于透明和非矩形的形状是必需的，所以几乎所有的 Cocoa 窗口都是有缓冲的。无保持的窗口适用于临时的图像或简单的连接线，比如 Interface Builder 中的目标-动作连接。</span><br><span class="line"></span><br><span class="line">窗口可以被显式地从屏幕列表中拿掉，在这种情况下，我们称之为离屏窗口。当一个窗口从列表中移走时，会从屏幕上消失；而当它被放入列表中时，就会再次回到屏幕上。事件不被派发到离屏的窗口上。应用程序对窗口进行隐藏，就是基于从屏幕列表中移走窗口来实现的。离屏窗口必需被缓冲或者保持，才能支持描画。</span><br><span class="line"></span><br><span class="line">一个视图可以锁定焦点，描画自身，然后解锁焦点。但是这种做法只在特定的场景下推荐，比如在定时器的回调函数中对视图内容进行动画显示。一般地说，您不应该绕过 Application Kit 的显示机制。</span><br><span class="line">NSView -&gt; lockFocus/unlockFocus 10.15弃用</span><br><span class="line"></span><br><span class="line">视图的描画不一定需要发生在主线程；应用程序的每一个线程都有能力锁定视图的焦点并进行描画。然而</span><br><span class="line">有下面这些限制：</span><br><span class="line">- NSView 对象属性（比如它的边框矩形）的改变应该只发生在主线程。</span><br><span class="line">- 当 NSView 的显示方法被调用时，Application Kit 会设置一个锁，以便在接收视图的窗口中描画；</span><br><span class="line">在显示方法返回之前，您不能年执行任何定制的描画。这意味着，同时只有一个线程可以在指定窗口</span><br><span class="line">中进行描画。</span><br><span class="line"></span><br><span class="line">控件是完全功能的 NSView 对象，它们可以被标识为需要显示，并负责描画自身所在的区域；也可以响应</span><br><span class="line">用户事件，属于响应者链中的对象。</span><br><span class="line">单元是一种抽象，用于简化视图中不同类型的图形对象的管理。它使我们得到一种插件设计，使控件</span><br><span class="line">可以作为不同图形对象的宿主，这些图形对象可以有自己的标识，包括目标和动作信息。</span><br><span class="line"></span><br><span class="line">和使用子视图相比，使用单元进行子区域的描画也有一些折衷的地方。由于没有视图失效的机制，控件必</span><br><span class="line">须自行计算每个单元需要描画什么。但是由于视图是用于一般目的的对象，而控件是具有专门目的的，通</span><br><span class="line">常可以更有效地完成所需的计算。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">非正式协议为一个可以选择性实现的一系列方法列表。非正式协议虽名为协议，但实际上是挂于NSObject上的未实现分类（Unimplemented Category）的一种称谓，Objetive-C语言机制上并没有非正式协议这种东西，OSX 10.6版本之后由于引入@optional关键字，使得正式协议已具备同样的能力，所以非正式协议已经被废弃不再使用。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL记录</title>
      <link href="/2023/06/27/opengl-note/"/>
      <url>/2023/06/27/opengl-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/column/c_1578766076254605312">OpenGL</a><br><a href="https://www.shadertoy.com/">ShaderToy</a><br><a href="https://webglfundamentals.org/webgl/lessons/zh_cn/">WebGL理论基础</a><br><a href="https://juejin.cn/post/7224841852306047032">GLFW再入门</a> 关注事件处理<br><a href="https://zhuanlan.zhihu.com/p/444440326">OpenGL中的共享上下文</a><br><a href="https://zhuanlan.zhihu.com/p/165341403">Vulkan多线程渲染</a></p><p>aux -&gt; vc6 multimedia extension sdk<br>freeimage -&gt; not easy [FreeImage_Load&#x2F;FreeImage_GetFIFFromFilename]</p><p>glDeleteTextures -&gt;<br>glDeleteTextures函数对内存的优化<br><a href="https://blog.csdn.net/Huoon/article/details/77461569">https://blog.csdn.net/Huoon/article/details/77461569</a><br>上限在1000左右 1400?</p><p>OpenGL Bindless Texture<br><a href="https://www.cnblogs.com/gearslogy/p/13072817.html">https://www.cnblogs.com/gearslogy/p/13072817.html</a><br><a href="https://www.khronos.org/opengl/wiki/Bindless_Texture">https://www.khronos.org/opengl/wiki/Bindless_Texture</a></p><p>为什么以前的图形API需要操作一步Bind Texture？<br><a href="https://www.zhihu.com/question/467743626">https://www.zhihu.com/question/467743626</a></p><p>glutPostRedisplay<br>glutPostRedisplay vs. Idle Func<br><a href="https://www.cnblogs.com/flyinggod/p/12943663.html">https://www.cnblogs.com/flyinggod/p/12943663.html</a><br>freeglut中glutidlefunc()的重点是什么<br><a href="https://qa.1r1g.com/sf/ask/1096940631/">https://qa.1r1g.com/sf/ask/1096940631/</a></p><p>OpenGL Programming Guide for Mac<br><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/OpenGL-MacProgGuide/opengl_intro/opengl_intro.html">https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/OpenGL-MacProgGuide/opengl_intro/opengl_intro.html</a></p><p>OpenGL取渲染后的图片数据<br><a href="https://www.jianshu.com/p/019a29a55352">https://www.jianshu.com/p/019a29a55352</a></p><p>glReadPixels与glGetTexImage<br><a href="https://www.oomake.com/question/11577763">https://www.oomake.com/question/11577763</a></p><p>荆棘中的舞蹈：OpenGL多线程同步方案<br><a href="https://www.jianshu.com/p/f55515e9081b">https://www.jianshu.com/p/f55515e9081b</a></p><p>opengles<br>glReadPixels<br>glCopyImageSubData 3.2</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#non-blocking_async_data_downloadreadback">https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#non-blocking_async_data_downloadreadback</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">glFenceSync</span><br><span class="line">glClientWaitSync</span><br><span class="line">glDeleteSync</span><br><span class="line">glGetBufferSubData</span><br><span class="line">glReadPixels</span><br><span class="line">glDeleteBuffer</span><br></pre></td></tr></table></figure><p>glMapBufferRange? -&gt; memcpy<br><a href="https://kdashg.github.io/misc/async-gpu-downloads.html">https://kdashg.github.io/misc/async-gpu-downloads.html</a></p><p>Unreal：如何高效的将数据从GPU拷贝到CPU<br><a href="https://zhuanlan.zhihu.com/p/165392259">https://zhuanlan.zhihu.com/p/165392259</a></p><p>qt opengl</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> GLenum <span class="title">toGlShaderType</span><span class="params">(QRhiShaderStage::Type type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> QRhiShaderStage::Vertex:</span><br><span class="line">        <span class="keyword">return</span> GL_VERTEX_SHADER;</span><br><span class="line">    <span class="keyword">case</span> QRhiShaderStage::TessellationControl:</span><br><span class="line">        <span class="keyword">return</span> GL_TESS_CONTROL_SHADER;</span><br><span class="line">    <span class="keyword">case</span> QRhiShaderStage::TessellationEvaluation:</span><br><span class="line">        <span class="keyword">return</span> GL_TESS_EVALUATION_SHADER;</span><br><span class="line">    <span class="keyword">case</span> QRhiShaderStage::Geometry:</span><br><span class="line">        <span class="keyword">return</span> GL_GEOMETRY_SHADER;</span><br><span class="line">    <span class="keyword">case</span> QRhiShaderStage::Fragment:</span><br><span class="line">        <span class="keyword">return</span> GL_FRAGMENT_SHADER;</span><br><span class="line">    <span class="keyword">case</span> QRhiShaderStage::Compute:</span><br><span class="line">        <span class="keyword">return</span> GL_COMPUTE_SHADER;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">Q_UNREACHABLE_RETURN</span>(GL_VERTEX_SHADER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">QGles2CommandBuffer</span> : <span class="keyword">public</span> QRhiCommandBuffer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">Cmd</span> &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="compute-shader"><a href="#compute-shader" class="headerlink" title="compute shader"></a>compute shader</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glBindImageTexture</span><br><span class="line">imageLoad/imageStore</span><br></pre></td></tr></table></figure><h2 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h2><p>为了忘却的纪念：析OpenGL史上第二伟大的扩展，DSA<br><a href="https://zhuanlan.zhihu.com/p/23257409">https://zhuanlan.zhihu.com/p/23257409</a><br>OpenGL 4.5+ 的 VAO、VBO、IBO写法<br><a href="https://www.ngui.cc/article/show-484486.html">https://www.ngui.cc/article/show-484486.html</a></p><p>利用现代OpenGL API大幅度减少由于执行驱动导致CPU的开销<br><a href="https://blog.csdn.net/u011194621/article/details/41119421">https://blog.csdn.net/u011194621/article/details/41119421</a></p><h2 id="tex-download"><a href="#tex-download" class="headerlink" title="tex download"></a>tex download</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pl_tex_download</span><br><span class="line">tex_download</span><br><span class="line"></span><br><span class="line">SDL_RenderReadPixels</span><br><span class="line"></span><br><span class="line">gl_read_fbo_contents</span><br><span class="line">BindFramebuffer</span><br><span class="line">ReadBuffer</span><br><span class="line">gl-&gt;ReadPixels</span><br><span class="line"></span><br><span class="line">glGetTexImage</span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>wglDeleteContext<br>clearCurrentContext -&gt; CGLDestroyContext&#x2F;aglDestroyContext(carbon)<br>glXDestroyContext</p><ul><li>类方法 -&gt; autorelease</li></ul><p>AGL和CGL都是用于设置OpenGL上下文的API，您可以在其中进行绘制。</p><p>使用NSOpenGLContext，除非你已经知道你有理由不这样做。</p><p>如果您正在编写Carbon应用程序，或者如果您需要与MacOS9兼容，请使用AGL (从2012年开始，这基本上意味着不要这样做)。</p><p>NSOpenGLContext和AGL都是在CGL之上实现的。然而，并不是CGL的所有必要部分实际上都是公共API。我最后一次检查，CGL API的唯一公共部分允许您创建一个全屏OpenGL上下文。如果你想在窗口中显示OpenGL，或者你想在你的OpenGL上显示对话框或者一些CGL，你可能不能使用CGL。</p><p>XPending + XNextEvent -&gt; PeekMessage</p><h2 id="OffScreen"><a href="#OffScreen" class="headerlink" title="OffScreen"></a>OffScreen</h2><p>qt -&gt; QGLPixelBuffer&#x2F;QOffscreenSurface<br>CGLCreateContext&#x2F;[NSOpenGLContext alloc]<br>wglCreateContext + createDummyGLWindow<br>eglCreatePbufferSurface<br>glXCreatePbuffer</p><p>QGLPixelBuffer is now deprecated and implemented in terms of a hidden<br>QGLWidget and a QOpenGLFramebufferObject. It is recommended that applications<br>using QGLPixelBuffer for offscreen rendering to a texture switch to using<br>QOpenGLFramebufferObject directly instead, for improved performance.</p><p>EGL_KHR_surfaceless_context&#x2F;OES_surfaceless_context</p><p>fbo都支持 pbuffer需要arb<br>osg使用了pbuffer</p><p>wglCreatePbufferARB<br>glXCreateGLXPbufferSGIX<br>NSOpenGLPixelBuffer* pbuffer<br>eglCreatePbufferSurface</p><p>pbuffer和fbo的差异<br><a href="https://blog.csdn.net/prike/article/details/70182758">https://blog.csdn.net/prike/article/details/70182758</a></p><p>opengl中的fbo是否可以完全取代pbo？ - 沙茶酱的回答 - 知乎<br><a href="https://www.zhihu.com/question/31877015/answer/55093127">https://www.zhihu.com/question/31877015/answer/55093127</a></p><h2 id="glfw"><a href="#glfw" class="headerlink" title="glfw"></a>glfw</h2><p>objective-c - 如何让 [NsApp 运行] 不阻塞？<br><a href="https://www.coder.work/article/5953467">https://www.coder.work/article/5953467</a><br><a href="https://stackoverflow.com/questions/48020222/how-to-make-nsapp-run-not-block">https://stackoverflow.com/questions/48020222/how-to-make-nsapp-run-not-block</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I just experienced the same scenario. I and found a little different solution.</span><br><span class="line"></span><br><span class="line">Just call [[NSApplication sharedApplication] run]; and when your window is created, call [[NSApplication sharedApplication] stop:nil];, the run call will now exit. And then you can still call the sendEvent method.</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)applicationDidFinishLaunching:(NSNotification *)notification</span><br><span class="line">&#123;</span><br><span class="line">    _glfwPostEmptyEventCocoa();</span><br><span class="line">    [NSApp stop:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wglSwapIntervalEXT<br>NSOpenGLContextParameterSwapInterval<br>SwapIntervalEXT&#x2F;SwapIntervalMESA&#x2F;SwapIntervalSGI<br>eglSwapInterval</p>]]></content>
      
      
      
        <tags>
            
            <tag> opengl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/2023/06/27/unit-test/"/>
      <url>/2023/06/27/unit-test/</url>
      
        <content type="html"><![CDATA[<h2 id="catch2"><a href="#catch2" class="headerlink" title="catch2"></a>catch2</h2><p><a href="https://github.com/catchorg/Catch2">https://github.com/catchorg/Catch2</a></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Catch2 REQUIRED)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(catch2 Catch2::Catch2 Catch2::Catch2WithMain)</span><br></pre></td></tr></table></figure><p>boost 头文件过多 编译耗时</p><p>gmock 模拟函数调用 桩</p><p>客户端单元测试实践 — C++篇<br><a href="https://mp.weixin.qq.com/s?__biz=MzI0NTE4NjA0OQ==&mid=2658384863&idx=1&sn=da40dda823b48f9d5d4719cc76f883fa&chksm=f2d570b1c5a2f9a7a25ff3cbd1fc58dd1216fd73cf0f18168715cc4b37531d3976f05d4bd29b&scene=27">https://mp.weixin.qq.com/s?__biz=MzI0NTE4NjA0OQ==&amp;mid=2658384863&amp;idx=1&amp;sn=da40dda823b48f9d5d4719cc76f883fa&amp;chksm=f2d570b1c5a2f9a7a25ff3cbd1fc58dd1216fd73cf0f18168715cc4b37531d3976f05d4bd29b&amp;scene=27</a></p><p>c++ 单元测试打桩技巧总结(stub、mock)<br><a href="https://blog.csdn.net/coolxv_6533/article/details/79550197">https://blog.csdn.net/coolxv_6533/article/details/79550197</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> unit </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS启动控制</title>
      <link href="/2023/06/27/macos-launchctl/"/>
      <url>/2023/06/27/macos-launchctl/</url>
      
        <content type="html"><![CDATA[<h2 id="launchctl-interfaces-with-launchd-to-manage-and-inspect-daemons-agents-and-XPC-services"><a href="#launchctl-interfaces-with-launchd-to-manage-and-inspect-daemons-agents-and-XPC-services" class="headerlink" title="launchctl interfaces with launchd to manage and inspect daemons, agents and XPC services."></a>launchctl interfaces with launchd to manage and inspect daemons, agents and XPC services.</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl procinfo 1</span><br><span class="line">launchctl dumpstate</span><br><span class="line">launchctl <span class="built_in">print</span> system/com.openssh.sshd</span><br><span class="line">launchctl print-cache</span><br><span class="line">launchctl print-disabled system</span><br><span class="line">launchctl <span class="built_in">limit</span>/ulimit -a</span><br><span class="line">launchctl error posix 0到159</span><br><span class="line">launchctl error mach 0到52</span><br><span class="line">launchctl error bootstrap 0到52</span><br><span class="line"><span class="built_in">seq</span> 0 159 | xargs -I&#123;&#125; launchctl error posix &#123;&#125;</span><br><span class="line"><span class="built_in">seq</span> 0 52 | xargs -I&#123;&#125; launchctl error mach &#123;&#125;</span><br><span class="line"><span class="built_in">seq</span> 0 52 | xargs -I&#123;&#125; launchctl error bootstrap &#123;&#125;</span><br><span class="line">launchctl version</span><br><span class="line">launchctl <span class="built_in">print</span> gui/501</span><br><span class="line">launchctl list com.apple.Finder</span><br><span class="line"></span><br><span class="line">man macerror</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo launchctl procinfo 585</span><br><span class="line">program path = /usr/sbin/sshd</span><br><span class="line">Could not <span class="built_in">print</span> Mach info <span class="keyword">for</span> pid 585: 0x5</span><br><span class="line">argument count = 2</span><br><span class="line">argument vector = &#123;</span><br><span class="line"> [0] = sshd: slave [priv]</span><br><span class="line"> [1] = </span><br><span class="line">Segmentation fault: 11</span><br><span class="line">$ sudo launchctl procinfo 588</span><br><span class="line">program path = /usr/sbin/sshd</span><br><span class="line">Could not <span class="built_in">print</span> Mach info <span class="keyword">for</span> pid 588: 0x5</span><br><span class="line">argument count = 2</span><br><span class="line">argument vector = &#123;</span><br><span class="line"> [0] = sshd: slave@notty</span><br><span class="line"> [1] = </span><br><span class="line">Segmentation fault: 11</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS内核编程接口</title>
      <link href="/2023/06/27/macos-kpi/"/>
      <url>/2023/06/27/macos-kpi/</url>
      
        <content type="html"><![CDATA[<h2 id="Apple-KPI"><a href="#Apple-KPI" class="headerlink" title="Apple KPI"></a>Apple KPI</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kextstat | grep kpi</span><br></pre></td></tr></table></figure><p><a href="https://leiless.github.io/blog/posts/xnu-kext-use-private-kpi/">https://leiless.github.io/blog/posts/xnu-kext-use-private-kpi/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.apple.kpi.bsd</span><br><span class="line">com.apple.kpi.dsep</span><br><span class="line">com.apple.kpi.iokit </span><br><span class="line">com.apple.kpi.libkern</span><br><span class="line">com.apple.kpi.mach </span><br><span class="line">com.apple.kpi.private</span><br><span class="line">com.apple.kpi.unsupported</span><br></pre></td></tr></table></figure><p><a href="https://github.com/apple-oss-distributions/xnu/blob/main/config/list_supported.sh">https://github.com/apple-oss-distributions/xnu/blob/main/config/list_supported.sh</a></p><p><a href="https://github.com/apple-oss-distributions/xnu/blob/main/config/System.kext/PlugIns/MACFramework.kext/Info.plist">https://github.com/apple-oss-distributions/xnu/blob/main/config/System.kext/PlugIns/MACFramework.kext/Info.plist</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.kpi.dsep<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最低版本8-0"><a href="#最低版本8-0" class="headerlink" title="最低版本8.0"></a>最低版本8.0</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">key</span>&gt;</span>OSBundleLibraries<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.kpi.libkern<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.kpi.bsd<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.kpi.dsep<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/PureDarwin/PureDarwin/blob/main/cmake/kext.cmake">https://github.com/PureDarwin/PureDarwin/blob/main/cmake/kext.cmake</a><br><a href="https://github.com/wurui1994/MiscRecord/tree/master/Sources/Platform/MacOS/cmakekext">https://github.com/wurui1994/MiscRecord/tree/master/Sources/Platform/MacOS/cmakekext</a></p><p><a href="https://github.com/PureDarwin/PureDarwin/blob/main/cmake/templates/kmod_info.c.in">https://github.com/PureDarwin/PureDarwin/blob/main/cmake/templates/kmod_info.c.in</a></p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS内核扩展</title>
      <link href="/2023/06/27/macos-kext/"/>
      <url>/2023/06/27/macos-kext/</url>
      
        <content type="html"><![CDATA[<h2 id="kext通信方式考虑"><a href="#kext通信方式考虑" class="headerlink" title="kext通信方式考虑"></a>kext通信方式考虑</h2><ul><li>macOS内核拓展与用户态进程的通信实现（一）<br><a href="https://www.jianshu.com/p/4268e02e7c4c">https://www.jianshu.com/p/4268e02e7c4c</a></li><li>macOS内核拓展与用户态进程的通信实现（二）<br><a href="https://www.jianshu.com/p/8318cabe9535">https://www.jianshu.com/p/8318cabe9535</a></li><li>KernControl实现<br><a href="https://github.com/Kiprey/HelloKernControl">https://github.com/Kiprey/HelloKernControl</a></li><li>IOKit实现<br><a href="https://github.com/maurice-schuppe/flockflock">https://github.com/maurice-schuppe/flockflock</a></li><li>在macOS11或更高版本中对kext要求更高<br><a href="https://support.apple.com/zh-cn/guide/deployment/depa5fb8376f/web">https://support.apple.com/zh-cn/guide/deployment/depa5fb8376f/web</a></li></ul><blockquote><p>建议在macOS 10.15上开发kext 避免频繁重启</p></blockquote><h2 id="内核扩展"><a href="#内核扩展" class="headerlink" title="内核扩展"></a>内核扩展</h2><p><a href="https://support.apple.com/zh-cn/guide/deployment/depa5fb8376f/web">https://support.apple.com/zh-cn/guide/deployment/depa5fb8376f/web</a><br>在 macOS 11 或更高版本中，如果启用了第三方内核扩展 (Kext)，就不能按需将其载入内核中。第三方内核扩展需要用户批准、重新启动 macOS 以将更改载入内核，还需要在搭载 Apple 芯片的 Mac 上将安全启动配置为“降低安全性”。</p><h2 id="内核扩展kext和系统扩展sext例子-NuwaStone"><a href="#内核扩展kext和系统扩展sext例子-NuwaStone" class="headerlink" title="内核扩展kext和系统扩展sext例子 NuwaStone"></a>内核扩展kext和系统扩展sext例子 NuwaStone</h2><p><a href="https://github.com/ConradSun/NuwaStone">https://github.com/ConradSun/NuwaStone</a><br>A macOS behavior audit system with scope of file, process and network events. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file/process -&gt; kauth</span><br><span class="line">&lt;=10.15 kauth vnode/fileop</span><br><span class="line">&gt;=10.16(11.0) EndpointSecurity</span><br><span class="line">network -&gt;</span><br><span class="line">&lt;=10.15 sflt_register [NKE Network Kernel Extension KPI]</span><br><span class="line">&gt;=10.16(11.0) NetworkExtension</span><br></pre></td></tr></table></figure><h2 id="类似软件-gt-火绒剑Mac版"><a href="#类似软件-gt-火绒剑Mac版" class="headerlink" title="类似软件 -&gt; 火绒剑Mac版"></a>类似软件 -&gt; 火绒剑Mac版</h2><p><a href="https://www.huorong.cn/mac_download.html">https://www.huorong.cn/mac_download.html</a><br><a href="https://bbs.huorong.cn/thread-84449-1-1.html">https://bbs.huorong.cn/thread-84449-1-1.html</a></p><h3 id="火绒剑要求11-1-只支持sext"><a href="#火绒剑要求11-1-只支持sext" class="headerlink" title="火绒剑要求11.1 只支持sext"></a>火绒剑要求11.1 只支持sext</h3><p>[EndpointSecurity&#x2F;NetworkExtension]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ otool -L HRSword </span><br><span class="line">HRSword:</span><br><span class="line"> /usr/lib/libEndpointSecurity.dylib (compatibility version 1.0.0, current version 197.60.1)</span><br><span class="line">libuactmon.dylib:</span><br><span class="line"> /usr/lib/libEndpointSecurity.dylib (compatibility version 1.0.0, current version 63.140.5)</span><br><span class="line">$ otool -L libuactmon.dylib</span><br><span class="line">libuactmon.dylib:</span><br><span class="line"> /usr/lib/libEndpointSecurity.dylib (compatibility version 1.0.0, current version 63.140.5)</span><br></pre></td></tr></table></figure><p>HRSword.app&#x2F;Contents&#x2F;Library&#x2F;SystemExtensions&#x2F;cn.huorong.HRSword.HRSwordEx.systemextension&#x2F;Contents&#x2F;Info.plist</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NetworkExtension<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>NEMachServiceName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>BN27PM448X.group.cn.huorong.group.HRSwordEx<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>NEProviderClasses<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.networkextension.filter-data<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">string</span>&gt;</span>OCFilterDataProvider<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB使用</title>
      <link href="/2023/06/27/gdb-note/"/>
      <url>/2023/06/27/gdb-note/</url>
      
        <content type="html"><![CDATA[<h2 id="gdb禁用启动提示"><a href="#gdb禁用启动提示" class="headerlink" title="gdb禁用启动提示"></a>gdb禁用启动提示</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">set</span> startup-quietly on &gt; ~/.gdbearlyinit</span><br></pre></td></tr></table></figure><h2 id="gdb关闭分页"><a href="#gdb关闭分页" class="headerlink" title="gdb关闭分页"></a>gdb关闭分页</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> pagination off</span><br></pre></td></tr></table></figure><h2 id="gdb运行到main"><a href="#gdb运行到main" class="headerlink" title="gdb运行到main"></a>gdb运行到main</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start</span><br></pre></td></tr></table></figure><h2 id="gdb显示n个数组原始"><a href="#gdb显示n个数组原始" class="headerlink" title="gdb显示n个数组原始"></a>gdb显示n个数组原始</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> args 1 2 3</span><br><span class="line">p *argv@argc</span><br></pre></td></tr></table></figure><h2 id="gdb使用数学函数"><a href="#gdb使用数学函数" class="headerlink" title="gdb使用数学函数"></a>gdb使用数学函数</h2><p><a href="https://stackoverflow.com/questions/64906390/how-to-use-math-functions-with-gdb">https://stackoverflow.com/questions/64906390/how-to-use-math-functions-with-gdb</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gcc -lm或者load(&quot;/usr/lib/libm.so&quot;) 不需要</span></span><br><span class="line">p (double)pow(2.0,3.0)</span><br><span class="line">p (double)sin(1.0)</span><br><span class="line">call (double)sin(1.0)</span><br></pre></td></tr></table></figure><h2 id="gdb编译执行源码-不可用"><a href="#gdb编译执行源码-不可用" class="headerlink" title="gdb编译执行源码 不可用??"></a>gdb编译执行源码 不可用??</h2><p>compile code -r – printf (“hello world\n”);</p><h2 id="static-libstdc-会导致gdb的-enable-pretty-printing失效"><a href="#static-libstdc-会导致gdb的-enable-pretty-printing失效" class="headerlink" title="-static-libstdc++会导致gdb的-enable-pretty-printing失效"></a>-static-libstdc++会导致gdb的-enable-pretty-printing失效</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二维图形绘制</title>
      <link href="/2023/06/27/paint2d-note/"/>
      <url>/2023/06/27/paint2d-note/</url>
      
        <content type="html"><![CDATA[<h2 id="从两个图形库看CPU与GPU渲染的差异"><a href="#从两个图形库看CPU与GPU渲染的差异" class="headerlink" title="从两个图形库看CPU与GPU渲染的差异"></a>从两个图形库看CPU与GPU渲染的差异</h2><p><a href="https://zhuanlan.zhihu.com/p/618925299">https://zhuanlan.zhihu.com/p/618925299</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cairo与Skia是两个知名的2D渲染图形库。其中，Cairo使用CPU渲染，Skia已切换为GPU渲染加速。本文通过这两个图形库渲染实现的差异来比较CPU与GPU渲染的差异。</span><br><span class="line"></span><br><span class="line">综上，通过Cairo与Skia绘制两个相同的三角形描边的比较，可以比较好地理解CPU渲染与GPU渲染的差异之处。由于GPU的基础元素是三角形，导致使用GPU渲染的算法与CPU渲染的算法存在差异。并且，由于GPU本身一些特性，导致它的渲染品质比传统的CPU渲染差。但GPU价格比CPU便宜，速度快，因此实时场景仍然离不开GPU渲染。</span><br></pre></td></tr></table></figure><h2 id="blend2d"><a href="#blend2d" class="headerlink" title="blend2d"></a>blend2d</h2><p><a href="https://blend2d.com/performance.html">https://blend2d.com/performance.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">qt</span><br><span class="line">光栅化性能很差/不适合复杂矢量图</span><br><span class="line">cairo </span><br><span class="line">渐变方面存在性能问题</span><br><span class="line">agg</span><br><span class="line">AGG的速度很慢，尤其是在填充量很大的操作</span><br><span class="line">因为它没有SIMD优化来加速像素合成</span><br><span class="line">blend2d</span><br><span class="line">支持SIMD和多线程</span><br></pre></td></tr></table></figure><h2 id="nanovgXC"><a href="#nanovgXC" class="headerlink" title="nanovgXC"></a>nanovgXC</h2><p><a href="https://github.com/styluslabs/nanovgXC">https://github.com/styluslabs/nanovgXC</a><br>faster than skia ???</p><p><a href="https://github.com/blend2d/blend2d/issues/3">https://github.com/blend2d/blend2d/issues/3</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我认为Blend2D会大大击败ThorVG SW渲染器，因为ThorVG基本上使用FreeType代码，这不是为了性能而编写的。我假设ThorVG和Qt给予你类似的性能（ThorVG在某些情况下可能更糟，因为它的SIMD使用非常有限，Qt至少有SIMD组成）。</span><br><span class="line">https://github.com/intel/fastuidraw</span><br><span class="line">将Fastuidraw添加到基准测试中会很好，它似乎是唯一一个基准测试速度比当前技术水平快很多倍的2D渲染器</span><br></pre></td></tr></table></figure><h2 id="Qt-RHI-Painter"><a href="#Qt-RHI-Painter" class="headerlink" title="Qt RHI Painter"></a>Qt RHI Painter</h2><p><a href="https://bugreports.qt.io/browse/QTBUG-74407">https://bugreports.qt.io/browse/QTBUG-74407</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sanitize记录</title>
      <link href="/2023/06/27/sanitize-note/"/>
      <url>/2023/06/27/sanitize-note/</url>
      
        <content type="html"><![CDATA[<h2 id="c-死锁检测工具"><a href="#c-死锁检测工具" class="headerlink" title="c++ 死锁检测工具"></a>c++ 死锁检测工具</h2><p><a href="https://juejin.cn/s/c++%20%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7">https://juejin.cn/s/c++%20%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7</a></p><h2 id="clang"><a href="#clang" class="headerlink" title="clang"></a>clang</h2><p><a href="https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no-sanitize">https://clang.llvm.org/docs/UsersManual.html#cmdoption-f-no-sanitize</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address/thread/memory/undefined leak??</span><br><span class="line">clang -fsanitize=address -g memory-leak.c ; ASAN_OPTIONS=detect_leaks=1 ./a.out</span><br><span class="line">-fsanitize=safe-stack:</span><br></pre></td></tr></table></figure><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p><a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-fsanitize_003daddress">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-fsanitize_003daddress</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address/hwaddress/thread/leak/undefined</span><br><span class="line">-fstack-protector</span><br><span class="line">-finstrument-functions</span><br></pre></td></tr></table></figure><h2 id="msvc"><a href="#msvc" class="headerlink" title="msvc"></a>msvc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asan</span><br><span class="line">windbg !locks</span><br></pre></td></tr></table></figure><p><a href="https://maskray.me/blog/2023-02-12-all-about-leak-sanitizer">https://maskray.me/blog/2023-02-12-all-about-leak-sanitizer</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LSan can be used in 3 ways.</span><br><span class="line">    Standalone (-fsanitize=leak)</span><br><span class="line">    AddressSanitizer (-fsanitize=address)</span><br><span class="line">    HWAddressSanitizer (-fsanitize=hwaddress)</span><br><span class="line">The most common way to use LSan is clang -fsanitize=address (or gcc -fsanitize=address). For LSan-supported targets (#define CAN_SANITIZE_LEAKS 1), the AddressSanitizer (ASan) runtime enables LSan by default.</span><br></pre></td></tr></table></figure><h2 id="trylock-x2F-sharedlock"><a href="#trylock-x2F-sharedlock" class="headerlink" title="trylock&#x2F;sharedlock"></a>trylock&#x2F;sharedlock</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try_lock -&gt; no wait -&gt; WaitForSingleObject(m, 0)</span><br><span class="line">lock -&gt; wait -&gt; WaitForSingleObject(m, INFINITE)</span><br><span class="line"></span><br><span class="line">shared_mutex/shared_lock</span><br><span class="line">_Smtx_lock_shared -&gt; AcquireSRWLockShared</span><br><span class="line">精简读取器/编写器 (SRW) 锁</span><br><span class="line">gcc -&gt; pthread_rwlock/pthread_rwlock_timedrdlock</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机相关</title>
      <link href="/2023/06/27/virtual-machine/"/>
      <url>/2023/06/27/virtual-machine/</url>
      
        <content type="html"><![CDATA[<h2 id="Vmware中Linux或macOS客户端如何回收硬盘空间"><a href="#Vmware中Linux或macOS客户端如何回收硬盘空间" class="headerlink" title="Vmware中Linux或macOS客户端如何回收硬盘空间"></a>Vmware中Linux或macOS客户端如何回收硬盘空间</h2><p><a href="https://www.cnblogs.com/teacat/p/10444177.html">https://www.cnblogs.com/teacat/p/10444177.html</a><br>Vmware对于Windows的客户端，使用GUI操作硬盘回收和整理磁盘即可。对于Linux或macOS客户端，需要在安装Vmware Tools之后，在客户端OS的终端Terminal里输入命令进行操作：</p><h3 id="Linux客户端："><a href="#Linux客户端：" class="headerlink" title="Linux客户端："></a>Linux客户端：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/vmware-toolbox-cmd disk list</span><br><span class="line">sudo /usr/bin/vmware-toolbox-cmd disk shrink /</span><br></pre></td></tr></table></figure><h3 id="macOS-x2F-OS-X客户端："><a href="#macOS-x2F-OS-X客户端：" class="headerlink" title="macOS &#x2F; OS X客户端："></a>macOS &#x2F; OS X客户端：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Library/Application\ Support/VMware\ Tools/vmware-tools-cli disk shrink /</span><br></pre></td></tr></table></figure><p>需要注意的是，macOS客户端如果使用了APFS格式，上述命令无效，需要使用如下的方法回收磁盘空间：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diskutil secureErase freespace 0 Machintosh\ HD</span><br><span class="line">/Applications/VMware\ Fusion.app/Contents/Library/vmware-vdiskmanager -d macOS_Guest.vmwarevm\Disk.vmdk</span><br><span class="line">/Applications/VMware\ Fusion.app/Contents/Library/vmware-vdiskmanager -k macOS_Guest.vmwarevm\Disk.vmdk</span><br></pre></td></tr></table></figure><p>第一条命令是用0填充可用空间，后面两条命令-d是整理磁盘碎片，-k是压缩磁盘空间。在Windows Host中也可同理操作。</p><h2 id="vmware-fusion"><a href="#vmware-fusion" class="headerlink" title="vmware fusion"></a>vmware fusion</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OpenGL 4.3</span><br><span class="line">DX11 和 eGPU 仅支持 Intel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Timer相关</title>
      <link href="/2023/06/27/timer-note/"/>
      <url>/2023/06/27/timer-note/</url>
      
        <content type="html"><![CDATA[<h2 id="qt-timer"><a href="#qt-timer" class="headerlink" title="qt timer"></a>qt timer</h2><p>win SetTimer&#x2F;SetCoalescableTimer<br>mac CFRunLoopAddTimer<br>unix qt_safe_poll -&gt; qt_ppoll -&gt; ppoll&#x2F;poll&#x2F;select</p><h2 id="win32-threadpool"><a href="#win32-threadpool" class="headerlink" title="win32 threadpool"></a>win32 threadpool</h2><p>QueueUserWorkItem<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/procthread/thread-pool-api">https://learn.microsoft.com/zh-cn/windows/win32/procthread/thread-pool-api</a></p><h2 id="timer-heap"><a href="#timer-heap" class="headerlink" title="timer heap"></a>timer heap</h2><p>libuv&#x2F;libhv timer -&gt; heap<br>Linux 定时器(四) 时间堆<br><a href="https://www.jianshu.com/p/e880f398530d">https://www.jianshu.com/p/e880f398530d</a><br>定时器中到期时间最小值作为心搏间隔<br>Linux 定时器(三) 时间轮<br><a href="https://www.jianshu.com/p/df55c5a1f8c3">https://www.jianshu.com/p/df55c5a1f8c3</a><br>时间轮 -&gt; hash<br>时间堆 -&gt; heap<br>《Linux高性能服务器编程》——第十一章：定时器<br><a href="https://zhuanlan.zhihu.com/p/444354709">https://zhuanlan.zhihu.com/p/444354709</a><br>【定时器】4种定时器方式介绍及时间轮、时间堆实现<br><a href="https://blog.csdn.net/weixin_42687826/article/details/104381616">https://blog.csdn.net/weixin_42687826/article/details/104381616</a><br>高性能计时器Timer的设计（时间轮和时间堆两种方式）<br><a href="https://www.cnblogs.com/developing/p/10856299.html">https://www.cnblogs.com/developing/p/10856299.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows记录</title>
      <link href="/2023/06/27/windows-note/"/>
      <url>/2023/06/27/windows-note/</url>
      
        <content type="html"><![CDATA[<h1 id="HyperV"><a href="#HyperV" class="headerlink" title="HyperV"></a>HyperV</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /Online /Disable-Feature /FeatureName:Microsoft-Hyper-V-All</span><br><span class="line"><span class="comment"># https://www.jianshu.com/p/5f3cb933f9b6</span></span><br><span class="line">Disable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</span><br></pre></td></tr></table></figure><h1 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h1><h2 id="PeekMessage和GetMessage函数的主要区别"><a href="#PeekMessage和GetMessage函数的主要区别" class="headerlink" title="PeekMessage和GetMessage函数的主要区别"></a>PeekMessage和GetMessage函数的主要区别</h2><p><a href="https://blog.csdn.net/gencheng/article/details/9376881">https://blog.csdn.net/gencheng/article/details/9376881</a></p><h2 id="InvalidateRect-HWND-与-ValidateRect-HWND-的区别"><a href="#InvalidateRect-HWND-与-ValidateRect-HWND-的区别" class="headerlink" title="InvalidateRect(HWND) 与 ValidateRect(HWND)的区别"></a>InvalidateRect(HWND) 与 ValidateRect(HWND)的区别</h2><p><a href="http://t.zoukankan.com/renyuan-p-2746020.html">http://t.zoukankan.com/renyuan-p-2746020.html</a><br>InvalidateRect标脏(dirty) ValidateRect表示已经处理好可以显示</p><p><a href="https://www.codenong.com/62553819/">https://www.codenong.com/62553819/</a><br>消息处理必须在WndProc中完成，而不是在”主循环”中完成<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/learnwin32/closing-the-window">https://learn.microsoft.com/zh-cn/windows/win32/learnwin32/closing-the-window</a></p><h2 id="WaitMessage"><a href="#WaitMessage" class="headerlink" title="WaitMessage"></a>WaitMessage</h2><p>线程的消息队列中无其它消息时，该函数就将控制权交给另外的线程<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-waitmessage">https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-waitmessage</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MSG msg;</span><br><span class="line"><span class="built_in">ZeroMemory</span>(&amp;msg, <span class="built_in">sizeof</span>(msg));</span><br><span class="line"><span class="keyword">while</span> (msg.message != WM_QUIT)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">PeekMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0U</span>, <span class="number">0U</span>, PM_REMOVE))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">WaitMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jeffpar.github.io/kbarchive/kb/074/Q74042/">https://jeffpar.github.io/kbarchive/kb/074/Q74042/</a><br><a href="https://github.com/wch/r-source/blob/trunk/src/extra/graphapp/events.c">https://github.com/wch/r-source/blob/trunk/src/extra/graphapp/events.c</a><br>void waitevent(void)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GetMessage差不多相当于PeekMessage + WaitMessage 🤔</span><br><span class="line">macOS -&gt; nextEventMatchingMask:untilDate:inMode:dequeue:</span><br><span class="line">sendEvent:  postEvent:atStart:  sendAction:to:from:</span><br></pre></td></tr></table></figure><h2 id="MsgWaitForMultipleObjectsEx"><a href="#MsgWaitForMultipleObjectsEx" class="headerlink" title="MsgWaitForMultipleObjectsEx"></a>MsgWaitForMultipleObjectsEx</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjectsex">https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-msgwaitformultipleobjectsex</a></p><h2 id="WaitForMultipleObjectsEx"><a href="#WaitForMultipleObjectsEx" class="headerlink" title="WaitForMultipleObjectsEx"></a>WaitForMultipleObjectsEx</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjectsex">https://learn.microsoft.com/zh-cn/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjectsex</a><br>如果你有创建窗口的线程，请使用 MsgWaitForMultipleObjects 或 MsgWaitForMultipleObjectsEx，而不是 WaitForMultipleObjectsEx。</p><h1 id="Env"><a href="#Env" class="headerlink" title="Env"></a>Env</h1><h2 id="Windows设置环境变量"><a href="#Windows设置环境变量" class="headerlink" title="Windows设置环境变量"></a>Windows设置环境变量</h2><p><a href="https://blog.csdn.net/uddiqpl/article/details/126391711">https://blog.csdn.net/uddiqpl/article/details/126391711</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set/setx/wmic都不合适</span><br><span class="line">reg query HKCU\Environment</span><br><span class="line">reg query HKCU\Environment /v PATH</span><br><span class="line">默认REG_SZ无法被set获取到</span><br><span class="line">setx RUSTUP_DIST_SERVER &quot;https://mirrors.tuna.tsinghua.edu.cn/rustup&quot;</span><br><span class="line"># reg add HKCU\Environment /v RUSTUP_DIST_SERVER /t REG_EXPAND_SZ /d https://mirrors.tuna.tsinghua.edu.cn/rustup/f</span><br><span class="line">reg query HKCU\Environment /v RUSTUP_DIST_SERVER</span><br><span class="line">有点扭曲setx设置 reg delete删除</span><br></pre></td></tr></table></figure><h2 id="非Unicode程序的语言"><a href="#非Unicode程序的语言" class="headerlink" title="非Unicode程序的语言"></a>非Unicode程序的语言</h2><p><a href="https://www.cnblogs.com/rickerliang/p/3732027.html">https://www.cnblogs.com/rickerliang/p/3732027.html</a><br><a href="https://www.zhihu.com/question/536400200">https://www.zhihu.com/question/536400200</a></p><blockquote><p>开启之后msvc cl就不会报936的4819问题 不然需要添加&#x2F;utf-8标记<br><a href="https://learn.microsoft.com/zh-cn/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8">https://learn.microsoft.com/zh-cn/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8</a></p></blockquote><p><a href="http://www.dnxtc.net/zixun/WIN11yingyong/2021-08-16/9360.html">http://www.dnxtc.net/zixun/WIN11yingyong/2021-08-16/9360.html</a><br>win11家庭版升级专业版详细步骤(多种方法)</p><p><a href="https://zhuanlan.zhihu.com/p/540878468">https://zhuanlan.zhihu.com/p/540878468</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker记录</title>
      <link href="/2023/06/27/docker-note/"/>
      <url>/2023/06/27/docker-note/</url>
      
        <content type="html"><![CDATA[<p><a href="http://shouce.jb51.net/docker_practice/">Docker从入门到实践</a></p><h1 id="Docker-sock"><a href="#Docker-sock" class="headerlink" title="Docker sock"></a>Docker sock</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -s --unix-socket /var/run/docker.sock http://image/json</span><br><span class="line">curl -s --unix-socket /var/run/docker.sock v1.41/info</span><br><span class="line">curl -s --unix-socket /var/run/docker.sock /info -vv [Error]</span><br><span class="line">curl -s --unix-socket /var/run/docker.sock docker/info -vv</span><br></pre></td></tr></table></figure><ul><li>Trying &#x2F;var&#x2F;run&#x2F;docker.sock:0…</li><li>Connected to docker (&#x2F;Users&#x2F;wurui&#x2F;.docker&#x2F;run&#x2F;docker.sock) port 80 (#0)<blockquote><p>GET &#x2F;info HTTP&#x2F;1.1<br>Host: docker<br>User-Agent: curl&#x2F;7.79.1<br>Accept: <em>&#x2F;</em></p></blockquote></li><li>Mark bundle as not supporting multiuse<br>&lt; HTTP&#x2F;1.1 200 OK<br>&lt; Api-Version: 1.41<br>&lt; Content-Type: application&#x2F;json<br>&lt; Date: Thu, 21 Jul 2022 09:55:25 GMT<br>&lt; Docker-Experimental: false<br>&lt; Ostype: linux<br>&lt; Server: Docker&#x2F;20.10.17 (linux)<br>&lt; Transfer-Encoding: chunked</li></ul><p>需要一个Host, &#x2F;info前面不重要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -s --unix-socket /var/run/docker.sock -vv docker/containers/json?all=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">curl -s --unix-socket /var/run/docker.sock -vv docker/containers/d778e9e523e231cc3fd9664480ffc675f64f8f6f83ece0668192184b4e7b3e2f/json</span><br><span class="line">curl -s --unix-socket /var/run/docker.sock -vv docker/containers/d778e9e523e231cc3fd9664480ffc675f64f8f6f83ece0668192184b4e7b3e2f/top</span><br><span class="line"></span><br><span class="line">curl -s --unix-socket /var/run/docker.sock -vv docker/containers/d778e9e523e231cc3fd9664480ffc675f64f8f6f83ece0668192184b4e7b3e2f/stats</span><br><span class="line"></span><br><span class="line">curl -s --unix-socket /var/run/docker.sock -vv docker/containers/d778e9e523e231cc3fd9664480ffc675f64f8f6f83ece0668192184b4e7b3e2f/stats?stream=0</span><br><span class="line"></span><br><span class="line">curl -s --unix-socket /var/run/docker.sock -vv docker/images/json</span><br></pre></td></tr></table></figure><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -it manjarolinux/base bash</span><br><span class="line">docker <span class="built_in">exec</span> -it manjarolinux bash</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">docker <span class="built_in">exec</span> -it manjaro bash</span><br><span class="line"></span><br><span class="line">docker commit -m <span class="string">&quot;test&quot;</span> d778e9e523e2 temp_image</span><br><span class="line">docker rmi temp_image</span><br><span class="line"></span><br><span class="line">pacman -S wqy-microhei-lite mousepad</span><br></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/<span class="variable">$arch</span>/<span class="variable">$repo</span></span><br></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;pacman.conf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Color</span><br><span class="line">ParallelDownloads = 8</span><br></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;locale.gen</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zh_CN.UTF-8 UTF-8</span><br></pre></td></tr></table></figure><p><code>locale-gen</code></p><h2 id="XQuartz"><a href="#XQuartz" class="headerlink" title="XQuartz"></a>XQuartz</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install --cask xquartz</span><br><span class="line"># xhost +</span><br><span class="line">export DISPLAY=host.docker.internal:0</span><br></pre></td></tr></table></figure><h2 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h2><p>Download and install latest XQuartz.</p><p>Enable Allow connections from network clients in X11 Preferences -&gt; Security.</p><p>Add following line to file ~&#x2F;.ssh&#x2F;config.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XAuthLocation /opt/X11/bin/xauth</span><br></pre></td></tr></table></figure><p>Enable indirect OpenGL rendering with X11 forwarding</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write org.macosforge.xquartz.X11 enable_iglx -bool true</span><br></pre></td></tr></table></figure><p>Unfortunately, XQuartz only supports OpenGL 1.4.</p><h2 id="Docker服务端的防护"><a href="#Docker服务端的防护" class="headerlink" title="Docker服务端的防护"></a>Docker服务端的防护</h2><p><a href="http://shouce.jb51.net/docker_practice/security/daemon_sec.html">http://shouce.jb51.net/docker_practice/security/daemon_sec.html</a><br>为了加强对服务端的保护，Docker 的 REST API（客户端用来跟服务端通信）在 0.5.2 之后使用本地的 Unix 套接字机制替代了原先绑定在 127.0.0.1 上的 TCP 套接字，因为后者容易遭受跨站脚本攻击。现在用户使用 Unix 权限检查来加强套接字的访问安全。</p><h2 id="docker-api-lua"><a href="#docker-api-lua" class="headerlink" title="docker_api.lua"></a>docker_api.lua</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/run/docker.pid <span class="comment">--&gt; 需要调整</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入解析MacOS和iOS 卷三 笔记</title>
      <link href="/2023/06/27/macos-ios-internals-vol-three/"/>
      <url>/2023/06/27/macos-ios-internals-vol-three/</url>
      
        <content type="html"><![CDATA[<p>MacOS and iOS Internals, Volume III : Security &amp; Insecurity.md</p><h1 id="Part-I-Defensive-Techniques-and-Technologie"><a href="#Part-I-Defensive-Techniques-and-Technologie" class="headerlink" title="Part I: Defensive Techniques and Technologie"></a>Part I: Defensive Techniques and Technologie</h1><h2 id="1-Authentication"><a href="#1-Authentication" class="headerlink" title="1. Authentication"></a>1. Authentication</h2><p>It’s important to emphasize - at the lowest level of the kernel - UNIX only sees<br>user ids and group, not names. The name “root” is meaningless - it is the uid of 0 which<br>is all powerful.</p><h3 id="Password-Files-OS"><a href="#Password-Files-OS" class="headerlink" title="Password Files (*OS)"></a>Password Files (<code>*OS</code>)</h3><p>&#x2F;etc&#x2F;master.passwd</p><h3 id="SetUID-and-SetGID-MacOS"><a href="#SetUID-and-SetGID-MacOS" class="headerlink" title="SetUID and SetGID (MacOS)"></a>SetUID and SetGID (MacOS)</h3><p>Darwin has steadily been reducing its setuid&#x2F;setgid club membership. With the move to<br>opendirectory, passwd(1) could be made a standard binary again. Other binaries likewise<br>benefitted from the move to XPC and (as discussed later in this book) entitlements.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The list of setuid root programs on MacOS</span></span><br><span class="line">find / -user root -perm -4000 2&gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="The-Pluggable-Authentication-Module-MacOS"><a href="#The-Pluggable-Authentication-Module-MacOS" class="headerlink" title="The Pluggable Authentication Module (MacOS)"></a>The Pluggable Authentication Module (MacOS)</h3><p>The Pluggable Authentication Module (PAM) is a standard UNIX library which aims to<br>abstract and modularize the UNIX authentication APIs.<br>logging, auditing, or poliy enforcers.<br>Most importantly, PAM decouples portions of the authentication logic from the processes<br>themselves, enabling external configuration through files.</p><ul><li>Function classes<br>auth&#x2F;account&#x2F;session&#x2F;password</li><li>Control flags<br>requisite&#x2F;required&#x2F;sufficient&#x2F;binding&#x2F;optional<br>&#x2F;etc&#x2F;pam.d&#x2F;su</li></ul><h3 id="opendirectoryd-MacOS"><a href="#opendirectoryd-MacOS" class="headerlink" title="opendirectoryd (MacOS)"></a>opendirectoryd (MacOS)</h3><p>[&#x2F;Library&#x2F;Preferences&#x2F;OpenDirectory]<br>[&#x2F;System&#x2F;Library&#x2F;OpenDirectory&#x2F;Modules&#x2F;]<br>Module exist for ActiveDirectory and NetLogon (Windows) integration<br>Kerberosv5 (RFC1510), FDESupport, keychain integration, ConfigurationProfiles (MCX) and more.<br>[&#x2F;var&#x2F;log&#x2F;opendirectoryd.log]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odutil <span class="built_in">set</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure><ul><li>Maintaining permissons<br>[&#x2F;System&#x2F;Library&#x2F;OpenDirectory&#x2F;permissions.plist]</li><li>The data stores<br>[&#x2F;System&#x2F;Library&#x2F;OpenDirectory&#x2F;Configurations&#x2F;Local.plist]<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults <span class="built_in">read</span> /System/Library/OpenDirectory/Configurations/Local.plist modules</span><br></pre></td></tr></table></figure>&#x2F;var&#x2F;db&#x2F;dslocal&#x2F;nodes&#x2F;Default<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo defaults <span class="built_in">read</span> /var/db/dslocal/nodes/Default/users/root.plist</span><br></pre></td></tr></table></figure>Directory Utility.app -&gt; Directory Editor<br>dscl(1)<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dscl . -list Users</span><br><span class="line">dscl . -<span class="built_in">read</span> /Users/root</span><br><span class="line">dscl . -<span class="built_in">read</span> /Users/`<span class="built_in">whoami</span>` Password</span><br><span class="line">sudo dscl . -<span class="built_in">read</span> /Users/`<span class="built_in">whoami</span>` ShadowHashData</span><br></pre></td></tr></table></figure></li><li>Communicating with clients<br>finger &#x2F;var&#x2F;utmpx<br>ports</li></ul><ul><li>com.apple.system.opendirectoryd.libinfo</li><li>com.apple.system.opendirectoryd.membership</li><li>com.apple.system.opendirectoryd.api<br> odutil</li><li>com.apple.system.opendirectoryd.rpc</li></ul><h3 id="The-LocalAuthentication-Framework"><a href="#The-LocalAuthentication-Framework" class="headerlink" title="The LocalAuthentication Framework"></a>The LocalAuthentication Framework</h3><ul><li>coreauthd<br>In iOS the daemon is started as a LaunchDaemon, but in MacOS an additional instance is started<br>as a LaunchAgent, as well.</li><li>XPC protocol<br>com.apple.CoreAuthentication.[daemon&#x2F;agent]</li><li>Entitlements</li></ul><h3 id="Apple-IDs"><a href="#Apple-IDs" class="headerlink" title="Apple IDs"></a>Apple IDs</h3><ul><li>AppleIDAuthAgent<br>&#x2F;System&#x2F;Library&#x2F;CoreServices</li></ul><h3 id="External-Account"><a href="#External-Account" class="headerlink" title="External Account"></a>External Account</h3><p>Accounts.framework<br>accountsd</p><ul><li>External Providers<br>[&#x2F;Library&#x2F;Preferences&#x2F;SystemConfiguration&#x2F;com.apple.accounts.exists.plist] (MacOS)</li></ul><h2 id="2-Auditing-MacOS"><a href="#2-Auditing-MacOS" class="headerlink" title="2. Auditing (MacOS)"></a>2. Auditing (MacOS)</h2><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><ul><li>A little history</li><li>Auditing Concepts (a refresher)<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc/security</span><br><span class="line">sudo <span class="built_in">ls</span> /var/audit</span><br></pre></td></tr></table></figure>&#x2F;dev&#x2F;auditpipe<br>The device node intentionally desugbed to be clonebale, in order to allow multiple consumers<br>to work concurrently and get events.<br>praudit&#x2F;auditreduce</li></ul><h3 id="Audit-Sessions"><a href="#Audit-Sessions" class="headerlink" title="Audit Sessions"></a>Audit Sessions</h3><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>AUDIT_MACH_SYSCALL_ENTER<br>[bsd&#x2F;security&#x2F;audit&#x2F;audit.h]<br>audit_syscall_entry()<br>[bsd&#x2F;security&#x2F;audit&#x2F;audit_worker.c]<br>audit_worker_cv&#x2F;audit_commit</p><ul><li>auditd<br>[&#x2F;usr&#x2F;sbin&#x2F;auditd]<br>com.apple.auditd.plist<br>HOST_AUDIT_CONTROL_PORT<br>audit_send_trigger() [bsd&#x2F;security&#x2F;audit&#x2F;audit_bsd.c]<br><code>&lt;mach/audit_triggers.defs&gt;</code></li></ul><h3 id="System-call-interface"><a href="#System-call-interface" class="headerlink" title="System call interface"></a>System call interface</h3><ul><li>audit (#350)<br>[bsd&#x2F;security&#x2F;audit&#x2F;audit_syscalls.c]</li><li>auditon (#351)<br>The auditon(2) syscall provides a way to configure various audit parameters from userspace.</li><li>[get&#x2F;set]auid (#353, #354)</li><li>[get&#x2F;set]audit_addr (#357, #358)</li><li>auditctl (#359)</li></ul><h3 id="OpenBSM-APIs"><a href="#OpenBSM-APIs" class="headerlink" title="OpenBSM APIs"></a>OpenBSM APIs</h3><ul><li>Querying the policy</li><li>Reading Audit Records<br>Audit consumers may tap audit records by enumerating and reading from the audit files<br>in &#x2F;var&#x2F;audit, or the “live stream” of &#x2F;dev&#x2F;auditpipe.<br>au_read_rec(3)&#x2F;au_fetch_tok(3)<br>struct tokenstr [<code>&lt;bsm/libbsm.h&gt;</code>]<br>au_print_tok(3)&#x2F;au_print_flags_tok(3) AU_OFLAG_[RAW&#x2F;SHORT&#x2F;XML]</li><li>Writinng Audit Records</li></ul><h3 id="Auditing-Considerations"><a href="#Auditing-Considerations" class="headerlink" title="Auditing Considerations"></a>Auditing Considerations</h3><p>The main drawback to keep in mind, however, is that auditing reports events post factum.</p><h2 id="3-Authorization-KAuth"><a href="#3-Authorization-KAuth" class="headerlink" title="3. Authorization (KAuth)"></a>3. Authorization (KAuth)</h2><p>MacOS 10.4 (Tiger)</p><h3 id="Design-1"><a href="#Design-1" class="headerlink" title="Design"></a>Design</h3><p>kauth_authorize_action()&#x2F;kauth_cred_get()</p><h3 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h3><p>[bsd&#x2F;kern&#x2F;kauth_authorization.c]<br>kauth_register_scope()</p><ul><li>KAUTH_SCOPE_GENERIC com.apple.kauth.generic<br>kauth_cred_getuid()</li><li>KAUTH_SCOPE_PROCESS com.apple.kauth.process<br>KAUTH_PROCESS_CANTRACE&#x2F;KAUTH_PROCES_CANSIGNAL<br>ptrace (PT_ATTACH) -&gt; task port</li><li>KAUTH_SCOPE_FILEOP</li><li>KAUTH_SCOPE_VNODE com.apple.kauth.vnode<br> vnode_authorize()</li></ul><ul><li>Authorizing vnode operations</li></ul><h3 id="KAuth-Credentials"><a href="#KAuth-Credentials" class="headerlink" title="KAuth Credentials"></a>KAuth Credentials</h3><h3 id="KAuth-Identity-Resolvers-MacOS"><a href="#KAuth-Identity-Resolvers-MacOS" class="headerlink" title="KAuth Identity Resolvers (MacOS)"></a>KAuth Identity Resolvers (MacOS)</h3><p>identitysvc() (#293)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procexp opendirectoryd threads</span><br></pre></td></tr></table></figure><h3 id="Debugging-KAuth"><a href="#Debugging-KAuth" class="headerlink" title="Debugging KAuth"></a>Debugging KAuth</h3><p>KAUTH_DEBUG</p><h2 id="3-Mandatory-Access-Control-Framework"><a href="#3-Mandatory-Access-Control-Framework" class="headerlink" title="3. Mandatory Access Control Framework"></a>3. Mandatory Access Control Framework</h2><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>FreeBSD 6.0</p><ul><li>Nomenclature<br>MAC is enforced by the Administrator (or, at times, the operating system itself), and user are<br>constrained by it. Only the Administrator (and, in <code>*OS</code>, not even the Administrator - only<br>Apple itself) can override or toggle the MAC settings.<br>A key conecpt in MAC is that of labels.<br>struct label [security&#x2F;_label.h]<br>cr_label field of KAuth’s struct ucred</li><li>MACFramework.kext<br>com.apple.kpi.dsep<br>&#x2F;System&#x2F;Library&#x2F;Extensions&#x2F;System.kext&#x2F;Plugins&#x2F;MACFramework.kext<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kextstat | grep -B1 dsep</span><br></pre></td></tr></table></figure></li></ul><h3 id="MACF-Policies"><a href="#MACF-Policies" class="headerlink" title="MACF Policies"></a>MACF Policies</h3><p>mac_policy_conf&#x2F;mac_policy_register<br>The heart of the policy is in two fields: the mpc_ops, specifying the operations the policy<br>wished to filter, and mpc_labelnames, which are the label namespace to which the policy applies.<br>struct mac_policy_ops [security&#x2F;mac_policy.h]</p><h3 id="Setting-up-MACF"><a href="#Setting-up-MACF" class="headerlink" title="Setting up MACF"></a>Setting up MACF</h3><p>mac_policy_init()</p><h3 id="MACF-Callouts"><a href="#MACF-Callouts" class="headerlink" title="MACF Callouts"></a>MACF Callouts</h3><p>[bsd&#x2F;kern&#x2F;kern_mman.c]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl security.mac | grep enforc</span><br></pre></td></tr></table></figure><ul><li>expos_task (MacOS 10.11)</li><li>priv_check<br>[bsd&#x2F;sys&#x2F;priv.h]</li></ul><h3 id="MACF-System-Calls"><a href="#MACF-System-Calls" class="headerlink" title="MACF System Calls"></a>MACF System Calls</h3><p><code>&lt;security/mac.h&gt;</code><br>__mac_syscall<br>The Sanbox.kext makes heavy use of this, as described later in Chaper 8.</p><h3 id="Final-Notes"><a href="#Final-Notes" class="headerlink" title="Final Notes"></a>Final Notes</h3><p>Unfortunately, if you have any plans of getting Apple’s blessing - forget about using this.</p><h2 id="5-Code-Signing"><a href="#5-Code-Signing" class="headerlink" title="5. Code Signing"></a>5. Code Signing</h2><h3 id="The-Code-Signature-Format"><a href="#The-Code-Signature-Format" class="headerlink" title="The Code Signature Format"></a>The Code Signature Format</h3><ul><li>LC_CODE_SIGNATURE and the SuperBlob<br>[bsd&#x2F;sys&#x2F;codesign.h]</li><li>The Code Directory Blob<br>[osfmk&#x2F;kern&#x2F;cs_blobs.h]</li><li>Code Page Slots<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -d -vvvvvv /bin/ls</span><br></pre></td></tr></table></figure></li><li>Special Slots</li><li>Ad-Hoc Signatures</li><li>Code Signing Flags</li></ul><h3 id="Code-Signature-Requiements"><a href="#Code-Signature-Requiements" class="headerlink" title="Code Signature Requiements"></a>Code Signature Requiements</h3><ul><li>The Requirements Grammer</li><li>Encoding requirements<br>The SecReuirementCreateWithString[AndErrors] functions are the “compiler”, and the “decompiler”<br>is SecRequirementsCopyString.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">codesign -dr- /Applications/Xcode.app/Contents/MacOS/Xcode</span><br><span class="line">codesign -dr- /Applications/wpsoffice.app/Contents/MacOS/wpsoffice</span><br><span class="line">codesign -d /Applications/wpsoffice.app/Contents/MacOS/wpsoffice</span><br><span class="line">man csreq</span><br></pre></td></tr></table></figure></li><li>Requirement validation<br>Apple’s PKI page</li></ul><h3 id="Entitlements"><a href="#Entitlements" class="headerlink" title="Entitlements"></a>Entitlements</h3><p>Code signatures may optionallu contain an entitlement blob.<br>The entitlement blob is, in effect, nothing more than a property list in XML form.</p><h3 id="Code-Signature-Enforcement"><a href="#Code-Signature-Enforcement" class="headerlink" title="Code Signature Enforcement"></a>Code Signature Enforcement</h3><p>kernel mode<br>load_code_signature()<br>mac_vnode_check_signature</p><ul><li>Exceptions</li></ul><ul><li>JIT CONFIG_DYNAMIC_CODE_SIGNING</li><li>Resilient Code Signing</li></ul><ul><li>Debugging</li><li>Code Signing Weaknesses</li></ul><ul><li>Jekyll Apps</li><li>Bait-and-Switch inode reuse (&lt; iOS 9)</li><li>Locked memory</li><li>Lack of validation on __DATA sections and writable memory</li><li>Exploiting kernel bugs</li></ul><ul><li>The struct cs_blob<br>csb_entitelments*</li></ul><h3 id="Code-Signing-APIs"><a href="#Code-Signing-APIs" class="headerlink" title="Code Signing APIs"></a>Code Signing APIs</h3><ul><li>System Calls<br>fnctl -&gt; F_ADDSIGS, F_FINDSIGS and F_ADD_FILEISGS[_RETURN]</li><li>Framework-Level Wrappers<br>Security.framework<br>sysctl vm.cs_*<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl vm. | grep cs_</span><br></pre></td></tr></table></figure></li><li>DTrace probes (MacOS)<br>csops[_audittoken]</li></ul><h2 id="6-Software-Restrictions-MacOS"><a href="#6-Software-Restrictions-MacOS" class="headerlink" title="6. Software Restrictions (MacOS)"></a>6. Software Restrictions (MacOS)</h2><h3 id="Authorizations"><a href="#Authorizations" class="headerlink" title="Authorizations"></a>Authorizations</h3><p>Rather than being defined at the object level, authorizationas are associated with particular<br>actions, which are generally sensitive.</p><ul><li>The authorization database<br>&#x2F;var&#x2F;db&#x2F;auth.db<br>&#x2F;System&#x2F;Library&#x2F;Security&#x2F;authorization.plist<br>rules defined in Security’s [libsecurity_authorization&#x2F;lib&#x2F;AuthorizationTagsPriv.h]<br>allow-root&#x2F;timeout&#x2F;shared&#x2F;requirement&#x2F;comment&#x2F;class<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dumping the authorization rules</span></span><br><span class="line">sudo sqlite3 /var/db/auth.db <span class="string">&quot;select name, comment from rules&quot;</span></span><br><span class="line"><span class="comment"># Listing a particular authorization</span></span><br><span class="line">security authorizationdb <span class="built_in">read</span> com.apple.activitymonitor.kill | plutil -p -</span><br><span class="line"><span class="comment"># Viewing ActivityMonitor&#x27;s entitlements</span></span><br><span class="line">codesign --display --entitlements - /System/Applications/Utilities/Activity\ Monitor.app/Contents/MacOS/Activity\ Monitor </span><br><span class="line">codesign --display --entitlements - --xml /System/Applications/Utilities/Activity\ Monitor.app/Contents/MacOS/Activity\ Monitor | plutil -p -</span><br></pre></td></tr></table></figure></li></ul><h3 id="authd"><a href="#authd" class="headerlink" title="authd"></a>authd</h3><ul><li>Protocol<br>&#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;com.apple.security.authtrampoline.plist<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plutil -p /System/Library/LaunchDaemons/com.apple.*.plist</span><br><span class="line">plutil -p /System/Library/LaunchDaemons/com.apple.security.authtrampoline.plist</span><br></pre></td></tr></table></figure>Elevating privileges requires security to fork(2) and exec(2) &#x2F;usr&#x2F;libexec&#x2F;security_authtrampoline.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sqlite3 /var/db/auth.db .dump | grep system.privilege.admin</span><br></pre></td></tr></table></figure></li></ul><h3 id="GateKeeper-MacOS"><a href="#GateKeeper-MacOS" class="headerlink" title="GateKeeper (MacOS)"></a>GateKeeper (MacOS)</h3><p>MacOS 10.7.5</p><ul><li>Precursor: Quarantine<br>com.apple.quarentine -&gt; LaunchServices.framework’s LSQuarentine.h<br>Quarantine.kext</li><li>libquarantine<br>&#x2F;usr&#x2F;lib&#x2F;system&#x2F;libquarantine.dylib</li><li>Quarantine.kext<br>com.apple.security.quarantine<br>as a MACF kext<br>&#x2F;System&#x2F;Library&#x2F;Extensions&#x2F;Quarantine.kext&#x2F;Contents&#x2F;MacOS&#x2F;Quarantine</li><li>User mode interface</li></ul><ul><li>quarantine mount option</li><li>sysctl MIBs</li></ul><h3 id="Quarantine-in-action"><a href="#Quarantine-in-action" class="headerlink" title="Quarantine in action"></a>Quarantine in action</h3><p>~&#x2F;Library&#x2F;Preferences&#x2F;com.apple.LaunchServices.QuarantineEventsV2</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 .dump</span><br></pre></td></tr></table></figure><ul><li>CoreServicesUIAgent<br>&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;CoreServicesUIAgent.app<br>-&gt; com.apple.coreservices.quarantine-resolve XPC servive<br>in the com.apple.coreservices.uiagent.plist<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plutil -p /System/Library/LaunchAgents/com.apple.coreservices.uiagent.plist</span><br></pre></td></tr></table></figure>Xprotectframework.framework<br>XProtect.plist<br>Xprotect.yara -&gt; VirusTotal’s yara<br>XprotectService -&gt; com.apple.XprotectFramework.AnalysisService</li></ul><h3 id="syspolicyd"><a href="#syspolicyd" class="headerlink" title="syspolicyd"></a>syspolicyd</h3><p>&#x2F;var&#x2F;db&#x2F;SystemPolicy</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sqlite3 /var/db/SystemPolicy .dump</span><br></pre></td></tr></table></figure><p>[OSX&#x2F;libsecurity_codesigning&#x2F;lib&#x2F;policydb.cpp]<br>[OSX&#x2F;libsecurity_codesigning&#x2F;lib&#x2F;syspolicy.sql]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sqlite3 /var/db/SystemPolicy <span class="string">&quot;select id, label from authority where disabled=1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>MacOS 13: Secure Kernel Extension Loading<br>&#x2F;var&#x2F;db&#x2F;SystemPolicyConfiguration<br>Default.plist&#x2F;migration.plist&#x2F;KextPolicy<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy <span class="string">&quot;.headers on&quot;</span> <span class="string">&quot;select * from kext_policy&quot;</span></span><br><span class="line">sudo sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy .dump</span><br></pre></td></tr></table></figure></li><li>XPC protocol<br>NSXPC -&gt; com.apple.security.syspolicy.kext<br>private SystemPolicy.framework (MacOS 13)</li><li>spctl(8)<br>One of the mose useful options of spctl(8), –list, is actually undocumented.<br>The spctl(8) utility is nothing more than a command line front-end to an XPC client,<br>which connects to syspolicyd(8) for purposes of querying the policy database.<br>spctl -a -t exec -vv binary<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spctl -a -t <span class="built_in">exec</span> -vv /System/Applications/Calculator.app</span><br><span class="line">spctl -a -t <span class="built_in">exec</span> -vv /Applications/wpsoffice.app</span><br></pre></td></tr></table></figure></li></ul><h3 id="App-Translocation"><a href="#App-Translocation" class="headerlink" title="App Translocation"></a>App Translocation</h3><p>offically called “Gatekeeper Path Randimization” by Apple<br>App translocation depends on the com.apple.quarantine extend attribute, so if the attribute<br>is manually removed, or the Application is moved using Finder, it is no longer translocated.</p><ul><li>Test Translocation</li></ul><h3 id="Managed-Clients-MacOS"><a href="#Managed-Clients-MacOS" class="headerlink" title="Managed Clients (MacOS)"></a>Managed Clients (MacOS)</h3><p>like Windows with its Group Policy Objects (GPO)<br>&#x2F;var&#x2F;db&#x2F;ConfigurationProfiles -&gt; profiles(1)</p><ul><li>parentalcontrolsd</li><li>mdmclient<br>&#x2F;usr&#x2F;libexec&#x2F;mdmclient<br>private ConfigurationProfiles.framework</li><li>Startup</li></ul><ul><li>As a LaunchDaemon</li><li>As a LaunchAgent</li></ul><ul><li>Arguments</li><li>Entitlements</li><li>ManagedClient</li><li>ManagedClientAgent<br>ManagedClient.framework<br>&#x2F;usr&#x2F;libexec&#x2F;mcxalr<br>mcxalr.kext<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a | grep mcx</span><br></pre></td></tr></table></figure>Plugins<br>[&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SecurityAgentPlugins&#x2F;MCXMechanism.bundle]<br>[&#x2F;System&#x2F;Library&#x2F;DirectoryServices&#x2F;dscl&#x2F;mcxcl.dsclext]</li></ul><h2 id="7-AppleMobileFileIntegrity"><a href="#7-AppleMobileFileIntegrity" class="headerlink" title="7. AppleMobileFileIntegrity"></a>7. AppleMobileFileIntegrity</h2><h3 id="AppleMobileFileIntegrity-kext"><a href="#AppleMobileFileIntegrity-kext" class="headerlink" title="AppleMobileFileIntegrity.kext"></a>AppleMobileFileIntegrity.kext</h3><p>&#x2F;usr&#x2F;libexec&#x2F;amfid<br>Though AMFI’s inclusion was puzzling at first, the reasoning for it became painfully apparent<br>with the advent of System Integrity Protection (SIP), in 10.11</p><ul><li>Initialization<br>AMFI is a MACF policy kext</li><li>boot-args</li></ul><h3 id="The-MACF-Policy"><a href="#The-MACF-Policy" class="headerlink" title="The MACF Policy"></a>The MACF Policy</h3><ul><li>proc_check_cpumon (<code>*OS</code>)</li><li>proc_check_inherit_ipc_ports</li><li>proc_check_get_task</li><li>proc_check_map_anon (<code>*OS</code>)<br>In cases where MAP_JIT is indicated, therefore, AMFI checks for the dynamic-codesigning<br>entitlement.</li><li>file_check_mmap</li><li>proc_check_library_validation</li><li>proc_check_mprotect (<code>*OS</code>)</li><li>proc_check_run_cs_invalid (<code>*OS</code>)</li><li>vnode_check_exec (<code>*OS</code>)</li><li>vnode_check_signature<br>loadEntitlementsFromVnode<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm /System/Library/Extensions/AppleMobileFileIntegrity.kext/Contents/MacOS/AppleMobileFileIntegrity</span><br></pre></td></tr></table></figure></li><li>cred_label_update_execve</li></ul><h3 id="Exception-Handling-hooks-MacOS-12"><a href="#Exception-Handling-hooks-MacOS-12" class="headerlink" title="Exception Handling hooks (MacOS 12+)"></a>Exception Handling hooks (MacOS 12+)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm /System/Library/Extensions/AppleMobileFileIntegrity.kext/Contents/MacOS/AppleMobileFileIntegrity -Cj | grep amfi_exc | <span class="built_in">sort</span> -u</span><br></pre></td></tr></table></figure><p>Debugging is enabled under any of the follow conditions</p><ul><li>The target process is unsigned</li><li>System Integrity Protection (SIP) is disabled</li><li>The victim process possesses the get_task_allow entitlement</li><li>The victim process is not marked restricted</li><li>The handling process is entitled with com.apple.private.amfi.can-set-execption-ports</li></ul><ul><li>Kernel APIs</li></ul><h3 id="amfid"><a href="#amfid" class="headerlink" title="amfid"></a>amfid</h3><ul><li>Daemon-Kext communication<br>HOST_AMFID_PORT -&gt; mach_host_special_port_description</li><li>MIG subsystem 1000</li><li>1000: verify_code_directory<br>MacOS 10.12 &#x2F;usr&#x2F;lib&#x2F;libdz.dylib<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm /usr/lib/libdz.dylib -UCgj</span><br></pre></td></tr></table></figure>dz_check_policy_exec</li><li>1001: permit_unrestricted_debugging (<code>*OS</code>)</li><li>1001&#x2F;1002: check_lv_denial (MacOS)</li><li>1003: check_platform_identifiler_mismatch_override (MacOS 12 only)</li><li>1004: check_broken_signature_with_teamid_fatal (MacOS 12+)</li><li>1005: device_lock_state (<code>*OS</code> 10 only)</li></ul><h3 id="Provisoning-Profiles"><a href="#Provisoning-Profiles" class="headerlink" title="Provisoning Profiles"></a>Provisoning Profiles</h3><ul><li>A certificate, signing the developer’s public key</li><li>Restrictive entitlements<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dumping a sample embedded.mobileprovision</span></span><br><span class="line">openssl asn1parse -inform der -<span class="keyword">in</span> embedded.mobileprovision</span><br></pre></td></tr></table></figure></li><li>libmis.dylib<br>&#x2F;usr&#x2F;lib&#x2F;libmis.dylib<br>In MacOS, libmis is statically compiled into Apple’s private MobileDevice.framework, and<br>signature validation is provided directly by the Security.framework.</li><li>misagent<br>&#x2F;usr&#x2F;libexec&#x2F;misagent</li><li>Protocol<br>com.apple.misagent</li><li>online-auth-agent</li></ul><h3 id="The-AMFI-Trust-Caches"><a href="#The-AMFI-Trust-Caches" class="headerlink" title="The AMFI Trust Caches"></a>The AMFI Trust Caches</h3><h3 id="The-AMFI-User-Client"><a href="#The-AMFI-User-Client" class="headerlink" title="The AMFI User Client"></a>The AMFI User Client</h3><h3 id="Final-Notes-1"><a href="#Final-Notes-1" class="headerlink" title="Final Notes"></a>Final Notes</h3><h2 id="8-The-Sandbox"><a href="#8-The-Sandbox" class="headerlink" title="8. The Sandbox"></a>8. The Sandbox</h2><h3 id="The-Evolution-of-the-Sandbox"><a href="#The-Evolution-of-the-Sandbox" class="headerlink" title="The Evolution of the Sandbox"></a>The Evolution of the Sandbox</h3><p>Apple’s Sandbox was introduced as “SeatBelt” in MacOS 10.5 (“Leopard”) along side the MAC<br>framework, and provided the first full fledged implementation of a MACF policy.</p><h3 id="App-Sandbox-MacOS"><a href="#App-Sandbox-MacOS" class="headerlink" title="App Sandbox (MacOS)"></a>App Sandbox (MacOS)</h3><p>The AppSandbox is supported by the AppSandbox private framework, which itself relies on the<br>private AppContainer.framework.<br>&#x2F;usr&#x2F;libexec&#x2F;AppSandbox</p><ul><li>(semi)-Voluntary confinement<br>Sandboxing is enabled by the com.apple.security.app-sandbox entitlement, embedded in<br>the code signature by Apple.<br>libsystem_secinit -&gt; &#x2F;usr&#x2F;libexec&#x2F;secinitd</li><li>Diagnosing and controlling the App Sandbox</li></ul><h3 id="Mobile-Containers-OS"><a href="#Mobile-Containers-OS" class="headerlink" title="Mobile Containers (*OS)"></a>Mobile Containers (<code>*OS</code>)</h3><h3 id="Sandbox-Profiles"><a href="#Sandbox-Profiles" class="headerlink" title="Sandbox Profiles"></a>Sandbox Profiles</h3><p>Apple’s Sandbox is dynamic, in that it can generate and apply sandbox restrictions on the fly.</p><ul><li>Sandbox profile language<br>The sandbox profile language (SBPL) is a derivative of Scheme (which is itself a dialect of Lisp).<br>&#x2F;usr&#x2F;lib&#x2F;sandbox.dylib is staticlly compiled with TinySCHEME (apparently version 1.38 or higher).<br>&#x2F;System&#x2F;Library&#x2F;Sandbox&#x2F;Profiles<br>&#x2F;Library&#x2F;Sandbox&#x2F;Profiles<br>sandbox-exec -t trace_file -p “(version 1)” &#x2F;bin&#x2F;ls</li><li>Sandbox operations</li><li>Compiling profiles<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiling and dumping a profile using the open source sandbox-exec</span></span><br></pre></td></tr></table></figure></li><li>Extensions</li></ul><h3 id="User-mode-APIs"><a href="#User-mode-APIs" class="headerlink" title="User mode APIs"></a>User mode APIs</h3><ul><li>sandbox_check</li><li>sandbox_[un]suspend</li><li>sandbox tracing (460+)<br>sandbox_set_trace_path()<br>sandbox_vtrace_enable&#x2F;sandbox_vtrace_report</li><li>Inspection (460+)<br>sandbox_inspect_pid</li><li>User state items (570+)</li></ul><h3 id="mac-syscall"><a href="#mac-syscall" class="headerlink" title="mac_syscall"></a>mac_syscall</h3><p>__sandbox_ms</p><h3 id="Sandbox-kext"><a href="#Sandbox-kext" class="headerlink" title="Sandbox.kext"></a>Sandbox.kext</h3><ul><li>Flow<br>platform_start&#x2F;amfi_register_mac_policy&#x2F;mac_policy_register</li><li>hook_policy_init</li><li>hook_policy_initbsd</li><li>hook_policy_syscall</li></ul><h3 id="The-Sandbox-MACF-Hooks"><a href="#The-Sandbox-MACF-Hooks" class="headerlink" title="The Sandbox MACF Hooks"></a>The Sandbox MACF Hooks</h3><p>cred_sb_evaluate</p><ul><li>Handling process execution<br>cred_set_sandbox</li></ul><h3 id="Profile-Evaluation"><a href="#Profile-Evaluation" class="headerlink" title="Profile Evaluation"></a>Profile Evaluation</h3><h3 id="sandboxed-MacOS"><a href="#sandboxed-MacOS" class="headerlink" title="sandboxed (MacOS)"></a>sandboxed (MacOS)</h3><p>&#x2F;usr&#x2F;libexec&#x2F;sandboxed<br>&#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;com.apple.sandboxd.plist<br>HOST_SEATBELT_PORT</p><ul><li>Daemon-Kext communication</li></ul><h2 id="9-MacOS-System-Integrity-Protection-SIP"><a href="#9-MacOS-System-Integrity-Protection-SIP" class="headerlink" title="9. MacOS System Integrity Protection (SIP)"></a>9. MacOS System Integrity Protection (SIP)</h2><p>MacOS 10.11<br>The term “rootless”, therefore, likely means that root, while it still exists, can do less.<br>Internally, you can find many references to CSR, an acronym which stands for<br>Configurable Software Restrictions.</p><h3 id="Design-2"><a href="#Design-2" class="headerlink" title="Design"></a>Design</h3><p>The “restricted” objects, however, now get a level of protection which shields them even from root -<br>as files, they cannot be modified or removed. As processes, they cannot be debugged or tampered with.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl hostinfo | grep allows</span><br></pre></td></tr></table></figure><h3 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation"></a>Implementation</h3><p>Internally, the implementation of SIP boils down to a sandbox profile. This profile - appropriately<br>called the platform_profile - is effectively the default profile for nearly all applications in the<br>system. Even when applications are reportedly unsandboxed, this profile holds (with few execptions).<br>&#x2F;usr&#x2F;libexec&#x2F;rootless-init<br>&#x2F;System&#x2F;Library&#x2F;Sandbox&#x2F;rootless.conf</p><ul><li>Filesystem protections</li></ul><ul><li>The restricted flag</li><li>The com.apple.rootless extended attribute</li></ul><ul><li>Debugging protections<br>task_for_pid&#x2F;check_debug</li><li>Protecting launchd services</li><li>Entitlements</li><li>Enablement&#x2F;Disablement<br>The solution here is to use the recovery operating system. The recovery operating system boots from<br>a separate partion, and there is no programmatic way to force boot into it.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -d --entitlements - --xml /usr/bin/csrutil | plutil -p -</span><br></pre></td></tr></table></figure>The csrutil also possesses the special com.apple.private.iokit.nvram-csr entitlement.</li></ul><h3 id="APIs"><a href="#APIs" class="headerlink" title="APIs"></a>APIs</h3><p>csrctl (#483) [bsd&#x2F;kern&#x2F;kern_csr.c]<br>rootless_* APIs -&gt; libsystem_sandbox.dylib</p><h2 id="10-Privacy"><a href="#10-Privacy" class="headerlink" title="10. Privacy"></a>10. Privacy</h2><h3 id="Transparency-Consent-and-Control"><a href="#Transparency-Consent-and-Control" class="headerlink" title="Transparency, Consent and Control"></a>Transparency, Consent and Control</h3><ul><li>The TCC daemons(s)<br>Apply employs a dedicated daemon - tccd - to handle potentially sensitive operations.<br>MacOS is a multi-user system, so usually you can find tccd runs in 2+ instances, one for each logged<br>on user, and another as uid 0, with an argument of “system”. The per-user instances are started from<br>&#x2F;System&#x2F;Library&#x2F;LaunchAgents, and the system-wide from &#x2F;System&#x2F;Library&#x2F;LaunchDaemons.</li><li>Protected Information<br>kTCCService</li><li>The TCC Database(s)<br>[$HOME&#x2F;Library&#x2F;Application Support&#x2F;com.apple.TCC&#x2F;tcc.db]<br>[&#x2F;Library&#x2F;Application Support&#x2F;com.apple.TCC&#x2F;tcc.db]</li><li>Prompting for access<br>On MacOS, this is done by posting a Mach message to the com.apple.notificationcenterui,<br>which eventually brings up the UserNotificationCenter.app (in &#x2F;System&#x2F;Library&#x2F;CoreServices).</li><li>XPC API<br>The MacOS daemons register the com.apple.tccd and com.apple.tccd.system Mach XPC ports (respectively),<br>over which they provide service to clients.</li><li>TCCAccess APIs<br>private TCC.framework<br>Apple provides a vert basic tccutil(1) as part of MacOS, which is even documented in its own manual page,<br>but only supports a “reset” functionality.</li><li>Entitlements</li><li>Debugging Options<br>&#x2F;var&#x2F;db&#x2F;.debug_tccdsync</li></ul><h3 id="Unique-Device-Identifiers"><a href="#Unique-Device-Identifiers" class="headerlink" title="Unique Device Identifiers"></a>Unique Device Identifiers</h3><h3 id="Differential-Privacy-MacOS-12-x2F-iOS-10"><a href="#Differential-Privacy-MacOS-12-x2F-iOS-10" class="headerlink" title="Differential Privacy (MacOS 12&#x2F;iOS 10)"></a>Differential Privacy (MacOS 12&#x2F;iOS 10)</h3><ul><li>Implementation<br>private DifferentialPrivacy.framework<br>&#x2F;usr&#x2F;libexec&#x2F;dprivacyd<br>Surprisingly, the framework also contains a hidden dprivacytool(!).<br>The daemon registers the com.apple.dprivacyd XPC service, and maintains a database at<br>&#x2F;var&#x2F;db&#x2F;DifferentialPrivacy&#x2F;.</li></ul><h2 id="11-Data-Protection"><a href="#11-Data-Protection" class="headerlink" title="11. Data Protection"></a>11. Data Protection</h2><p>For MacOS, Apple provides FileVault 2 as of 10.7, as a “Full Disk Encryption” (FPD) solution.<br>More accurately, this is a special case of Volume-Level Encryption, which enables booting the<br>system and provides access to data only when an authorized user’s password is validated. For iOS,<br>granularity is even finder, through the use of File-Level Encryption.</p><h3 id="Volume-level-Encryption-MacOS"><a href="#Volume-level-Encryption-MacOS" class="headerlink" title="Volume-level Encryption (MacOS)"></a>Volume-level Encryption (MacOS)</h3><p>FileVault fdesetup(8)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo fdesetup list</span><br><span class="line">diskutil list</span><br><span class="line">diskutil corestorage list</span><br></pre></td></tr></table></figure><ul><li>Mounting Encrypted Volumes<br>When an encrypted volume is detected, the system brings up a prompt for the password via the<br>SecurityAgent using its DiskUnlock.bundle.</li><li>corestorage daemons<br>corestoraged<br>&#x2F;usr&#x2F;libexec&#x2F;corestoreaged -&gt; com.apple.corestoreage.corestoraged<br>FDERecoveryAgent<br>corestoragehelperd</li><li>CSFDE* APIs<br>libCoreStorage.dylib and libcsfde.dylib</li></ul><h3 id="File-level-Encryption-OS"><a href="#File-level-Encryption-OS" class="headerlink" title="File-level Encryption (*OS)"></a>File-level Encryption (<code>*OS</code>)</h3><ul><li>com.apple.system.cprotect and protection classes<br>[bsd&#x2F;hfs&#x2F;hfs_cprotect.h]</li><li>Effaceable Storage</li><li>Device Lock&#x2F;Unlock</li></ul><h3 id="mobile-obliterator"><a href="#mobile-obliterator" class="headerlink" title="mobile_obliterator"></a>mobile_obliterator</h3><h3 id="KeyBags"><a href="#KeyBags" class="headerlink" title="KeyBags"></a>KeyBags</h3><ul><li>KeyBagd<br>The &#x2F;usr&#x2F;libexec&#x2F;keybagd is a <code>*OS</code> daemon which handles the keystore on the device.</li><li>MobileKeyBag.framework</li></ul><h3 id="The-AppleKeyStore-kext"><a href="#The-AppleKeyStore-kext" class="headerlink" title="The AppleKeyStore.kext"></a>The AppleKeyStore.kext</h3><ul><li>Entitlements</li><li>Hardware backing</li></ul><h3 id="Keychains"><a href="#Keychains" class="headerlink" title="Keychains"></a>Keychains</h3><ul><li>System Keychain<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /Library/Keychains</span><br><span class="line"><span class="built_in">ls</span> -l /System/Library/Keychains</span><br></pre></td></tr></table></figure></li><li>The Login keychain<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l ~/Library/Keychains/ | <span class="built_in">head</span> -n4</span><br><span class="line"><span class="built_in">ls</span> -l ~/Library/Keychains/6E002C5E-E99D-5CD3-9532-BEEB74F3E778</span><br></pre></td></tr></table></figure></li><li>The iOS Keychain<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -F /private/var/Keychains</span><br></pre></td></tr></table></figure></li><li>Programmatic API<br>[Security&#x2F;SecKeyChain.h]<br>&#x2F;usr&#x2F;libexec&#x2F;securityd<br>[OSX&#x2F;sec&#x2F;ipc&#x2F;securityd_client.h]</li><li>KeyChain structure<br>[OSX&#x2F;sec&#x2F;Security&#x2F;SecItemConstants.c]<br>[OSX&#x2F;libsecurity_keychain&#x2F;lib&#x2F;SecItemPriv.h]</li></ul><h3 id="Final-Notes-2"><a href="#Final-Notes-2" class="headerlink" title="Final Notes"></a>Final Notes</h3><h1 id="Part-II-Vulnerabilities-and-Exploitation"><a href="#Part-II-Vulnerabilities-and-Exploitation" class="headerlink" title="Part II: Vulnerabilities and Exploitation"></a>Part II: Vulnerabilities and Exploitation</h1><h2 id="12-MacOS-Vulnerabilities"><a href="#12-MacOS-Vulnerabilities" class="headerlink" title="12. MacOS Vulnerabilities"></a>12. MacOS Vulnerabilities</h2><p>OSX</p><h3 id="10-1-The-ntpd-remote-root-CVE-2014-9295"><a href="#10-1-The-ntpd-remote-root-CVE-2014-9295" class="headerlink" title="10.1 The ntpd remote root (CVE-2014-9295)"></a>10.1 The ntpd remote root (CVE-2014-9295)</h3><h3 id="10-2-The-rootpipe-privilege-escalation-CVE-2015-1130"><a href="#10-2-The-rootpipe-privilege-escalation-CVE-2015-1130" class="headerlink" title="10.2 The rootpipe privilege escalation (CVE-2015-1130)"></a>10.2 The rootpipe privilege escalation (CVE-2015-1130)</h3><h3 id="10-3-Racing-Kextd-CVE-2015-3708"><a href="#10-3-Racing-Kextd-CVE-2015-3708" class="headerlink" title="10.3 Racing Kextd (CVE-2015-3708)"></a>10.3 Racing Kextd (CVE-2015-3708)</h3><h3 id="10-4-DYLD-PRINT-TO-FILE-privilege-escalation-CVE-2015-3760"><a href="#10-4-DYLD-PRINT-TO-FILE-privilege-escalation-CVE-2015-3760" class="headerlink" title="10.4 DYLD_PRINT_TO_FILE privilege escalation (CVE-2015-3760)"></a>10.4 DYLD_PRINT_TO_FILE privilege escalation (CVE-2015-3760)</h3><h3 id="10-5-DYLD-ROOT-PATH-privilege-escalation"><a href="#10-5-DYLD-ROOT-PATH-privilege-escalation" class="headerlink" title="10.5 DYLD_ROOT_PATH privilege escalation"></a>10.5 DYLD_ROOT_PATH privilege escalation</h3><h3 id="11-0-tpwn-privilege-escalation-and-x2F-or-SIP-neuering"><a href="#11-0-tpwn-privilege-escalation-and-x2F-or-SIP-neuering" class="headerlink" title="11.0 tpwn privilege escalation and&#x2F;or SIP neuering"></a>11.0 tpwn privilege escalation and&#x2F;or SIP neuering</h3><h3 id="11-3-“Mach-Race”-local-priilege-escalaion-CVE-2016-1757"><a href="#11-3-“Mach-Race”-local-priilege-escalaion-CVE-2016-1757" class="headerlink" title="11.3 “Mach Race” local priilege escalaion (CVE-2016-1757)"></a>11.3 “Mach Race” local priilege escalaion (CVE-2016-1757)</h3><h3 id="11-4-LokiHardt’s-Trifecta-CVE-2016-1796-1797-1806"><a href="#11-4-LokiHardt’s-Trifecta-CVE-2016-1796-1797-1806" class="headerlink" title="11.4 LokiHardt’s Trifecta (CVE-2016-1796, 1797, 1806)"></a>11.4 LokiHardt’s Trifecta (CVE-2016-1796, 1797, 1806)</h3><h2 id="13-Jailbreaking"><a href="#13-Jailbreaking" class="headerlink" title="13. Jailbreaking"></a>13. Jailbreaking</h2><h3 id="Mythbusting"><a href="#Mythbusting" class="headerlink" title="Mythbusting"></a>Mythbusting</h3><ul><li>Terminology</li></ul><h3 id="The-jailbreaking-process"><a href="#The-jailbreaking-process" class="headerlink" title="The jailbreaking process"></a>The jailbreaking process</h3><h3 id="Kernel-Patches"><a href="#Kernel-Patches" class="headerlink" title="Kernel Patches"></a>Kernel Patches</h3><p>setreuid</p><h3 id="Kernel-Patch-Protection"><a href="#Kernel-Patch-Protection" class="headerlink" title="Kernel Patch Protection"></a>Kernel Patch Protection</h3><h3 id="Evolution-of-iOS-Jailbreaks"><a href="#Evolution-of-iOS-Jailbreaks" class="headerlink" title="Evolution of iOS Jailbreaks"></a>Evolution of iOS Jailbreaks</h3><h2 id="14-Evasi0n"><a href="#14-Evasi0n" class="headerlink" title="14. Evasi0n"></a>14. Evasi0n</h2><h3 id="The-Loader"><a href="#The-Loader" class="headerlink" title="The Loader"></a>The Loader</h3><p>…….</p><h2 id="Appendix-MacOS-Hardening-Guide"><a href="#Appendix-MacOS-Hardening-Guide" class="headerlink" title="Appendix: MacOS Hardening Guide"></a>Appendix: MacOS Hardening Guide</h2><h3 id="Patching-Patching-and-Patching"><a href="#Patching-Patching-and-Patching" class="headerlink" title="Patching, Patching and Patching"></a>Patching, Patching and Patching</h3><h3 id="Logging-and-Auditing"><a href="#Logging-and-Auditing" class="headerlink" title="Logging and Auditing"></a>Logging and Auditing</h3><ul><li>syslog&#x2F;acl</li><li>log (MacOS 12)</li><li>Enabling Auditing</li></ul><h3 id="User-level-Security"><a href="#User-level-Security" class="headerlink" title="User-level Security"></a>User-level Security</h3><ul><li>Login banner</li><li>Password Hints</li><li>Login&#x2F;Logout hooks</li><li>Password Policies</li><li>Screen Saver locking</li><li>disable su</li><li>Harden sudo</li></ul>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入解析MacOS和iOS 卷二 笔记</title>
      <link href="/2023/06/27/macos-ios-internals-vol-two/"/>
      <url>/2023/06/27/macos-ios-internals-vol-two/</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS-and-iOS-Internals-Volume-II-Kernel-Mode"><a href="#MacOS-and-iOS-Internals-Volume-II-Kernel-Mode" class="headerlink" title="MacOS and iOS Internals, Volume II : Kernel Mode"></a>MacOS and iOS Internals, Volume II : Kernel Mode</h1><h2 id="chapter-1"><a href="#chapter-1" class="headerlink" title="chapter 1"></a>chapter 1</h2><p>Welcome to the Machine: Hardware</p><h3 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h3><p>Mac Models Numbers and code names</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl hw.model</span><br><span class="line">ioreg -l -f | grep IOPlatformExpertDevice</span><br></pre></td></tr></table></figure><p>Processors<br>“Rosetta”<br>Processor Code Names<br>“A”-series chips<br>“n+n” “p-cores” “e-cores”</p><h3 id="Ports"><a href="#Ports" class="headerlink" title="Ports"></a>Ports</h3><p>Serial ports<br>Firewire -&gt; IEEE1394 fwkdp(1)<br>ThunderBolt -&gt; Intel’s ThunderBolt standard<br>-&gt; MiniDisplay Port and PCIe<br>USB usbkdp(1)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ioreg -p IOUSB</span><br><span class="line">system_profiler SPUSBDataType</span><br></pre></td></tr></table></figure><p>USB Restricted Mode</p><h3 id="iDevice-Connectors"><a href="#iDevice-Connectors" class="headerlink" title="iDevice Connectors"></a>iDevice Connectors</h3><p>30-pin<br>Lightning</p><h3 id="NVRAM"><a href="#NVRAM" class="headerlink" title="NVRAM"></a>NVRAM</h3><p>MacOS: GUID Namespaces<br><code>*OS</code>: the nvrm namespace<br>MacOS: THe System Management BIOS<br>-&gt; Intel architectures<br><code>*OS</code>: SysCfg</p><h3 id="The-Device-Tree"><a href="#The-Device-Tree" class="headerlink" title="The Device Tree"></a>The Device Tree</h3><h3 id="Dedicated-Processors"><a href="#Dedicated-Processors" class="headerlink" title="Dedicated Processors"></a>Dedicated Processors</h3><p>Common Code: RTKit<br>The <code>*OS</code> Side: RTBuddy<br>AOP&#x2F;AGX</p><h2 id="chapter-2"><a href="#chapter-2" class="headerlink" title="chapter 2"></a>chapter 2</h2><p>Use the source, Luke: The XNU Codebase</p><h3 id="The-XNU-Source"><a href="#The-XNU-Source" class="headerlink" title="The XNU Source"></a>The XNU Source</h3><p>Kernel Address SANitizer (KASAN)</p><h3 id="Compiling-the-kernel"><a href="#Compiling-the-kernel" class="headerlink" title="Compiling the kernel"></a>Compiling the kernel</h3><p>AvailabilityVersions<br>DTrace<br>libplatform<br>libdispatch (firehose)<br>Early during startup, this structure is saved by the Platform Expert, and PE* APIs -<br>specifically, PE_parse_boot_argn or PE_parse_boot_arg_str - can be used to query the<br>string and retrieve numeric or string arguments.</p><h3 id="Kernel-Debugging"><a href="#Kernel-Debugging" class="headerlink" title="Kernel Debugging"></a>Kernel Debugging</h3><p>Kernel Debug Protocol (kdp)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Well-known UDP port, debugger side.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">FIXME:</span> This is what the 68K guys use, but beats me how they chose it...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KDP_REMOTE_PORT         41139   <span class="comment">/* pick one and register it */</span></span></span><br></pre></td></tr></table></figure><h3 id="Don’t-panic"><a href="#Don’t-panic" class="headerlink" title="Don’t panic"></a>Don’t panic</h3><p>PESavePanicInfo</p><h4 id="The-Panic-report"><a href="#The-Panic-report" class="headerlink" title="The Panic report"></a>The Panic report</h4><p>&#x2F;Library&#x2F;Logs&#x2F;DiagnosticReports[&#x2F;Retired]&#x2F;Kernel_YYYY-MM-DD-HHMMSS_Hostname.panic</p><h4 id="Kernel-Core-Dumps"><a href="#Kernel-Core-Dumps" class="headerlink" title="Kernel Core Dumps"></a>Kernel Core Dumps</h4><p>kern_dump() kdumpd(8)</p><h4 id="Coredump-helpers"><a href="#Coredump-helpers" class="headerlink" title="Coredump helpers"></a>Coredump helpers</h4><p>kern_register_coredump_helper</p><h2 id="chapter-3"><a href="#chapter-3" class="headerlink" title="chapter 3"></a>chapter 3</h2><p>EXTEND: Kernel Extensions<br>XNU is no different in this regard: What in Windows are drivers and in Linux kernel modules are in Darwin kernel extensions. But similarities end very quickly, as the<br>architectureal support and design of the extensions is quite different.<br>kextload&#x2F;kextutil&#x2F;kext_logging&#x2F;kextd&#x2F;kextlibs</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kextstat | grep com.apple.kpi</span><br></pre></td></tr></table></figure><h3 id="The-Kernel-Programming-Interface"><a href="#The-Kernel-Programming-Interface" class="headerlink" title="The Kernel Programming Interface"></a>The Kernel Programming Interface</h3><p>MACFramework</p><h3 id="The-kernelcache"><a href="#The-kernelcache" class="headerlink" title="The kernelcache"></a>The kernelcache</h3><p>&#x2F;System&#x2F;Library&#x2F;PrelinkedKernels<br>Kernelcache structure<br>__PRELINK_INFO.__info</p><h3 id="Kext-Loading-The-user-mode-perspective"><a href="#Kext-Loading-The-user-mode-perspective" class="headerlink" title="Kext Loading: The user mode perspective"></a>Kext Loading: The user mode perspective</h3><p>Kext Security Requirements<br>&#x2F;System&#x2F;Library&#x2F;Extensions<br>&#x2F;Library&#x2F;Extensions<br>Kext code signing</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy -header <span class="string">&quot;select * from settings&quot;</span></span><br><span class="line">sqlite3 /var/db/SystemPolicyConfiguration/KextPolicy -header <span class="string">&quot;select * from kext_policy&quot;</span></span><br></pre></td></tr></table></figure><p>Kextd HOST_KEXTD_PORT<br>MacOS 13: logkextloaded<br>MacOS 14: BridgeOS kext_audit<br>The OSKext* APIs<br>kext_request<br>Multikexts</p><h3 id="Kext-Loading-The-kernel-perspective"><a href="#Kext-Loading-The-kernel-perspective" class="headerlink" title="Kext Loading: The kernel perspective"></a>Kext Loading: The kernel perspective</h3><p>vm_map_copyout<br>OSKext::load<br>Darwin 13 -&gt; mac_kext_check_load<br>kxld Kernel extension loader<br>-&gt; kxld_link_file()<br>Unloading a kext</p><h3 id="kext-metadata-management"><a href="#kext-metadata-management" class="headerlink" title="kext metadata management"></a>kext metadata management</h3><h3 id="MacOS-15-System-Extensions-and-DriverKit"><a href="#MacOS-15-System-Extensions-and-DriverKit" class="headerlink" title="MacOS 15: System Extensions and DriverKit"></a>MacOS 15: System Extensions and DriverKit</h3><p>Darwin 19, however, provides an alternative - allowing developers to create,<br>what are in effect, user-mode extensions and drivers, through two new frameworks</p><ul><li>SystemExtensions and DriverKit.<br>The idea is not unlike that of Windows’ User Mode Driver Framewrok(UMDF), in which<br>kernel code calls out to some user process, in order to perform some operations.<br>NECP(Network Exetnsions model)<br>NKE(Network Kernel Extensions)<br>Darwin’s port of FUSE(Filesystem in USEr mode)<br>Apple classifies Driver Extensions as those extensions which seek to replace(now legacy)<br>IOKit drivers, and System Extensions for all other traditions in-kernel functionlity,<br>such as Network Extensions (for packet filtering, tunneling, etc), and Endpoint Security Extensions.<br>System Extensions -&gt; sysextd<br>Driver Extensions<br>As with IOKit, developers can use C++, but unlike it, this is a full C++17 compatible runtime, rather than IOKit’s restricted C++.</li></ul><h2 id="chapter-4"><a href="#chapter-4" class="headerlink" title="chapter 4"></a>chapter 4</h2><p>Some Assembly Required: Kernel Primitives &amp; Paradigms</p><h3 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h3><p>Queues (Mach)* osfmk&#x2F;kern&#x2F;queue.h<br>struct queue_entry<br>Linked Lists &amp; Queues (BSD) bsd&#x2F;sys&#x2F;queue.h<br>Tree data structures<br>splay trees(slef-adjusting binary search)<br>Red-Black trees</p><h3 id="Concurrent-resource-access"><a href="#Concurrent-resource-access" class="headerlink" title="Concurrent resource access"></a>Concurrent resource access</h3><p>Atomic operations<br>hwlocks<br>Spinlocks -&gt; busy wait<br>Read-Write Locks<br>Mutex locks<br>Lock Groups<br>Lock Debugging&#x2F;Tracing -&gt; &#x2F;dev&#x2F;lockstat (legacy) or lockstat provider</p><h4 id="Per-CPU-data"><a href="#Per-CPU-data" class="headerlink" title="Per-CPU data"></a>Per-CPU data</h4><p>osfmk&#x2F;machine&#x2F;cpu_data.h</p><h3 id="Processor-execution-modes"><a href="#Processor-execution-modes" class="headerlink" title="Processor execution modes"></a>Processor execution modes</h3><p>Intel Ring0&#x2F;Ring3<br>ARM64 Exception Levels<br>EL0 is user mode, EL1 is kernel mode, EL2 is reserved for the hypervisor (if any),<br>and EL3 for secure monitor (if any).</p><h3 id="Mode-Traversal"><a href="#Mode-Traversal" class="headerlink" title="Mode Traversal"></a>Mode Traversal</h3><p>Voluntary Traversals<br>Involuntary traversals<br>Intel: SYSENTER(Vol)<br>Intel: IDT(Invol)<br>ARM: Exception Vectors</p><h4 id="Returning-to-user-mode"><a href="#Returning-to-user-mode" class="headerlink" title="Returning to user mode"></a>Returning to user mode</h4><p>thread_exception_return()</p><h4 id="Context-Switching"><a href="#Context-Switching" class="headerlink" title="Context Switching"></a>Context Switching</h4><p>machine_switch_context()<br>osfmk&#x2F;arch&#x2F;cswitch.s<br>kernel_bootstrap_thread<br>osfmk&#x2F;kern&#x2F;startup.c</p><h4 id="Accessing-user-mode-memory"><a href="#Accessing-user-mode-memory" class="headerlink" title="Accessing user mode memory"></a>Accessing user mode memory</h4><p>Unlike kernel memory, which is normally wired(resident), user-space memory<br>may be swappwd. If that is the case, access will trigger a page fault. [bcopy]<br>copyin* and copyout<br>vm_fault()</p><h4 id="Memory-Access-Protections"><a href="#Memory-Access-Protections" class="headerlink" title="Memory Access Protections"></a>Memory Access Protections</h4><p>Intel architectures define Secure Mode Access Prevention (SMAP), and ARM(v8.1 and later)<br>architectures similary have Privileged Access Never (PAN).</p><h3 id="Interrupt-Handling"><a href="#Interrupt-Handling" class="headerlink" title="Interrupt Handling"></a>Interrupt Handling</h3><p>x86_64 uses the Advanced Programmer Interrupt Controller (APIC), which (as of Nehalem) is known as x2APIC.<br>ARM recignizes two types of interrupts - the regular interrupt requests (IRQ) and “fast<br>interrupts requests” (FIQ).</p><ul><li>Enabling&#x2F;disabling interrupts -&gt; Asynchronous Software Traps</li><li>Machine Level handling of interrupts<br>x86_64 hndl_allintrs -&gt; osfmk&#x2F;x86_64&#x2F;idt64.s<br>arm exception vectors -&gt; <code>[fleh/sleh]_[irq/fiq]</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo powermetrics --samplers interrupts</span><br></pre></td></tr></table></figure></li><li>XNU’s Handling of Interrupts<br>Intel -&gt; interrupt() osfmk&#x2F;i386&#x2F;trap.c<br>ARM -&gt; fleh_[irq&#x2F;fiq] osfmk&#x2F;arm[64]&#x2F;locore.s<br>  -&gt; sleh_[irq&#x2F;fiq] osfmk&#x2F;arm64&#x2F;sleh.c</li></ul><h3 id="System-call-personalities"><a href="#System-call-personalities" class="headerlink" title="System call personalities"></a>System call personalities</h3><ul><li>The BSD Personality<br>Auditing&#x2F;KDebug&#x2F;Arguments&#x2F;Noreturn</li><li>The Mach Personality</li><li>Machine Sepcific Syscalls<br>platform_syscall</li><li>Hypervisor support (MacOS)</li></ul><h2 id="chapter-5"><a href="#chapter-5" class="headerlink" title="chapter 5"></a>chapter 5</h2><p>Alone in the Dark: The Boot Process</p><h3 id="MacOS-EFI"><a href="#MacOS-EFI" class="headerlink" title="MacOS: EFI"></a>MacOS: EFI</h3><p>Basic Concepts<br>Unlike BIOS, EFI is in some respects a mini operating system.</p><ul><li>The Boot Services</li><li>The Runtime Services<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm /System/Library/Extensions/AppleEFIRuntime.kext/Contents/MacOS/AppleEFIRuntime -UCgj</span><br></pre></td></tr></table></figure>EFI Protocols<br>-&gt; Clover bootloader<br>The EFI System Partition<br>Software capsules<br>EFI Binaries<br>As Microsoft owned the dominat platform at the time, it made sense to choose<br>Windows Portable Executable (PE) as the binary format.<br>MacOS’s boot.efi<br>MacOS’s boot.efi is rare biard - a PE32+ binary among all the other Mach-Os.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file /usr/standalone/i386/boot.efi</span><br></pre></td></tr></table></figure>Blessed Art Thou<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bless --info --verbose <span class="comment"># only Intel Arch, not for M1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="OS-iBoot"><a href="#OS-iBoot" class="headerlink" title="*OS: iBoot"></a><code>*OS</code>: iBoot</h3><h3 id="MacBook-Pro-2018-and-later-iBoot-EFI"><a href="#MacBook-Pro-2018-and-later-iBoot-EFI" class="headerlink" title="MacBook Pro (2018) and later: iBoot + EFI"></a>MacBook Pro (2018) and later: iBoot + EFI</h3><p>Secure Boot</p><h3 id="Kernel-Boot-Process"><a href="#Kernel-Boot-Process" class="headerlink" title="Kernel Boot Process"></a>Kernel Boot Process</h3><p>x86_64: <code>_start -&gt; _vstart</code><br>ARM64: <code>_start -&gt; start_first_cpu</code><br>i386_init() and arm_init()<br>kernel_early_bootstrap() -&gt; osfmk&#x2F;kern&#x2F;startup.c<br>machine_startup&#x2F;kernel_bootstrap<br>kernel_bootstrap_log</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// osfmk/arm/start.s</span></span><br><span class="line"><span class="built_in">LOAD_ADDR</span>(lr, arm_init)</span><br><span class="line"><span class="comment">// osfmk/arm/arm_init.c</span></span><br><span class="line"><span class="function">__startup_func</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">arm_init</span><span class="params">(boot_args *args)</span></span></span><br><span class="line"><span class="function"><span class="comment">// osfmk/kern/startup.c</span></span></span><br><span class="line"><span class="function">__startup_func</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kernel_startup_bootstrap</span><span class="params">(<span class="type">void</span>)</span></span></span><br></pre></td></tr></table></figure><p>kernel_bootstrap_thread()<br>-&gt; idle_thread_create -&gt; kernel_thread_create<br>-&gt; idle_thread -&gt; processor_idle -&gt; thread_run<br>-&gt; thread_invoke -&gt; thread_dispatch(self, thread)&#x2F;call_continuation</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">thread_run</span><span class="params">(<span class="type">thread_t</span> self, <span class="type">thread_continue_t</span> continuation, <span class="type">void</span> *parameter, <span class="type">thread_t</span> new_thread)</span></span>;</span><br><span class="line"><span class="built_in">thread_run</span>(processor-&gt;idle_thread,</span><br><span class="line">    idle_thread, <span class="literal">NULL</span>, new_thread);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LOAD_ADDR(lr, arm_init_cpu)</span></span><br><span class="line"><span class="built_in">slave_main</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// -&gt; </span></span><br><span class="line"><span class="function">processor_start_thread </span></span><br><span class="line"><span class="function"><span class="title">thread_block</span><span class="params">(idle_thread)</span></span>;</span><br><span class="line">-&gt; processor_start</span><br></pre></td></tr></table></figure><h4 id="SMP-Considerations"><a href="#SMP-Considerations" class="headerlink" title="SMP Considerations"></a>SMP Considerations</h4><p>man hostinfo<br>processor_start -&gt; cpu_start -&gt; slave_main<br>x86_64 i386_init_slave<a href="">_fast</a><br>ARM64 arm_init_cpu()</p><h3 id="Kernel-Threads"><a href="#Kernel-Threads" class="headerlink" title="Kernel Threads"></a>Kernel Threads</h3><p>kernel_task -&gt; pid 0</p><h4 id="Kernel-Shutdown"><a href="#Kernel-Shutdown" class="headerlink" title="Kernel Shutdown"></a>Kernel Shutdown</h4><p>reboot&#x2F;halt&#x2F;shutdown mac_system_check_reboot<br>reboot_kernel -&gt; host_reboot -&gt; halt_all_cpus&#x2F;PEHaltRestart</p><h2 id="chapter-6"><a href="#chapter-6" class="headerlink" title="chapter 6"></a>chapter 6</h2><p>BS’’D: The BSD Layer</p><h3 id="A-Tour-of-BSD"><a href="#A-Tour-of-BSD" class="headerlink" title="A Tour of BSD"></a>A Tour of BSD</h3><p>NeXT wanted to conform to it as well, which required adding another layer,<br>on top of Mach, for the POSIX compatible APIs. Rather than implement something<br>from scratch, the choice was made to adopt FreeBSD implementation.<br>FreeBSD 6.0<br>bsd_init()&#x2F;bsd_init_kprintf()<br>throttle&#x2F;kmeminit&#x2F;dev_kmen_init<br>kauth_init&#x2F;procinit&#x2F;tty_init&#x2F;mac_policy_initbsd<br>ulock_initialize<br>audit_init<br>aio_init&#x2F;pipeinit&#x2F;sys v ipc locks<br>pthread_init&#x2F;select_waitq_init<br>Memorystatus<br>sysctl_mib_init<br>bsd_autoconf<br>dtrace_postinit<br>network inits<br>root filesystem mounted<br>siginit</p><h4 id="Launching-launchd-8"><a href="#Launching-launchd-8" class="headerlink" title="Launching launchd(8)"></a>Launching launchd(8)</h4><p>bsd_utaskbootstrap<br>cloneproc()<br>bsdinit_task()</p><h3 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h3><p>Mach defines tasks, but the BSD layer provides the highter level constructs<br>that are processes.</p><ul><li>The struct proc<br>Process Control Block(PCB)</li><li>The kernproc</li><li>Process lists<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">proclist</span> allproc;         <span class="comment">/* List of all processes. */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">struct</span> <span class="title class_">proclist</span> zombproc;        <span class="comment">/* List of zombie processes. */</span></span><br></pre></td></tr></table></figure></li><li>Process data in user mode<br>sysctl kern.proc<br>proc_info</li></ul><h3 id="U-Threads"><a href="#U-Threads" class="headerlink" title="(U)Threads"></a>(U)Threads</h3><p>The struct uthread [bsd&#x2F;sys&#x2F;user.h]</p><ul><li>Syscall information</li><li>Exception information</li><li>Continuation support select&#x2F;kevent&#x2F;wait</li><li>The wait channel</li><li>Pointers</li><li>Flags UT_* flags</li><li>Signal handling information</li><li>VFS context</li><li>Audit record<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_AUDIT</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">kaudit_record</span>    *uu_ar;                 <span class="comment">/* audit record */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li>Throttling info</li><li>DTrace information</li><li>Document tombstone information</li><li>Exit reason</li><li>Thread name</li><li>Thread list connectors<br>Note that BSD level threads have no identifier which can be globally visible in user mode.<br>There is the underlying Mach thread’s ID, but there is no BSD style API to retrieve it.</li></ul><h4 id="Pthread-shims-and-callbacks-Darwin-13"><a href="#Pthread-shims-and-callbacks-Darwin-13" class="headerlink" title="Pthread shims and callbacks (Darwin 13)"></a>Pthread shims and callbacks (Darwin 13)</h4><p>pthread_kext_register pthread.kext</p><h4 id="Work-Queue-threads-the-kernel-side-portion-of-GCD"><a href="#Work-Queue-threads-the-kernel-side-portion-of-GCD" class="headerlink" title="Work Queue threads (the kernel-side portion of GCD)"></a>Work Queue threads (the kernel-side portion of GCD)</h4><p>in-kernel thread-pool<br>workq_open()&#x2F;workq_kernreturn() bsd&#x2F;pthread&#x2F;pthread_workqueue.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">workqueue</span></span><br></pre></td></tr></table></figure><p>Parked thread block on workq_unpark_continue(), a continuation which allows quick resumption.<br>workq_reqthreads -&gt; workq_pop_idle_thread<br>workq_add_new_idle_thread -&gt; workq_create_threadstack&#x2F;thread_create_workq_waiting</p><h4 id="BSD-sleep-nad-wakeup"><a href="#BSD-sleep-nad-wakeup" class="headerlink" title="BSD *sleep nad wakeup*"></a>BSD <code>*sleep</code> nad <code>wakeup*</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span>      <span class="title">msleep</span><span class="params">(<span class="type">void</span> *chan, <span class="type">lck_mtx_t</span> *mtx, <span class="type">int</span> pri, <span class="type">const</span> <span class="type">char</span> *wmesg, <span class="keyword">struct</span> timespec * ts )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span>      <span class="title">msleep0</span><span class="params">(<span class="type">void</span> *chan, <span class="type">lck_mtx_t</span> *mtx, <span class="type">int</span> pri, <span class="type">const</span> <span class="type">char</span> *wmesg, <span class="type">int</span> timo, <span class="type">int</span> (*continuation)(<span class="type">int</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span>     <span class="title">wakeup</span><span class="params">(<span class="type">void</span> *chan)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">wakeup_one</span><span class="params">(<span class="type">caddr_t</span> chan)</span></span>;</span><br></pre></td></tr></table></figure><p>All the sleep variants require a kernel address, referred to as a wait channel,<br>which is used as a token to wake up the sleepers.<br>The chan and wmesg arguments are stored on the uuthread’s uu_wchan and uu_wmesg.</p><h3 id="Process-Lifecycle"><a href="#Process-Lifecycle" class="headerlink" title="Process Lifecycle"></a>Process Lifecycle</h3><p>fork&#x2F;vfork&#x2F;posix_spawn<br><code>[__mac_]execve/posix_spawn</code></p><ul><li>Image Activation: exec_activate_image()</li><li>Mach-O Image Activator: exec_mach_imgact</li><li>Loading Mach-O: load_machfile()<br>pmap_create&#x2F;vm_map_create</li><li>Parsing Mach-O: parse_machfile()</li><li>Post Load: exec_mach_imgact()</li></ul><h4 id="Process-Termination"><a href="#Process-Termination" class="headerlink" title="Process Termination"></a>Process Termination</h4><p>Exit reasons -&gt; exit_with_reason (Darwin 16)<br>os_reason bsd&#x2F;sys&#x2F;reason.h</p><h4 id="Core-dumps"><a href="#Core-dumps" class="headerlink" title="Core dumps"></a>Core dumps</h4><p>kern.coredump</p><h4 id="Crash-Reports"><a href="#Crash-Reports" class="headerlink" title="Crash Reports"></a>Crash Reports</h4><p>EXC_CRASH Mach exception<br>task_exception_notify [osfmk&#x2F;kern&#x2F;exception.c]<br>-&gt; exception_triage -&gt; exception_triage_thread<br>-&gt; exception_deliver</p><ul><li>Corpses</li></ul><h3 id="File-Descriptors"><a href="#File-Descriptors" class="headerlink" title="File Descriptors"></a>File Descriptors</h3><ul><li>The struct filedesc [bsd&#x2F;sys&#x2F;filedecs.h]</li><li>The struct fileproc<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__options_decl(<span class="type">fileproc_flags_t</span>, <span class="type">uint16_t</span>, &#123;</span><br><span class="line">FP_NONE         = <span class="number">0</span>,</span><br><span class="line">FP_CLOEXEC      = <span class="number">0x01</span>,</span><br><span class="line">FP_CLOFORK      = <span class="number">0x02</span>,</span><br><span class="line">FP_INSELECT     = <span class="number">0x04</span>,</span><br><span class="line">FP_AIOISSUED    = <span class="number">0x08</span>,</span><br><span class="line">FP_SELCONFLICT  = <span class="number">0x10</span>,  <span class="comment">/* select conflict on an individual fp */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>The struct fileglob</li></ul><h4 id="File-Types"><a href="#File-Types" class="headerlink" title="File Types"></a>File Types</h4><ul><li>POSIX Shared Memory<br>shm_open&#x2F;mmap</li><li>KQueues<br>XNU supports dynamic kqueues, which are maintained at the filedec level in the fd_kqhash table.<br>struct knote [bsd&#x2F;sys&#x2F;event.h]</li><li>Pipes<br>struct pipe [bsd&#x2F;sys&#x2F;pipe.h]&#x2F;[bsd&#x2F;kern&#x2F;sys_pipe.c]<br>A pipe dies when its read end is closed, in which case the writer gets a SIGPIPE when attempting a write (unless suppressed).</li></ul><h3 id="File-I-x2F-O"><a href="#File-I-x2F-O" class="headerlink" title="File I&#x2F;O"></a>File I&#x2F;O</h3><p>open&#x2F;openat[_nocancel] -&gt; openat_internal [bsd&#x2F;vfs&#x2F;vfs_syscalls.c]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">openat</span><span class="params">(<span class="type">proc_t</span> p, <span class="keyword">struct</span> openat_args *uap, <span class="type">int32_t</span> *retval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__pthread_testcancel(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">openat_nocancel</span>(p, (<span class="keyword">struct</span> openat_nocancel_args *)uap, retval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read[_nocancel] -&gt; bsd&#x2F;kern&#x2F;sys_generic.c<br>The struct uio<br>User mode I&#x2F;O requests are standardized into struct uio, which represents the metadata<br>detailing an I&#x2F;O request.<br>uio_create&#x2F;uio_createwithbuffer<br>Handling uios<br>readv&#x2F;writev -&gt; iovec</p><h4 id="Asynchronous-I-x2F-O"><a href="#Asynchronous-I-x2F-O" class="headerlink" title="Asynchronous I&#x2F;O"></a>Asynchronous I&#x2F;O</h4><p>POSIX aio* interfaces -&gt; bsd&#x2F;kern&#x2F;kern_aio.c<br>aio_<a href="aiocbp">read&#x2F;write</a> &#x2F; aio_fsync<br>-&gt; aio_queue_async_request<br>aio_max_requests_per_process</p><h3 id="BSD-Memory-Zones"><a href="#BSD-Memory-Zones" class="headerlink" title="BSD Memory Zones"></a>BSD Memory Zones</h3><p>BSD provides the notion of memory zones: Zones are preallocated arrays of objects of an<br>identical size.<br>kmzones [bsd&#x2F;kern&#x2F;kern_malloc.c]<br>vm_allocation_site Darwin15</p><h3 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a>sysctl</h3><p>sysctl_register_oid</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sysctl net</span><br><span class="line">sysctl net.inet.tcp</span><br><span class="line">sysctl net.inet.tcp.pcbcount</span><br><span class="line">sysctl -X net.inet.tcp.pcblist</span><br><span class="line">sysctl -X net.inet.tcp.pcblist_n</span><br><span class="line">sysctl -X | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p>kern&#x2F;vm&#x2F;net&#x2F;debug&#x2F;hw&#x2F;machdep&#x2F;user<br>sysctlbyname -&gt; name2oid<br>__DATA.__sysctl_set</p><h3 id="DTrace"><a href="#DTrace" class="headerlink" title="DTrace"></a>DTrace</h3><p>dtrace_init &lt;- bsd_autoconf<br>dtrace_cpu_state_changed<br>Providers -&gt; dtrace_register<br>dtrace&#x2F;profile&#x2F;syscall&#x2F;mach_trap&#x2F;lockstat&#x2F;sdt&#x2F;fbt<br>Probes -&gt; dtrace_probe_create<br>Case Study: The fbt provider<br>fbt_provide_probe<br>The function inspects the instruction stream at the address, trying to find the familiar<br>PUSH RBP in Intel, and an STP FP, LR, .. (the frame pointeer and link register) in ARM.</p><h2 id="chapter-7"><a href="#chapter-7" class="headerlink" title="chapter 7"></a>chapter 7</h2><p>Fee, Fi-fo, File - the Virtual Filesystem Switch</p><h3 id="VFS-Concepts"><a href="#VFS-Concepts" class="headerlink" title="VFS Concepts"></a>VFS Concepts</h3><ul><li>Filesystems<br>nfs&#x2F;devfs&#x2F;nullfs&#x2F;mockfs&#x2F;routefs [bsd&#x2F;vfs&#x2F;vfs_conf.c]<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man lsvfs</span><br></pre></td></tr></table></figure></li><li>Mounts &#x2F;System&#x2F;Library&#x2F;FileSystems<br>The system maintains all its mounts in the mountlist.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">TAILQ_HEAD</span><span class="params">(mntlist, mount)</span> mountlist</span>;</span><br></pre></td></tr></table></figure>f_mntonname (name of mount point) and f_mntfromname (mounted filesystem)</li><li>vnodes<br>A vnode is a representation of a file or special object, independent of the underlying<br>the system. HFS+ and APFS use the number as a B-Tree node identifier.</li><li>The ubc_info (V_REG vnodes)<br>The Unifide Buffer Cache (UBC) is a concept first introduced into NetBSD.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ubc_info</span></span><br></pre></td></tr></table></figure></li><li>Buffers<br>struct buf [bsd&#x2F;sys&#x2F;buf_internal.j]</li><li>File System Attributes<br>[bsd&#x2F;vfs&#x2F;vfs_attrlist.c]</li></ul><h3 id="Apple-Extensions"><a href="#Apple-Extensions" class="headerlink" title="Apple Extensions"></a>Apple Extensions</h3><ul><li>Resource Forks<br>com.apple.ResourceFork</li><li>File compression<br>com.apple.decmpfs<br>decmpfs_file_is_compressed</li><li>Restricted (MacOS)<br>com.apple.rootless</li><li>Data Vault (Darwin 17)<br>com.apple.rootless.datavault.controller</li><li>Data Protection<br>com.apple.system.cprotect</li><li>FSEvents</li><li>Document IDs</li><li>Object IDs</li><li>Disk Conditioning (Darwin 17)</li><li>Triggers (MacOS)</li><li>EVFILT_VNODE kevent(2) notifications</li><li>&#x2F;dev&#x2F;vn## (conditional)</li><li>File Providers<br>nspace_resolver_init &lt;- vfsinit<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man fileproviderctl</span><br></pre></td></tr></table></figure></li></ul><h3 id="VFS-KPIs"><a href="#VFS-KPIs" class="headerlink" title="VFS KPIs"></a>VFS KPIs</h3><p>KPI -&gt; Kernel Programming Interface<br>bsd&#x2F;vfs&#x2F;vfs_vnops.c</p><ul><li>The vfs_context_t</li><li>Manipulating file in kernel mode<br>namei [bsd&#x2F;vfs&#x2F;vfs_lookup.c]<br>vnode_open [bsd&#x2F;vfs&#x2F;vfs_subr.c]</li><li>Direct File I&#x2F;O<br>kern_open_file_for_direct_io()</li><li>Vnode lifecycle<br>File I&#x2F;O, however, is very frequent. So sooner or later any limit will be hit,<br>but vnodes never get freed - instead, they are recycled.</li></ul><h3 id="VFS-SPIs"><a href="#VFS-SPIs" class="headerlink" title="VFS SPIs"></a>VFS SPIs</h3><p>SPI -&gt; Service Provider Interface</p><ul><li>Registering Filesystems<br>vfs_fsadd [bsd&#x2F;vfs&#x2F;kpi_vfs.c]</li><li>VFS operations<br>struct vfsops [bsd&#x2F;sys&#x2F;mount.h]</li><li>Vnode operations</li></ul><h3 id="Case-Studies"><a href="#Case-Studies" class="headerlink" title="Case Studies"></a>Case Studies</h3><p>The flow of fo_read</p><ul><li>&#x2F;dev (devfs)</li><li>The [b|c]devsw entries<br>Block&#x2F;Char Device</li><li>specfs nodes<br>v_type of VBLK or VCHR</li><li>The fdesc quasi-filesystem<br>&#x2F;dev&#x2F;fd &#x2F;dev&#x2F;[stdin&#x2F;stdout&#x2F;stderr]<br>[bsd&#x2F;miscfs&#x2F;devfs&#x2F;devfs_fdesc_support.c]</li><li>NFS (MacOS)<br>&#x2F;sbin&#x2F;nfsd<br>&#x2F;usr&#x2F;libexec&#x2F;automountd<br>&#x2F;sbin&#x2F;nfsiod</li><li>NFS server operations<br>nfssvc&#x2F;getfh&#x2F;fhopen</li><li>NFS client operations<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man nfsstat</span><br></pre></td></tr></table></figure></li><li>Filesystems in USEr mode (FUSE)<br>Because FUSE does require a kernel component, it is not applicable in the <code>*OS</code> variants,<br>wherein Apple uses DMG mounts (by registering loop block devices) instead.</li></ul><h2 id="chapter-8"><a href="#chapter-8" class="headerlink" title="chapter 8"></a>chapter 8</h2><p>Space Oddity: APFS</p><h3 id="A-Bird’s-Eye-View-of-APFS"><a href="#A-Bird’s-Eye-View-of-APFS" class="headerlink" title="A Bird’s Eye View of APFS"></a>A Bird’s Eye View of APFS</h3><p>The APFS partition type is identified by a well-known GUID.<br>B-Tree [The RootFS Tree&#x2F;The Extent Tree]</p><h3 id="Filesystem-Features"><a href="#Filesystem-Features" class="headerlink" title="Filesystem Features"></a>Filesystem Features</h3><ul><li>Full 64-bit filesystem</li><li>Volume Management</li><li>Encryption<br>MacOS was one of the first operationg systems to provide full disk encryption, when Apple<br>introducde FileVault in MacOS 10.7.<br>apfs_meta_crypto</li><li>Fast Directory Sizing<br>du -&gt; dir size<br>APFS provides a significant speed up, by storing the directory usage statistics as<br>additional metadata (an APFS_TYPE_DIR_STATS record) for the directory object.</li><li>Sparse File support</li><li>Atomic safe-save<br>rename[at]x_np</li><li>File&#x2F;Directory Cloning<br>clonefileat (#462)</li><li>Copy-on-Write<br>This also makes APFS a “flash friendly” filesystem.<br>Suprisingly, however, APPLE chose not to provide an undelete tool, instead offering<br>a different model, of snapshots.</li><li>Snapshots<br>fs_snapshot (#518)<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man fs_snapshot_create <span class="comment"># macOS 10.13</span></span><br></pre></td></tr></table></figure></li><li>Defragmentation<br>Darwin 18</li><li>Volume Groups and Firm Links (Darwin 19+)</li><li>Purgeable Files (Darwin 19+)</li></ul><h3 id="File-System-Internals"><a href="#File-System-Internals" class="headerlink" title="File System Internals"></a>File System Internals</h3><p>Unallocated&#x2F;Used by a file object&#x2F;Used by APFS itself</p><ul><li>APFS Objects</li><li>APFS object structure</li><li>B-Trees<br>The B-tree used by APFS are actually B+ trees - a refinement on classic B-trees, by<br>restricting values to leaf nodes only. Thus, non-leaf nodes (the root and deeper levels) hold only keys and identifiers of child nodes.<br>APFS nodes further have no sibling pointers, which further compacts space needed, but impacts sequential reading of values: When the end of the node is reached, the next value in its sibling record must be located by starting the search at the root</li><li>The B-Tree Node Format<br>BTNODE_ROOT (0x1) BTNODE_LEAF (0x2)</li></ul><h3 id="Containers-amp-Volumes"><a href="#Containers-amp-Volumes" class="headerlink" title="Containers &amp; Volumes"></a>Containers &amp; Volumes</h3><ul><li>Volumes<br>Each volume maintains three trees - filesystem, snapshot metadata and extent.</li><li>Filesystem Trees</li></ul><h3 id="The-Space-Manager"><a href="#The-Space-Manager" class="headerlink" title="The Space Manager"></a>The Space Manager</h3><ul><li>Chunk Info Blocks (CIBs)</li><li>CIB Address Blocks (CABs)</li><li>Reaping Objects</li></ul><h3 id="APFS-kext"><a href="#APFS-kext" class="headerlink" title="APFS.kext"></a>APFS.kext</h3><p>com.apple.filesystem.apfs<br>&#x2F;System&#x2F;Library&#x2F;Extensions&#x2F;apfs.kext<br>closed source</p><ul><li>fsctl(2) codes</li><li>UserClient Methods</li></ul><h2 id="chapter-9"><a href="#chapter-9" class="headerlink" title="chapter 9"></a>chapter 9</h2><p>Tempus Fugit: Mach Scheduling</p><h3 id="The-High-Level-View"><a href="#The-High-Level-View" class="headerlink" title="The High Level View"></a>The High Level View</h3><h3 id="Mach-Tasks"><a href="#Mach-Tasks" class="headerlink" title="Mach Tasks"></a>Mach Tasks</h3><p>struct task [osfmk&#x2F;kern&#x2F;task.h]</p><ul><li>The task lock</li><li>Statistics</li><li>Priority, maxmimum priority and importance</li><li>The vm_map</li><li>Linkage</li><li>Threads</li><li>Task port space</li><li>Task special ports</li><li>Task registered ports</li><li>Task exception ports</li><li>The Machine task</li><li>Security and audit tokens</li><li>Counts</li><li>Resource usage</li><li>The corresponding struct proc</li><li>Corpse information</li><li>I&#x2F;O statistics</li><li>Flags</li><li>Purgeable VM objects</li><li>Coalitions</li><li>Associated hypervisor Virtual Machine (MacOS)</li><li>Seclude memory</li><li>External Modification statistics</li><li>Effective and requested scheduling policies</li><li>IOUserClients</li><li>Task watching (<code>*OS</code>) task_watchers</li></ul><h4 id="The-kernel-task"><a href="#The-kernel-task" class="headerlink" title="The kernel_task"></a>The kernel_task</h4><h3 id="Mach-Threads"><a href="#Mach-Threads" class="headerlink" title="Mach Threads"></a>Mach Threads</h3><p>For all their size, Mach tasks (like UNIX processes) are merely resource containers.<br>It is their threads which are the scheduleable entities.<br>struct thread [osfmk&#x2F;kern&#x2F;thread.h]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">thread_ro</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">thread</span>              *tro_owner;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> MACH_BSD</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ucred</span>               *tro_cred;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">proc</span>                *tro_proc;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">proc_ro</span>             *tro_proc_ro;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">task</span>                *tro_task;</span><br><span class="line"><span class="type">thread_ro_flags_t</span>           tro_flags;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ipc_port</span>            *tro_self_port;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ipc_port</span>            *tro_settable_self_port;             <span class="comment">/* send right */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ipc_port</span>            *tro_ports[THREAD_SELF_PORT_COUNT];  <span class="comment">/* no right */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">exception_action</span>    *tro_exc_actions;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">thread</span>&#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">/* Task membership */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __x86_64__ || __arm__</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">task</span>            *t_task;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">thread_ro</span>       *t_tro;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Execution State</li><li>Linkage</li><li>Wait data</li><li>Ports</li><li>Priority</li><li>Scheudling information</li><li>Continuation</li><li>Affinity values</li><li>Page fault recovery handler</li><li>Thread call state</li><li>Guard execption codes</li><li>Turnstile</li><li>The BSD uuthread object</li><li>DTrace data</li><li>Per-thread statistics</li><li>Ledger details</li><li>Associated voucher</li><li>Tag</li><li>The machine dependent thread object</li></ul><h3 id="Thread-creation"><a href="#Thread-creation" class="headerlink" title="Thread creation"></a>Thread creation</h3><p>thread_create[_running]<br>Threads are normally created suspended, but using the running variant allows the caller to set the initial register state of the process and immdeidately schedule it for execution.<br>thread_create &amp;&amp; thread_start<br>kernel_thread_create&#x2F;kernel_thread_start[_priority]<br>machine_thread_create [osfmk&#x2F;arm64&#x2F;pcb.c]</p><h3 id="Thread-termination"><a href="#Thread-termination" class="headerlink" title="Thread termination"></a>Thread termination</h3><p>thread_terminate [osfmk&#x2F;kern&#x2F;thread_act.c]<br>It then puts the thread into a block, to continue on thread_terminate_continue.<br>The continuation, however, will never be reached (if it were to be reached, the kernel<br>would panic).</p><h3 id="Processor-Management"><a href="#Processor-Management" class="headerlink" title="Processor Management"></a>Processor Management</h3><p>processor_set_default</p><h3 id="Mach-Scheduling-Enhancements"><a href="#Mach-Scheduling-Enhancements" class="headerlink" title="Mach Scheduling Enhancements"></a>Mach Scheduling Enhancements</h3><p>For IPC to be efficient, the scheduler must be highly effective - as Mach strives to be.</p><ul><li>Handoff<br>Mach supports handoff in addition to the standard yield.<br>注:switch direct, not yield??<br>thread_handoff_[internal&#x2F;parameter]<br>thread_switch (user mode)</li><li>Continuations<br>A continuation is a function, along with an optional parameter, which is provided as<br>an argument to kernel_thread_create(), or to thread_block[_reason].<br>struct thread_snapshot -&gt; uint64_t continuation;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ith_continuation    saved.receive.continuation</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sth_continuation    saved.sema.continuation</span></span><br></pre></td></tr></table></figure>struct uthread -&gt; uu_continuation (BSD layer)</li></ul><h3 id="Asynchronous-Software-Traps-AST"><a href="#Asynchronous-Software-Traps-AST" class="headerlink" title="Asynchronous Software Traps (AST)"></a>Asynchronous Software Traps (AST)</h3><ul><li>Handling ASTs</li><li>AST reasons [osfmk&#x2F;kern&#x2F;ast.h]<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AST_SCHEDULING  (AST_PREEMPTION | AST_YIELD | AST_HANDOFF)</span></span><br><span class="line"><span class="comment">// processor_idle/thread_block_reason call ast_off(AST_SCHEDULING);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Mach-Schedulers"><a href="#Mach-Schedulers" class="headerlink" title="Mach Schedulers"></a>Mach Schedulers</h3><p>[osfmk&#x2F;kern&#x2F;sched.h]<br>Darwin version before Darwin 17 use multiq, but Darwin 18 shifts to qualq.<br><code>*OS 13</code> variant use a new scheduler called AMP, which takes into account the core type<br>(Performance or efficiency) as well.The kern.sched sysctl(8) MIB will show the currently<br>active scheduler.<br>Not note in this book<br>amp -&gt; clutch()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_SCHED_EDGE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;kern/sched_amp_common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_SCHED_EDGE */</span></span></span><br><span class="line">.sched_name = <span class="string">&quot;clutch&quot;</span>,</span><br><span class="line">.sched_name = <span class="string">&quot;edge&quot;</span>,</span><br></pre></td></tr></table></figure><p>sched_clutch.c<br>clutch&#x2F;edage</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kern.sched</span><br></pre></td></tr></table></figure><p>macOS 12.6<br>Mac mini (Late 2014)<br>kern.sched: dualq<br>Mac mini (M1, 2020)<br>kern.sched: edge</p><figure class="highlight cpp"><figcaption><span>[osfmk/arm/proc_reg.h]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_CLUTCH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __ARM_AMP__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable the Edge scheduler for all J129 platforms */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> XNU_TARGET_OS_OSX</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_SCHED_CLUTCH 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_SCHED_EDGE   1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* XNU_TARGET_OS_OSX */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* __ARM_AMP__ */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_SCHED_CLUTCH 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __ARM_AMP__ */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_CLUTCH */</span></span></span><br></pre></td></tr></table></figure><p>All Mach schedulers “plug in” to the scheduler primitives defined in osfmk&#x2F;kern&#x2F;sched_prim.c.</p><ul><li>The Run Queue<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">run_queue</span>;</span><br></pre></td></tr></table></figure></li><li>Priorities<br>Threads are queued in one of the NRQS queues, in FIFO ordering.<br>BASEPRI_DEFAULT -&gt; nice(1)</li><li>Load Average&#x2F;Mach Factor, and Priority Shifts<br>A key metric in any UNIX system is its load average, which is reported by commands such<br>as w(1) and uptime (1).<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl vm.loadavg</span><br></pre></td></tr></table></figure>The Mach factor can be retrieved using hostinfo(1).<br>XNU also calculates a more fine grained scheduler load, which it uses to implement priortiy shifts.<br>update_priority&#x2F;sched_usage</li><li>Scheduling buckets and the EWMA<br>sched_bucket_t<br>XNU’s averages was further tweaked in Darwin 18 to an Exponentially Weighted Moving Average<br>algorithm(EWMA).<br>[osfmk&#x2F;kern&#x2F;sched_average.c]</li><li>Scheduler dispatch<br>[osfmk&#x2F;kern&#x2F;sched_prim.c]<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sched_dispatch_table</span>;</span><br></pre></td></tr></table></figure><ul><li>thread_select</li><li>thread_invoke</li><li>thread_dispatch</li><li>qunatum_expire</li><li>update_priority (osfmk&#x2F;kern&#x2F;priority.c)</li><li>sched_maintenance_thread</li></ul></li><li>Multicore considerations<br>The calls for rebalancing, by moving queued threads from busy processor(s) to the less busy<br>ones(s), based on the respective run queue lengths.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl kern | grep kern.sched</span><br><span class="line">sysctl kern.sched_enable_smt</span><br><span class="line">sysctl kern.sched_allow_NO_SMT_threads</span><br></pre></td></tr></table></figure></li><li>Darwin 17 additions<ul><li>Real time threading support</li><li>Multi processor support</li><li>Thread yield checks</li></ul></li><li>Darwin 19 additions<ul><li>Run counts</li><li>Thread buckets</li><li>Multiple processor set support</li></ul></li><li>Effectuating policy changes</li></ul><h3 id="Deferred-Calls"><a href="#Deferred-Calls" class="headerlink" title="Deferred Calls"></a>Deferred Calls</h3><p>[osfmk&#x2F;kern&#x2F;call_entry.h]</p><ul><li>Timer calls<br>[osfmk&#x2F;kern&#x2F;timer_call.h]<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">timer_call</span>;</span><br></pre></td></tr></table></figure></li><li>Timer coalescing<br>One of Darwin 13’s most important “under the hood” changes was the introduction of<br>Timer Coalescing. When timers start up too frequently, the CPU can enjoy less idle periods</li><li>and waking up the CPU can actually take more power than just leaving it on for a slightly<br>longer period.<br>timer_call_enter_with_leeway<br>Note: Windows 8 and later have a similar mechanism in the EX_TIMERS and <code>EX*Timer</code> routines,<br>with “No-wake timers”. Linux 2.6.22 and later timer_lists offer TIMER_DEFERRABLE).<br>Ref: <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/wdm/ns-wdm-_ext_set_parameters_v0">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/wdm/ns-wdm-_ext_set_parameters_v0</a> (LONGLONG NoWakeTolerance;)</li><li>Scheduling timers</li><li>Thread calls</li><li>Servicing thread calls</li></ul><h3 id="Scheduler-assisted-synchronization"><a href="#Scheduler-assisted-synchronization" class="headerlink" title="Scheduler assisted synchronization"></a>Scheduler assisted synchronization</h3><ul><li>Wait Queues<br>Mach follows this pattern as well, with the waitq and waitq_set structures.The waitqs can be<br>found embedded in Mach ports, semaphores and (as of Darwin 18) turnstiles, and they also<br>support BSD’s select(2) and AIO implementaiotns. The waitq_sets back select(2) as well,<br>along with kqueues and Mach ipc_mqueues.<br>struct waitq [osfmk&#x2F;kern&#x2F;waitq.h]</li><li>selection callbacks<br>waitq_select_<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark global wait queues</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __startup_data <span class="keyword">struct</span> <span class="title class_">waitq</span> g_boot_waitq;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">SECURITY_READ_ONLY_LATE</span><span class="params">(<span class="keyword">struct</span> waitq *)</span> global_waitqs </span>= &amp;g_boot_waitq;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">SECURITY_READ_ONLY_LATE</span><span class="params">(<span class="type">uint32_t</span>)</span> g_num_waitqs </span>= <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li>Ulocks (Darwin 16+)<br>__ulock_wait&#x2F;__ulock_wake<br>As the double underscores imply, user mode is not intened to use these system calls<br>directly, instead working with libplatform.dylib’s higher level os_unfair_lock_t.<br>[bsd&#x2F;kern&#x2F;sys_ulock.c]<br>sys_ulock_wait (#515) -&gt; ulock_wait<br>sys_ulock_wake (#516) -&gt; ulock_wake</li><li>Turnstiles (Darwin 18+)<br>The concept first appeared in Solaris, and was then adopted by FreeBSD, and well explained<br>in the BSD bible.<br>Theory<br>optimize short term locks and the scheduling of waiters wehn the locks become available.<br>Darwin implmentation of Turnstiles.<br>turnstiles_init()<br>[osfmk&#x2F;kern&#x2F;turnstile.h]<br>Ref:<a href="https://book.douban.com/subject/3666232/">https://book.douban.com/subject/3666232/</a><br><a href="https://greenteapress.com/wp/semaphores/">https://greenteapress.com/wp/semaphores/</a><br><a href="https://blog.csdn.net/booksyhay/article/details/82692362">https://blog.csdn.net/booksyhay/article/details/82692362</a><br>[信号量小书 第三章 基本同步模式]<br><a href="https://www.likecs.com/show-204583284.html#3.7.6%20%E9%A2%84%E8%A3%85%E6%97%8B%E8%BD%AC%E6%A0%85%E9%97%A8%EF%BC%88Preloaded%20turnstile%EF%BC%89">https://www.likecs.com/show-204583284.html#3.7.6%20%E9%A2%84%E8%A3%85%E6%97%8B%E8%BD%AC%E6%A0%85%E9%97%A8%EF%BC%88Preloaded%20turnstile%EF%BC%89</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">__attribute__</span>((packed)) turnstile_type &#123;</span><br><span class="line">TURNSTILE_NONE = <span class="number">0</span>,</span><br><span class="line">TURNSTILE_KERNEL_MUTEX = <span class="number">1</span>,</span><br><span class="line">TURNSTILE_ULOCK = <span class="number">2</span>,</span><br><span class="line">TURNSTILE_PTHREAD_MUTEX = <span class="number">3</span>,</span><br><span class="line">TURNSTILE_SYNC_IPC = <span class="number">4</span>,</span><br><span class="line">TURNSTILE_WORKLOOPS = <span class="number">5</span>,</span><br><span class="line">TURNSTILE_WORKQS = <span class="number">6</span>,</span><br><span class="line">TURNSTILE_KNOTE = <span class="number">7</span>,</span><br><span class="line">TURNSTILE_SLEEP_INHERITOR = <span class="number">8</span>,</span><br><span class="line">TURNSTILE_TOTAL_TYPES = <span class="number">9</span>,</span><br><span class="line">&#125; <span class="type">turnstile_type_t</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>Benefits of Turnstiles<br>“thundering herd” problem<br>priority inversion</li><li>KDebug codes<br>DBG_TURNSTILE</li></ul><ul><li>Gates (Darwin 19)</li></ul><h3 id="Ledgers"><a href="#Ledgers" class="headerlink" title="Ledgers"></a>Ledgers</h3><ul><li>ledger (#373)</li><li>Initialization</li><li>Maintenance</li></ul><h3 id="Selective-Forced-Idle-SFI"><a href="#Selective-Forced-Idle-SFI" class="headerlink" title="Selective Forced Idle (SFI)"></a>Selective Forced Idle (SFI)</h3><p>Darwin 13<br>The main user-mode client of the SFI facility is the thermald.</p><h2 id="chapter-10"><a href="#chapter-10" class="headerlink" title="chapter 10"></a>chapter 10</h2><p>Mixed Messages: Mach IPC</p><h3 id="The-High-Level-View-1"><a href="#The-High-Level-View-1" class="headerlink" title="The High Level View"></a>The High Level View</h3><p>Mach is, first and foremost, a kernel optimized for message passing.<br>ipc_space_t</p><h3 id="Task-ipc-space-t"><a href="#Task-ipc-space-t" class="headerlink" title="Task ipc_space_t"></a>Task ipc_space_t</h3><p>struct ipc_space [osfmk&#x2F;ipc&#x2F;ipc_space.h]<br>ipc_space_create</p><h3 id="The-ipc-port"><a href="#The-ipc-port" class="headerlink" title="The ipc_port"></a>The ipc_port</h3><p>[osfmk&#x2F;ipc&#x2F;ipc_port.h]<br>ipc_port_make_send</p><ul><li>Case Study: resolving a port name to the underlying object address<br>[osfmk&#x2F;ipc&#x2F;ipc_object.c]</li><li>Port lifecycle</li></ul><ul><li>Port allocation<br> [osfmk&#x2F;ipc&#x2F;mach_port.c]</li></ul><ul><li>Rights and Names</li><li>Reference counting<br>mach_msg -&gt; mach_msg_trap<br>-&gt; mach_msg_trap<br>-&gt; ipc_kmsg_send&#x2F;ipc_mqueue_receive</li><li>Port deallocation</li><li>Handling messages<br>[osfmk&#x2F;ipc&#x2F;ipc_mqueue.h]</li></ul><h3 id="mach-msg-revisited"><a href="#mach-msg-revisited" class="headerlink" title="mach_msg revisited"></a>mach_msg revisited</h3><ul><li>Sending Mach messages<br>ipc_kmsg_send</li></ul><ul><li>ipc_mqueue_send()</li></ul><ul><li>Receiving Mach messages<br>ipc_mqueue_receive</li><li>Destriying messages<br>[osfmk&#x2F;ipc&#x2F;ipc_kmsg.c]</li><li>Message Descriptors</li></ul><ul><li>Port right descriptors<br> ipc_kmsg_copyin_port_descriptor</li><li>Port set (OOL ports) descriptors</li><li>OOL memory descriptors</li></ul><ul><li>Descriptors as a vehicle for malicious attacks</li></ul><h3 id="Vouchers"><a href="#Vouchers" class="headerlink" title="Vouchers"></a>Vouchers</h3><p>Darwin 14 [osfmk&#x2F;ipc&#x2F;ipc_voucher.h]</p><ul><li>User-mode API<br>host_create_mach_voucher_trap<br>mach_voucher_extract_attr_recipe_trap</li><li>Implementation<br>IKOT_VOUCHER</li></ul><h3 id="Multinode"><a href="#Multinode" class="headerlink" title="Multinode"></a>Multinode</h3><ul><li>Multinode requirements<br>mach_host_other()</li><li>FLIPC<br>Fast Local InterProcess Communication (FLIPC)<br>Mach Node [osfmk&#x2F;kern&#x2F;mach_node.c] mach_node_register<br>FLIPC [osfmk&#x2F;ipc&#x2F;flipc.c]</li></ul><h2 id="chapter-11"><a href="#chapter-11" class="headerlink" title="chapter 11"></a>chapter 11</h2><p>Mapped out: Mach Memory Management</p><h3 id="A-Bird’s-Eye-View"><a href="#A-Bird’s-Eye-View" class="headerlink" title="A Bird’s Eye View"></a>A Bird’s Eye View</h3><p>Mach’s Virtual Memory subsystem<br>vm_map -&gt; virtual memory<br>pmap -&gt; physical memory</p><h3 id="The-vm-map-Layer"><a href="#The-vm-map-Layer" class="headerlink" title="The vm_map Layer"></a>The vm_map Layer</h3><ul><li>The <code>struct _vm_map</code><br>[osfmk&#x2F;vm&#x2F;vm_map.h]<br>vm_map_create[_options]</li><li>vm_objects<br>[osfmk&#x2F;vm&#x2F;vm_object.h]</li><li>vm_pages<br>[osfmk&#x2F;vm&#x2F;vm_page.h]<br>pmap_startup&#x2F;pmap_free_pages<br>pmap_steal_memory<br>vm_page_lookup()</li><li>User mode interface<br>host_virtual_physical_table_info<br>vm_mapped_pages_info<br>mach_vm_page_info<br>vm_page_info_basic <code>&lt;mach/vm_region.h&gt;</code></li><li>vm_map_enter and friends<br>[mach_]vm_allocate()<br><code>&lt;mach/vm_statistics.h&gt;</code></li><li>Allocating memory (highlighs)<br>VM_PROT_EXECUTE<br>com.apple.security.cs.allow-jit<br>kernel_memory_allocate</li><li>The vm_map_copy object<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">vm_map_copy</span>;</span><br></pre></td></tr></table></figure></li><li>Copying memory<br>[mach_]vm_copy()</li></ul><h3 id="Pagers"><a href="#Pagers" class="headerlink" title="Pagers"></a>Pagers</h3><p>Pager types supported in Darwin 18<br>Vnode&#x2F;Device&#x2F;Apple Protect&#x2F;swapfile<br>Compressor&#x2F;4K(4K emulation on 16K)&#x2F;shared</p><ul><li>The Pager object<br>struct memory_object</li><li>Pager Lifecycle callbacks</li><li>The vnode pager</li><li>The swapfile pager</li><li>The compressor pager<br>[osfmk&#x2F;vm&#x2F;WKdm_new.h]<br>Wilson &amp; Kaplan<br>vm_compressor_algorithms.h</li></ul><ul><li>Lifecycle</li></ul><ul><li>The Device Pager<br>[osfmk&#x2F;vm&#x2F;device_vm.c]</li><li>The 4K Pager (<code>*OS</code>)</li><li>The sahred region pager (Darwin 18)</li><li>The Apple Protect pager<br>memory encryption<br>[osfmk&#x2F;vm&#x2F;vm_apple_protect.c]</li><li>MacOS: Dont Steal Mac OS X.kext<br>dsmos_page_transform_hook<br>[osfmk&#x2F;kern&#x2F;page_decypt.c]</li><li><code>*OS</code>: Fairplay encryption</li><li>Page Lists (UPLs)<br>struct upl [osfmk&#x2F;vm&#x2F;vm_pageout.h]</li></ul><ul><li>Creating UPLs<br> ubc_create_upl()</li><li>Handling UPLs<br> [osfmk&#x2F;mach&#x2F;upl.defs]</li></ul><h3 id="The-pmap-Layer"><a href="#The-pmap-Layer" class="headerlink" title="The pmap Layer"></a>The pmap Layer</h3><p>[osfmk&#x2F;vm&#x2F;pmap.h]<br>pmap_create</p><ul><li>Page Tables<br>In Intel, the special CR3 register holds the base of the page tables for a giver process.<br>In ARM architecures, the Translation Table Base Registers (TTBRs) are used instead. ARM64<br>providers a differnt TTBR for every execption level, so TTBR_EL0 is employde by user mode,<br>and TTBR_EL1 by the kernel.<br>Page Table Entrye(PTE)<br>pmap_pte(pmap, va)</li><li>WIMG<br>Write-through, Cache-Inhibition, Memory Coherence and Guarde writes</li><li>I&#x2F;O Mappings<br>ml_io_map()</li><li>Intel PTEs</li><li>The ARM PTEs</li></ul><h2 id="chapre-12"><a href="#chapre-12" class="headerlink" title="chapre 12"></a>chapre 12</h2><p>Ceci n’est pas une “heap”: Kernel Memory Management<br>We detail how the kernel manages its own vm_map - the kernel_map - through <code>kmem_alloc*</code><br>and <code>kalloc*</code>.</p><h3 id="Kernel-Memory-Allocation"><a href="#Kernel-Memory-Allocation" class="headerlink" title="Kernel Memory Allocation"></a>Kernel Memory Allocation</h3><ul><li>The kernel_map<br>[osfmk&#x2F;vm&#x2F;vm_kern.c]<br>VM_MIN_KERNEL_AND_KEXT_ADDRESS<br>VM_MAX_KERNEL_AND_KEXT_ADDRESS</li><li>kmem_alloc() and friends</li></ul><ul><li>kernel_memory_allocate<br> vm_map_find_space</li><li>kmem_suballoc</li><li>kmem_realloc</li><li>kalloc</li><li>kalloc.###zones<br> zalloc_canblock_tag&#x2F;vm_allocation_site</li></ul><ul><li>The Kalloc DLUT<br>Direct LookUp Table (DLUT)<br>[osfmk&#x2F;kern&#x2F;kalloc.c]</li><li>The slow path</li><li>OSMalloc*<br>[libkern&#x2F;libkern&#x2F;OSMalloc.h]<br>The main advantage of using OSMalloc is its support of memory tags.</li></ul><h3 id="The-Zone-Allocator"><a href="#The-Zone-Allocator" class="headerlink" title="The Zone Allocator"></a>The Zone Allocator</h3><p>like Linux’s Slabs<br>zalloc() [osfmk&#x2F;kern&#x2F;zalloc.c]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man zprint</span><br></pre></td></tr></table></figure><ul><li>Zone Management</li><li>The zone_metadata_region</li><li>The zone metadata</li><li>Element Free Lists</li><li>Garbage Collection<br>consider_zone_gc()&#x2F;zone_gc()<br>vm_pageout_garbage_collect</li><li>GC and UAF<br>mach_zone_force_gc</li><li>Battling zone corruption</li><li>The Guard Mode Zone Allocator (MacOS)<br>like libgmalloc(3) (Guard Malloc) in user mode</li><li>The Zone Cache (Darwin 18+)</li></ul><h3 id="Memorystauts-MacOS-anad-Jetsam-OS"><a href="#Memorystauts-MacOS-anad-Jetsam-OS" class="headerlink" title="Memorystauts (MacOS) anad Jetsam (*OS)"></a>Memorystauts (MacOS) anad Jetsam (<code>*OS</code>)</h3><ul><li>Purgeable memory<br>task_purgable_info<br>[mach_]vm_purgable_control<br>memory_entry_purgable_control</li></ul><h3 id="Kernel-Memory-Layout"><a href="#Kernel-Memory-Layout" class="headerlink" title="Kernel Memory Layout"></a>Kernel Memory Layout</h3><ul><li>The kernel_map regions</li><li>The Kernel Slide<br>Kernel Address Space Layout Randomization (KALSR) [Darwin 12]<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl kern.slide</span><br></pre></td></tr></table></figure>vm_kernel_slider<br>vm_kernel_addrhash_salt</li></ul><h2 id="chapter-13"><a href="#chapter-13" class="headerlink" title="chapter 13"></a>chapter 13</h2><p>All in the Family: IOKit<br>IORegistry IOCatalogue</p><h3 id="A-High-level-view-of-IOKit"><a href="#A-High-level-view-of-IOKit" class="headerlink" title="A High level view of IOKit"></a>A High level view of IOKit</h3><ul><li>The IOKit.framework<br>IO Master Port<br>device_service_create [osfmk&#x2F;device&#x2F;device_init.c]</li><li>IOKit error codes<br>[iokit&#x2F;IOKit&#x2F;IOReturn.h]<br>IOService::stringFromReturn</li></ul><h3 id="The-IORegistry"><a href="#The-IORegistry" class="headerlink" title="The IORegistry"></a>The IORegistry</h3><p>IORegistryPlanes</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ioreg -l -w 0 -f | grep IORegistryPlanes</span><br></pre></td></tr></table></figure><p>IORegistryExplorer.app -&gt; XCode’s Additional Tools</p><ul><li>User Mode APIs</li><li>Iterators<br>IOIterator</li></ul><h3 id="The-IOCatalog-ue"><a href="#The-IOCatalog-ue" class="headerlink" title="The IOCatalog (ue)"></a>The IOCatalog (ue)</h3><ul><li>Matching Dictionaries</li><li>Notifiations<br>kIO…Notification<br>IONotificationPortCreate()</li></ul><h3 id="Interlude-Libkern-Base-Classes"><a href="#Interlude-Libkern-Base-Classes" class="headerlink" title="Interlude: Libkern Base Classes"></a>Interlude: Libkern Base Classes</h3><ul><li>OSObject</li><li>OSMetaClass(Base)</li><li>APIs</li><li>DefaultStrutors</li><li>Members, methods and the Fragile Base Class proble</li><li>Object types</li></ul><ul><li>OSStrings and OSSymbols</li><li>OSCollections</li></ul><ul><li>Serializaition</li></ul><ul><li>XML Serialization</li><li>Binary Serialization</li></ul><h3 id="The-Class-Menagerie"><a href="#The-Class-Menagerie" class="headerlink" title="The Class Menagerie"></a>The Class Menagerie</h3><ul><li>IOKIt Built-in classes</li></ul><ul><li>IORegistryEntry</li><li>IOService</li><li><code>IO*MemoryDescriptor</code></li><li><code>IO*MemoryCursor</code></li><li>IOWorkLoop</li><li><code>IO*EventSource</code> and IOCommand</li><li>IOCommandQueue</li></ul><ul><li>IOKit Families</li></ul><h3 id="Driver-Life-Cycle"><a href="#Driver-Life-Cycle" class="headerlink" title="Driver Life Cycle"></a>Driver Life Cycle</h3><ul><li>Driver Matching<br>IOKitPersonalities</li><li>Case Study: VMWare Fusion VMIOPlug</li><li>Driver activity and the IOWorkLoop</li><li>Messaging</li><li>Matching Notifications</li><li>Interrupt Handling</li></ul><h3 id="IOUserClients"><a href="#IOUserClients" class="headerlink" title="IOUserClients"></a>IOUserClients</h3><ul><li>IOUserClient lifecycle</li><li>Driver Properties</li><li>Notifications<br>IOConnectSetNotificationPort</li><li>Mapped Memory</li><li>External Traps</li><li>Extenal Methods</li><li>IOCFPlugInTypes</li></ul><h3 id="Darwin-19-DriverKit"><a href="#Darwin-19-DriverKit" class="headerlink" title="Darwin 19: DriverKit"></a>Darwin 19: DriverKit</h3><ul><li>IOUserServer</li><li>IORPC</li></ul><h2 id="chapter-14"><a href="#chapter-14" class="headerlink" title="chapter 14"></a>chapter 14</h2><p>Stacking Up: Kernel Networking</p><h3 id="The-High-Level-View-2"><a href="#The-High-Level-View-2" class="headerlink" title="The High Level View"></a>The High Level View</h3><h3 id="Layer-V-Sockets"><a href="#Layer-V-Sockets" class="headerlink" title="Layer V: Sockets"></a>Layer V: Sockets</h3><ul><li>The struct socket</li><li>Socket Creation<br>socreate_internal() [bsd&#x2F;kern&#x2F;uipc_socket.c]</li><li>sockbufs</li><li>mbufs<br>struct mbuf;<br>[bsd&#x2F;sys&#x2F;mbuf.h]<br>XNU also supports an “mbuf watchdog”, toggled through kern.ipc.mb_watchdog.</li><li>Sockets in kernel mode<br>[bsd&#x2F;kern&#x2F;kpi_socket.h]<br>sock_connectwait<br>sock_socket -&gt; socreate</li></ul><h3 id="Layer-IV-Domains-amp-Protocols"><a href="#Layer-IV-Domains-amp-Protocols" class="headerlink" title="Layer IV: Domains &amp; Protocols"></a>Layer IV: Domains &amp; Protocols</h3><ul><li>Domains</li><li>Protocols</li><li>Case Study: PF_SYSTEM sockets</li></ul><ul><li>SYSPROTO_EVENT</li><li>SYSPROTO_CONTROL</li></ul><h3 id="Layer-III-Network-Protocols"><a href="#Layer-III-Network-Protocols" class="headerlink" title="Layer III: Network Protocols"></a>Layer III: Network Protocols</h3><ul><li>Incoming packets</li></ul><h3 id="Layer-II-Interfaces-The-Data-Link-Interface-Layer"><a href="#Layer-II-Interfaces-The-Data-Link-Interface-Layer" class="headerlink" title="Layer II: Interfaces - The Data Link Interface Layer"></a>Layer II: Interfaces - The Data Link Interface Layer</h3><ul><li>The struct ifnet</li><li>Interface lifecycle</li><li>Case Study: The UTUN interface</li></ul><h3 id="Network-Data-Processing"><a href="#Network-Data-Processing" class="headerlink" title="Network Data Processing"></a>Network Data Processing</h3><ul><li>Sending Data</li><li>IPv4&#x2F;IPv6 packet output</li><li>DLIL output</li><li>Receiving data</li><li>DLIL frame reception</li><li>IPv4&#x2F;IPv6 packaet input</li></ul><h3 id="Firewalling-amp-Filtering-mechanisms"><a href="#Firewalling-amp-Filtering-mechanisms" class="headerlink" title="Firewalling &amp; Filtering mechanisms"></a>Firewalling &amp; Filtering mechanisms</h3><ul><li>Socket Filters</li><li>Content Filters (Darwin 14+)</li><li>IP filters</li><li>PF<br>BSD PF<br>pfctl(8)</li><li>Interface Filters</li><li>BPF</li></ul><h3 id="Network-Extension-Control-Policies"><a href="#Network-Extension-Control-Policies" class="headerlink" title="Network Extension Control Policies"></a>Network Extension Control Policies</h3><ul><li>NECP file descriptors<br>necp_open() [bsd&#x2F;net&#x2F;necp_client.c]</li><li>NECP Session FDs<br>necp_session_opne()</li><li>Policy evaluation</li></ul>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入解析MacOS和iOS 卷一 笔记</title>
      <link href="/2023/06/27/macos-ios-internals-vol-one/"/>
      <url>/2023/06/27/macos-ios-internals-vol-one/</url>
      
        <content type="html"><![CDATA[<p>MacOS and iOS Internals, Volume I : User Mode.md</p><h1 id="MacOS-and-iOS-Internals-Volume-I-User-Mode"><a href="#MacOS-and-iOS-Internals-Volume-I-User-Mode" class="headerlink" title="MacOS and iOS Internals, Volume I : User Mode"></a>MacOS and iOS Internals, Volume I : User Mode</h1><p>DarwinVer &#x3D; 10.(MacOSVer + 4) &#x3D; (iOSVer + 6) &#x3D; (TvOSVer + 6) &#x3D; (WatchOSVer + 13)<br>&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SystemVersion.plist</p><p>man what<br>what &#x2F;bin&#x2F;ls<br>what <code>which what</code><br>strings &#x2F;bin&#x2F;ls | grep #</p><p>app nap &#x2F; timer coalescing<br>应用睡眠 &#x2F; 计时器合并<br>compressed memory<br>thread-level qos<br>10.11’s SIP<br>AppleScript –&gt; JXA(JavaScript for Automation)<br>AMFI –&gt; SIP</p><p>10.12<br>syslog -&gt; os_log<br>HFS+ -&gt; APFS</p><p>10.13<br>Metal2<br>Remote XPC</p><p>10.14<br>dark mode<br>app notarization<br>GCD(Grand Central Dispatcher)</p><p>10.15<br>Voice Control<br>SideCar<br>DriverKit<br>User Mode Kernel Extensions<br>KAuth -&gt; EndpointSecurity</p><p><code>*OS Architecture</code><br>Application Layer -&gt; Cocoa<br>Media Frameworks -&gt; AVF, CoreAudio, CoreImage, CoreGraphic<br>Core Services -&gt; Foundation, CoreFoundation<br>Core OS -&gt; OpenDirectory, SystemConfiguration<br>Kernel and Device Drievers -&gt;  XNU and Kenerl Extensions</p><p>Resources<br>.car -&gt; assetutil&#x2F;cartool</p><p>XCode 7.1 tbd</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/system</span><br><span class="line">nm libsystem_kernel.dylib -UCg | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p>libsystem_kernel.dylib 1457<br>libsystem_platform.dylib 180<br>libsystem_pthread.dylib 201</p><p>libSystem_initializer</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">init_func</span> &#123;</span><br><span class="line">INIT_SYSTEM = <span class="number">0</span>,</span><br><span class="line">INIT_KERNEL = <span class="number">1</span>,</span><br><span class="line">INIT_PLATFORM = <span class="number">2</span>,</span><br><span class="line">INIT_PTHREAD = <span class="number">3</span>,</span><br><span class="line">INIT_LIBC = <span class="number">4</span>,</span><br><span class="line">INIT_MALLOC = <span class="number">5</span>,</span><br><span class="line">INIT_KEYMGR = <span class="number">6</span>,</span><br><span class="line">INIT_DYLD = <span class="number">7</span>,</span><br><span class="line">INIT_LIBDISPATCH = <span class="number">8</span>,</span><br><span class="line">INIT_LIBXPC = <span class="number">9</span>,</span><br><span class="line">INIT_LIBTRACE = <span class="number">10</span>,</span><br><span class="line">INIT_SECINIT = <span class="number">11</span>,</span><br><span class="line">INIT_CONTAINERMGR = <span class="number">12</span>,</span><br><span class="line">INIT_DARWIN = <span class="number">13</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_libSystem_ktrace0</span><br><span class="line">__libkernel_init</span><br><span class="line">__libplatform_init</span><br><span class="line">__pthread_init</span><br><span class="line">_libc_initializer</span><br><span class="line">__malloc_init(apple);</span><br><span class="line"><span class="built_in">libdispatch_init</span>();</span><br><span class="line">_libxpc_initializer();</span><br><span class="line">_libtrace_init();</span><br></pre></td></tr></table></figure><p>systemcall nocancel<br>check -&gt; pthread_testcancel</p><p>Even if syscall() will eventually removed, there is no way to block<br>direct invocation of system calls through the system assembly instructions.</p><p>comm page</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _COMM_PAGE_SIGNATURE (_COMM_PAGE_START_ADDRESS+0x000) </span></span><br></pre></td></tr></table></figure><p>sudo launchctl hostinfo</p><p>UNIX-style system call&#x2F;Mach Traps<br>IOKit – Windows’ NDIS<br>user mode c++</p><p>kexts<br>&#x2F;System&#x2F;Library&#x2F;Extensions<br>kernelcaches</p><p>kextstat</p><h2 id="chapter-3"><a href="#chapter-3" class="headerlink" title="chapter 3"></a>chapter 3</h2><p>FileSystem &amp; Directory</p><h3 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h3><p>mount&#x2F;fsck<br>VFS -&gt; BSD layer<br>&#x2F;[System&#x2F;]Library&#x2F;FileSystems</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kextstat|grep filesystems</span><br><span class="line"><span class="built_in">ls</span> -F /System/Library/Filesystems/</span><br></pre></td></tr></table></figure><ul><li>APFS 10.12</li><li>NTFS</li><li>Media FileSystem -&gt; CD9660&#x2F;UDF .iso</li><li>Network FileSystem -&gt; AC&#x2F;AFP&#x2F;FTP&#x2F;NFS&#x2F;SMB&#x2F;WebDAV</li><li>DMG -&gt; hdiutil&#x2F;hdik -&gt; DiskImage.framework -&gt; IOHDIXController.kext</li><li>&#x2F;usr&#x2F;libexec&#x2F;diskarbitrationd -&gt; DiskArbitration.framework<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -A1 Program /System/Library/LaunchDaemons/*diskarb*</span><br><span class="line">ps -ef | grep diskarbitration | <span class="built_in">head</span> -n1</span><br></pre></td></tr></table></figure>ACLs &amp; Attributes<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">chmod</span> +a <span class="string">&quot;admin allow write&quot;</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">ls</span> -le <span class="built_in">test</span></span><br><span class="line"><span class="built_in">ls</span> -lOF /</span><br><span class="line"><span class="comment"># extended attributes</span></span><br><span class="line"><span class="built_in">ls</span> -l@</span><br><span class="line">xattr -l</span><br><span class="line">xattr -d com.apple.quarantine</span><br><span class="line">sudo xattr -r -d com.apple.quarantine</span><br></pre></td></tr></table></figure>Transparent file compression<br>ditto<br>File forks (MacOS)</li></ul><h3 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/standalone/</span><br><span class="line"><span class="built_in">ls</span> /cores -&gt; <span class="built_in">ulimit</span> -c</span><br><span class="line"><span class="built_in">ls</span> -l /dev/std*</span><br><span class="line"><span class="built_in">ls</span> -l /dev/fd</span><br><span class="line">sudo <span class="built_in">ls</span> /var/root/Library</span><br></pre></td></tr></table></figure><p>CLI binary</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo taskinfo</span><br><span class="line">sudo taskinfo firefox</span><br><span class="line">vm_stat</span><br><span class="line">sudo zprint</span><br><span class="line">man tailspin</span><br><span class="line">man pfctl</span><br><span class="line">man scutil</span><br><span class="line">man sysdiagnose</span><br></pre></td></tr></table></figure><p>[&#x2F;System]&#x2F;Library</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /System/Library/Extensions | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="built_in">ls</span> /System/Library/Fonts | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="built_in">ls</span> /System/Library/Frameworks | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="built_in">ls</span> /System/Library/QuickLook | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="built_in">ls</span> /System/Library/SpotLight | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p>&#x2F;Applications</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lsappinfo -&gt; Running</span><br><span class="line">launchctl list -&gt; com.apple</span><br><span class="line">lsappinfo find bundleid=com.apple.TextEdit</span><br><span class="line">lsappinfo find name=<span class="string">&quot;TextEdit&quot;</span></span><br><span class="line">lsappinfo info <span class="string">&quot;TextEdit&quot;</span></span><br><span class="line">lsappinfo find name=<span class="string">&quot;Sublime Text&quot;</span></span><br><span class="line">lsappinfo find bundleid=com.kingsoft.wpsoffice.mac</span><br><span class="line">lsappinfo find pid=34698</span><br></pre></td></tr></table></figure><h3 id="Guarded-Descriptors"><a href="#Guarded-Descriptors" class="headerlink" title="Guarded Descriptors"></a>Guarded Descriptors</h3><p>EXC_GUARD mach exception<br>mac_policy_syscall</p><h3 id="File-Ports"><a href="#File-Ports" class="headerlink" title="File Ports"></a>File Ports</h3><p>Mach port -&gt; BSD’s file descriptors</p><h2 id="chapter-4"><a href="#chapter-4" class="headerlink" title="chapter 4"></a>chapter 4</h2><p>UX and System Services<br>FSEvents’s main clients -&gt; SpotLight&#x2F;QuickLook<br>DUET&#x2F;printing subsystem</p><p>kevent EVFILT_VNODE -&gt; limited to individual vnodes<br>FSEvents[&#x2F;dev&#x2F;fsevents] -&gt; filesystem-wide notification<br>&#x2F;dev&#x2F;fsevents root -&gt; FSEvents.framework[fseventsd]</p><p>SpotLight -&gt; mds<br>QuickLook -&gt; qlmanage</p><p>sysctl -&gt; POSIX interface</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl hw</span><br><span class="line">sysctl machdep</span><br></pre></td></tr></table></figure><p>AppleSystemInfo.framework[private]<br>system_profile&#x2F;System Information.app -&gt; SPSupport.framework[private]<br>MobileGestalt -&gt; some ways better than its SystemProfiler plugins<br>Apple Event Manager<br>Feature Flags (Darwin 19) -&gt;  ls &#x2F;System&#x2F;Library&#x2F;FeatureFlags&#x2F;<br>&#x2F;Library&#x2F;Preferences&#x2F;SystemConfiguration -&gt; &#x2F;usr&#x2F;libexec&#x2F;configd<br>&#x2F;System&#x2F;Library&#x2F;SystemConfiguration<br>&#x2F;usr&#x2F;sbin&#x2F;scuil -&gt; </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scutil -dvr www.apple.com</span><br><span class="line">scutil -dv --nwi</span><br><span class="line">scutil --nwi</span><br><span class="line">scutil --dns</span><br></pre></td></tr></table></figure><p>Duet -&gt; &#x2F;usr&#x2F;libexec&#x2F;coreduetd<br>Activity Scheduler &#x2F;usr&#x2F;libexec&#x2F;dasd<br>NSPrintOperation  and PrintCore.framework<br>–&gt; CUPS -&gt; IPP<br>&#x2F;usr&#x2F;sbin&#x2F;cupsd<br>lpinfo -v</p><p>Voice Control -&gt; Siri<br>loginwindow&#x2F;windowserver<br>CGXServer and SLXServer<br>IOSurface [&#x2F;usr&#x2F;libexec&#x2F;hidd -&gt; CGEvent<br>-&gt; Skylight&#x2F;framework&#x2F;Resources&#x2F;WindowServer]</p><p>Revisiting touch -&gt; MultitouchSupport.framework</p><h2 id="chapter-5"><a href="#chapter-5" class="headerlink" title="chapter 5"></a>chapter 5</h2><p>Application Services<br>application installation</p><blockquote><p>.pkg -&gt; xar<br>installer -&gt; Installer.app<br>[installd&#x2F;system_installd]<br>App Store Receipts<br>Transparent Application Lifecycle (MacOS)<br>-&gt; NSSupportSuddenTermination -&gt; Info.plist<br>LaunchServices.framework<br>Ref:<a href="https://eclecticlight.co/2019/03/25/lsregister-a-valuable-undocumented-command-for-launchservices/">https://eclecticlight.co/2019/03/25/lsregister-a-valuable-undocumented-command-for-launchservices/</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump</span><br><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump | grep identifier: | <span class="built_in">wc</span> -l</span><br><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump | grep identifier: | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">sort</span> -u</span><br><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister</span><br></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;libexec&#x2F;lsd<br>launchserviced<br>&#x2F;usr&#x2F;sbin&#x2F;cfprefsd<br>Darwin Notifications(libsystem_notify)<br>&#x2F;usr&#x2F;sbin&#x2F;notifyd</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; _signal/_mach_port,file_descriptor,_diapatch</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/317738443">https://zhuanlan.zhihu.com/p/317738443</a>  iOS系统的底层通知框架库 观察者模式<br>lsmp -h<br>Lists information about mach ports</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ps -e -o pid,<span class="built_in">comm</span> | grep notifyd</span><br><span class="line">sudo <span class="built_in">kill</span> -USR2 $(pgrep notifyd)</span><br><span class="line"><span class="built_in">cat</span> /var/run/notify*.status | grep name: | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">sort</span> -u</span><br><span class="line"><span class="comment"># com.apple.system.config.network_change</span></span><br><span class="line"><span class="comment"># com.apple.system.config.network_change.dns</span></span><br><span class="line"><span class="comment"># com.apple.system.config.network_change.nwi</span></span><br><span class="line"><span class="comment"># com.apple.system.config.proxy_change</span></span><br><span class="line">notifyutil -w foo.bar -s foo.bar 123 -g foo.bar</span><br><span class="line">notifyutil -w foo.bar</span><br><span class="line">notifyutil -g foo.bar</span><br><span class="line">notifyutil -s foo.bar 123</span><br><span class="line">notifyutil -p foo.bar</span><br><span class="line">-w <span class="built_in">wait</span> -p post</span><br><span class="line">-s <span class="built_in">set</span> value -p get value</span><br><span class="line">notifyutil -w com.apple.system.config.network_change</span><br></pre></td></tr></table></figure><p>Distributed Notification Center[&#x2F;usr&#x2F;sbin&#x2F;distnoted]<br>Notification Proxying[&#x2F;usr&#x2F;libexec&#x2F;notification_proxy] used by lockdownd<br>Apple Push Notifications(APN)[apsd]<br>Whereas the Local notification center was process-wide and the Distributed notification center<br>was system wide, APN is Internet-borne, and thus world-wide.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep apsd</span><br></pre></td></tr></table></figure><p>&#x2F;Library&#x2F;Application Support&#x2F;ApplePushService -&gt; aps.db<br>User Notifications -&gt; must have a noticeable GUI presence<br>&#x2F;sbin&#x2F;emond (MacOS) -&gt; useful for use-generated events<br>Apple Events (MacOS) -&gt; similar to Windows’ DCOM<br>-&gt; AppleScript</p><h2 id="chapter-6"><a href="#chapter-6" class="headerlink" title="chapter 6"></a>chapter 6</h2><p>The Binary Format<br>&#x2F;usr&#x2F;lib&#x2F;dyld<br>arch -&gt; posix_spawnattr_setbinpref_np<br>MH_MAGIC<a href="0xcefaedfe/0xcffaedfe">_64</a><br>MH_CIGAM<a href="pxfeedface/0xfeedfacf">_64</a><br>__PAGEZERO exec onlyh<br>__TEXT both writable and executable, whereas *OS does not<br>__DATA&#x2F;__DATA_CONST<br>__LINKEDIT</p><h3 id="Mach-O-FileTypes"><a href="#Mach-O-FileTypes" class="headerlink" title="Mach-O FileTypes"></a>Mach-O FileTypes</h3><p>MH_EXECUTABLE&#x2F;MH_DYLINKER<br>MH_DYLIBD&#x2F;MH_BUNDLE&#x2F;MH_KEXT_BUNDLE<br>MH_OBJECT&#x2F;MH_CORE&#x2F;MH_DSYM<br>dsymutil</p><h3 id="Header-Flags"><a href="#Header-Flags" class="headerlink" title="Header Flags"></a>Header Flags</h3><p>MH_ALLOW_STACK_EXECUTION&#x2F;MH_NO_HEAP_EXECUTION<br>vm.allow_stack_exec&#x2F;vm.allow_heap_exec</p><h3 id="Load-commands-known-to-XNU"><a href="#Load-commands-known-to-XNU" class="headerlink" title="Load commands known to XNU"></a>Load commands known to XNU</h3><p>LC_SEGMENT[_64]<br>LC_UUID -&gt; proc_uuid_poliy_lookup<br>LC_UNIXTHREAD&#x2F;LC_MAIN<br>LC_LOAD_DYLINKER<br>LC_CODE_SIGNATURE<br>LC_ENCRYPTION_INFO[_64]</p><h3 id="Load-commands-known-to-dyld"><a href="#Load-commands-known-to-dyld" class="headerlink" title="Load commands known to dyld"></a>Load commands known to dyld</h3><p>LC_SYMTAB&#x2F;LC_DYSYMTAB</p><h3 id="The-library-load-commands-and-SUB-commands"><a href="#The-library-load-commands-and-SUB-commands" class="headerlink" title="The library load commands and SUB_ commands"></a>The library load commands and SUB_ commands</h3><p>LC_LAZY_LOAD_DYLIB&#x2F;LC_LOAD_WEAK_DYLIB&#x2F;LC_LOAD_UPWARD_DYLIB&#x2F;LC_REEXPORT_DYLIB<br>LC_RPATH&#x2F;LC_DYLD_INFO&#x2F;LC_DYLD_ENVIRONMENT</p><h3 id="Load-commands-serving-litte-or-no-purpose"><a href="#Load-commands-serving-litte-or-no-purpose" class="headerlink" title="Load commands serving litte or no purpose"></a>Load commands serving litte or no purpose</h3><p>LC_VERSION_MIN_MACOSX&#x2F;LC_BUILD_VERSION<br>LC_DATA_IN_CODE&#x2F;LC_FUNCTION_STARTS</p><h2 id="chapter-7"><a href="#chapter-7" class="headerlink" title="chapter 7"></a>chapter 7</h2><p>In the Darkness, Bind Them:dyld internals<br>CoreSymbolicaton.frameworkprivate]<br>__dyld_start -&gt; dyldStartup.s<br>dyldbootstrap::start<br>-&gt; mach_init&#x2F;mach_task_self&#x2F;pthread_set_self</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// envp[] extension, not standard</span></span><br><span class="line"><span class="comment">// apple[] darwin only</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[], <span class="type">char</span>* envp[], <span class="type">char</span>* apple[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; apple[i]; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Apple[%d]: %s\n&quot;</span>, i, apple[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exec_add_apple_strings()<br>dyld::_main()</p><blockquote><p>csops(2) system call<br>dyld shared cache<br>DYLD_PRINT_LIBRARIES&#x3D;1 is useful to display image loading</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># man dyld</span></span><br><span class="line">DYLD_PRINT_LIBRARIES=1 ./a.out</span><br><span class="line">DYLD_PRINT_OPTS=1 ./a.out</span><br><span class="line">DYLD_PRINT_SEGMENTS=1 ./a.out</span><br><span class="line">DYLD_PRINT_INITIALIZERS=1 ./a.out</span><br><span class="line">DYLD_PRINT_ENV</span><br><span class="line">DYLD_PRINT_BINDINGS</span><br><span class="line">DYLD_PRINT_APIS</span><br><span class="line">DYLD_PRINT_LOADERS</span><br><span class="line">DYLD_PRINT_SEARCHING</span><br></pre></td></tr></table></figure><p>[not for restrited binary <a href="https://qa.1r1g.com/sf/ask/2773668061/]">https://qa.1r1g.com/sf/ask/2773668061/]</a><br>_dyld_stub_binder -&gt; __DATA.__nl_symbol_ptr</p><blockquote><p>Bind Info:__DATA.__got and __DATA.__nl_symbol_ptr<br>Lazy Info: __DATA.__la_symbol_ptr<br>Weak Info</p></blockquote><h3 id="Rebasing-Opcodes"><a href="#Rebasing-Opcodes" class="headerlink" title="Rebasing Opcodes"></a>Rebasing Opcodes</h3><p>ASLR</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mach-o/loader.h&gt;</span><br></pre></td></tr></table></figure><h3 id="The-CoreSymbolication-framework"><a href="#The-CoreSymbolication-framework" class="headerlink" title="The CoreSymbolication.framework"></a>The CoreSymbolication.framework</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mach-o/nlist.h&gt;</span><br></pre></td></tr></table></figure><p>liblorgnette<br>man symbols</p><h3 id="Interposing"><a href="#Interposing" class="headerlink" title="Interposing"></a>Interposing</h3><p>DYLD_INTERPOSE<br>__DATA.__interpose<br>–&gt; Linux LD_PRELOAD&#x2F;dlsym(RTLD_NEXT, …)<br>MacOS’s libgmalloc(3)<br>DYLD_PRINT_INTERPOSING<br>dyld_dynamic_interpose</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_dyld_shared_cahce</span><br><span class="line"><span class="comment">// Exists in Mac OS X 10.11 and later</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span>* <span class="title">dyld_shared_cache_file_path</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Overriding-the-SLC"><a href="#Overriding-the-SLC" class="headerlink" title="Overriding the SLC"></a>Overriding the SLC</h3><p>DYLD_SHARED_REGION</p><h3 id="Darwin17-dyldv3"><a href="#Darwin17-dyldv3" class="headerlink" title="Darwin17:dyldv3"></a>Darwin17:dyldv3</h3><p>macos 10.13<br>DYLD Closures</p><h3 id="Programmatic-manipulation-of-Mach-o-objects"><a href="#Programmatic-manipulation-of-Mach-o-objects" class="headerlink" title="Programmatic manipulation of Mach-o objects"></a>Programmatic manipulation of Mach-o objects</h3><p>libmacho.dylib</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mach-o/getsect.h&gt;</span><br><span class="line">getsectbyname</span><br><span class="line">getsectdata</span><br><span class="line">&lt;mach-o/arch.h&gt;</span><br><span class="line">NXFindBestFatArch[_64]</span><br><span class="line">NXGet*ArchInfo*rc</span><br><span class="line">&lt;mach-o/swap.h&gt;</span><br><span class="line">swap-*</span><br></pre></td></tr></table></figure><p>libdyld.dylib<br>dl* APIS dlopen&#x2F;dladdr&#x2F;dlsym&#x2F;dlclose<br>dldl* specific APIs <code>_dyld_image_count</code><br>libdscsym.dylib<br>machlibd</p><h3 id="Remote-inspection-of-dyld-state"><a href="#Remote-inspection-of-dyld-state" class="headerlink" title="Remote inspection of dyld state"></a>Remote inspection of dyld state</h3><p>task_set_dyld_info()</p><h3 id="Debugging-and-tracing-dyld-operations"><a href="#Debugging-and-tracing-dyld-operations" class="headerlink" title="Debugging and tracing dyld operations"></a>Debugging and tracing dyld operations</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /usr/lib/dyld | grep ^DYLD_ | sort -u</span><br></pre></td></tr></table></figure><p>DYLD_PRINT_STATISTICS<br>undocumented<br>x DYLD_PRINT_APIS_APP<br>x DYLD_PRINT_WEAK_BINDINGS<br>x DYLD_PRINT_CODE_SIGNATURES<br>DYLD_PRINT_NOTIFICATIONS<br>DYLD_PRINT_INTERPOSING<br>x DYLD_PRINT_STATISTICS_DETAILS<br>x DYLD_PRINT_WARNINGS<br>x DYLD_PRINT_LIBRARIES_POST_LAUNCH</p><h3 id="Kdebug-codes"><a href="#Kdebug-codes" class="headerlink" title="Kdebug codes"></a>Kdebug codes</h3><p>task_register_dyld_image_infos<br>task_unregister_dyld_image_infos<br>task_get_dyld_image_infos<br>task_register_dyld_shared_cache_image_info<br>task_register_dyld_set_dyld_state<br>task_register_dyld_get_process_state</p><h2 id="chapter-8"><a href="#chapter-8" class="headerlink" title="chapter 8"></a>chapter 8</h2><p>Parts of the process: Threads and GCD</p><h3 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top -H <span class="comment"># Linux</span></span><br><span class="line">ps -M</span><br></pre></td></tr></table></figure><h3 id="Process-Lifecycle"><a href="#Process-Lifecycle" class="headerlink" title="Process Lifecycle"></a>Process Lifecycle</h3><p>system calls affecting the process lifecycle<br>exit&#x2F;fork&#x2F;vfork<br>wait4[_nocancel]<br>waitid[_nocancel]<br>posix_spawn<br>execve<br>mac_execve<br>vfork -&gt; “quick fork” without any memory copying<br>POSIX has since been expanded to allow the more modern posix_spawn(2) system call,<br>which combines the vfork(2) and execve(2) call into one, more efficient operation.<br>posix_spawnattr_set* APIs</p><h3 id="Process-Identifiers-and-Grouping"><a href="#Process-Identifiers-and-Grouping" class="headerlink" title="Process Identifiers and Grouping"></a>Process Identifiers and Grouping</h3><p>getpid&#x2F;getpgid&#x2F;getpgrp&#x2F;getppid<br>setpgrp&#x2F;setpgid&#x2F;setsid</p><h3 id="Coalitions-Darwin-14"><a href="#Coalitions-Darwin-14" class="headerlink" title="Coalitions (Darwin 14+)"></a>Coalitions (Darwin 14+)</h3><h3 id="Credentials"><a href="#Credentials" class="headerlink" title="Credentials"></a>Credentials</h3><p>uid&#x2F;groups&#x2F;tid</p><h3 id="Personae-OS"><a href="#Personae-OS" class="headerlink" title="Personae (*OS)"></a>Personae (<code>*OS</code>)</h3><h3 id="Signals"><a href="#Signals" class="headerlink" title="Signals"></a>Signals</h3><p>kill&#x2F;sigaction<br>sigprocmask&#x2F;sigpending<br>sigaltstack&#x2F;sigsuspend&#x2F;sigreturn<br>sigwait<br>pthread_kill -&gt; pthread_cancel</p><h3 id="Pthreads"><a href="#Pthreads" class="headerlink" title="Pthreads"></a>Pthreads</h3><p>Non-POSIX extensions <code>_np</code><br>pthread_cond_signal_thread_np<br>pthread_create_suspended_np</p><h4 id="Thread-lifecycle"><a href="#Thread-lifecycle" class="headerlink" title="Thread lifecycle"></a>Thread lifecycle</h4><p>Introspection -&gt; pthread_introspection_hook_install<br>Thread Specific Data (TSD)<br>Thread Local Variables<br>__DATA.__thread_vars&#x2F;__DATA.__thread_bss</p><h4 id="Thread-Priorities-and-QoS-Classees"><a href="#Thread-Priorities-and-QoS-Classees" class="headerlink" title="Thread Priorities and QoS Classees"></a>Thread Priorities and QoS Classees</h4><p>Priority&#x2F;IO Throughput&#x2F;CPU Throughput<br>Timer Latency&#x2F;Network Traffic</p><h3 id="Process-Task-amp-Thread-Policies"><a href="#Process-Task-amp-Thread-Policies" class="headerlink" title="Process, Task &amp; Thread Policies"></a>Process, Task &amp; Thread Policies</h3><p>Process Policies -&gt; process_policy<br>proc_rlimit_control<br>iopolicysys<br>Task Policies -&gt; task_policy<br>Thread Policy<br>THREAD_BACKGROUND_POLICY -&gt; <code>*OS</code><br>Thread level QoS -&gt; bsdthread_ctl<br>psynch -&gt; pthread synchronization<br>Ulocks(Darwin 17+) -&gt; os_unfair_lock<br>os_atomic_cmpxchg2o&#x2F;ulock_wait&#x2F;ulock_wake<br>-&gt; turnstile(Darwin 18)</p><h3 id="Interiude-kevents-and-kqueues"><a href="#Interiude-kevents-and-kqueues" class="headerlink" title="Interiude: kevents and kqueues"></a>Interiude: kevents and kqueues</h3><h3 id="Grand-Central-Dispatched"><a href="#Grand-Central-Dispatched" class="headerlink" title="Grand Central Dispatched"></a>Grand Central Dispatched</h3><p>thread pool with scheduler</p><figure class="highlight cpp"><figcaption><span>libdispatch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DISPATCH_INVOKE_STEALING= <span class="number">0x00000001</span>,</span><br><span class="line">DISPATCH_INVOKE_WLH= <span class="number">0x00000002</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> HAVE_PTHREAD_WORKQUEUE_QOS</span></span><br><span class="line">DC_WORKLOOP_STEALING_TYPE,</span><br><span class="line">DC_OVERRIDE_STEALING_TYPE,</span><br><span class="line">DC_OVERRIDE_OWNING_TYPE,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>dispatch_queue_create<br>Blocks -&gt; like coroutine?<br>Queues -&gt; scheduler<br>dispatch_suspend&#x2F;dispatch_resume<br>dispatch_sync&#x2F;dispathc_async<br>Dispatch queues are well integrated into CFRunLoops.<br>Pure GCD programs,(no other CFRunLoop or UI main thread), call dispatch_main<br>Queue Attributes<br>Queue maintennace -&gt; kernel work queues<br>Dispatching blocks<br>Continuations -&gt; CPS? [<a href="https://www.zhihu.com/question/61222322">https://www.zhihu.com/question/61222322</a> 什么是「continuation」?]<br>A key concept driving GCD is coninuations.The term refers to a stateless function,<br>which can be resumed immmediatelt, and requires not stack space.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DISPATCH_CONTINUATION_HEADER(x)</span></span><br></pre></td></tr></table></figure><p>Dispatch objects<br><code>dispatch_object_create</code><br>block&#x2F;data&#x2F;group<br>io&#x2F;mach&#x2F;mach_msg<br>pthread_root_queue<br>queue&#x2F;semaphore(sync)&#x2F;source(event)<br>[<a href="https://github.com/apple-oss-distributions/WTF/blob/main/wtf/cocoa/WorkQueueCocoa.cpp]">https://github.com/apple-oss-distributions/WTF/blob/main/wtf/cocoa/WorkQueueCocoa.cpp]</a><br>os_mpsc_queue(Multi Producer Single Consumer)<br>#pragma mark os_mpsc_queue<br>Dispatch Sources<br>Dispatch sources hide their underlying implementation - kevents - from their callers.<br>DISPATCH_INTROSPECTION -&gt; &#x2F;usr&#x2F;lib&#x2F;system&#x2F;introspection<br>dispatch_introspection_hooks_install<br>kdebug codes -&gt; DBG_LIBDISPATCH</p><h2 id="chapter-9"><a href="#chapter-9" class="headerlink" title="chapter 9"></a>chapter 9</h2><p>Process Virtual Memory</p><h3 id="On-the-same-page"><a href="#On-the-same-page" class="headerlink" title="On the same page"></a>On the same page</h3><p>Copy-on-Write(CoW)<br>Paging Free&#x2F;Active&#x2F;Inactive&#x2F;Speculative&#x2F;Wired<br>vm_stat(1) -&gt; host_statistics64</p><h3 id="Memory-Management-APIs"><a href="#Memory-Management-APIs" class="headerlink" title="Memory Management APIs"></a>Memory Management APIs</h3><ul><li>POSIX Memory APIs<br>madvise&#x2F;m[un]lock&#x2F;msync[_nocanel]mprotect&#x2F;m[un]map</li><li>Mach memory APIS<br>BSD system calls -&gt; Mach-base impl [vm_region-&gt;mach_vm_region]<br>vm_region&#x2F;vm_allocate&#x2F;vm_deallocate&#x2F;vm_protect<br>vm_read&#x2F;vm_read_list&#x2F;vm_write&#x2F;vm_copy&#x2F;vm_read_overwrite<br>vm_msync&#x2F;vm_behavior_set&#x2F;vm_map&#x2F;vm_remap&#x2F;vm_machine_attribute</li><li>Memory Tags<br>vmmap</li></ul><h3 id="libmalloc"><a href="#libmalloc" class="headerlink" title="libmalloc"></a>libmalloc</h3><p>The scalable (default) zone<br>Apple M1 Mac Mini<br>MALLOC_TINY 1024K 16B<br>MALLOC_SMALL 8192K 512B<br>MALLOC_MEDIUM 128M<br>MALLOC_NANO 512M<br>MALLOC_LARGE PAGE_SIZE<br>malloc_create_zone -&gt; malloc_zone_t<br>-&gt; mvm_allocate_pages -&gt; mach_vm_map<br>malloc_register_zone&#x2F;malloc_zone_malloc<br>[<a href="https://www.jianshu.com/p/f939cb8c4635">https://www.jianshu.com/p/f939cb8c4635</a> iOS底层系列08 – malloc与calloc源码分析]</p><h4 id="Zone-APIs"><a href="#Zone-APIs" class="headerlink" title="Zone APIs"></a>Zone APIs</h4><p><code>#include &lt;malloc/malloc.h&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">malloc_zone_t</span> *<span class="title">malloc_zone_from_ptr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr)</span></span>;</span><br><span class="line">    <span class="comment">/* Returns the zone for a pointer, or NULL if not in any zone.</span></span><br><span class="line"><span class="comment">    The ptr must have been returned from a malloc or realloc call. */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">size_t</span> <span class="title">malloc_size</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr)</span></span>;</span><br><span class="line">    <span class="comment">/* Returns size of given ptr */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">size_t</span> <span class="title">malloc_good_size</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="comment">/* Returns number of bytes greater than or equal to size that can be allocated without padding */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *<span class="title">malloc_get_zone_name</span><span class="params">(<span class="type">malloc_zone_t</span> *zone)</span></span>;</span><br><span class="line">    <span class="comment">/* Returns the name of a zone */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********Functions for performance tools************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">kern_return_t</span> <span class="title">malloc_get_all_zones</span><span class="params">(<span class="type">task_t</span> task, <span class="type">memory_reader_t</span> reader, <span class="type">vm_address_t</span> **addresses, <span class="type">unsigned</span> *count)</span></span>;</span><br><span class="line">    <span class="comment">/* Fills addresses and count with the addresses of the zones in task;</span></span><br><span class="line"><span class="comment">    Note that the validity of the addresses returned correspond to the validity of the memory returned by reader */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********Debug helpers************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">malloc_zone_print_ptr_info</span><span class="params">(<span class="type">void</span> *ptr)</span></span>;</span><br><span class="line">    <span class="comment">/* print to stdout if this pointer is in the malloc heap, free status, and size */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">boolean_t</span> <span class="title">malloc_zone_check</span><span class="params">(<span class="type">malloc_zone_t</span> *zone)</span></span>;</span><br><span class="line">    <span class="comment">/* Checks zone is well formed; if !zone, checks all zones */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">malloc_zone_print</span><span class="params">(<span class="type">malloc_zone_t</span> *zone, <span class="type">boolean_t</span> verbose)</span></span>;</span><br><span class="line">    <span class="comment">/* Prints summary on zone; if !zone, prints all zones */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">malloc_zone_statistics</span><span class="params">(<span class="type">malloc_zone_t</span> *zone, <span class="type">malloc_statistics_t</span> *stats)</span></span>;</span><br><span class="line">    <span class="comment">/* Fills statistics for zone; if !zone, sums up all zones */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">malloc_zone_log</span><span class="params">(<span class="type">malloc_zone_t</span> *zone, <span class="type">void</span> *address)</span></span>;</span><br><span class="line">    <span class="comment">/* Controls logging of all activity; if !zone, for all zones;</span></span><br><span class="line"><span class="comment">    If address==0 nothing is logged;</span></span><br><span class="line"><span class="comment">    If address==-1 all activity is logged;</span></span><br><span class="line"><span class="comment">    Else only the activity regarding address is logged */</span></span><br></pre></td></tr></table></figure><h4 id="In-the-Zone"><a href="#In-the-Zone" class="headerlink" title="In the Zone"></a>In the Zone</h4><p>The Magazine layer<br>The Hoard allocator</p><h4 id="Magazines"><a href="#Magazines" class="headerlink" title="Magazines"></a>Magazines</h4><p>The Nanov2 Zone (Darwin 18+)<br>The Purgeable Zone<br>libcache</p><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><p>MallocHelp&#x3D;1<br>kdebug codes -&gt; MallocTracing -&gt; DBG_UMALLOC</p><h4 id="SamplingTools"><a href="#SamplingTools" class="headerlink" title="SamplingTools"></a>SamplingTools</h4><p>aots&#x2F;filtercalltree<br>heap&#x2F;leaks&#x2F;malloc_history<br>sample&#x2F;stringdups&#x2F;symbols&#x2F;vmmap</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MallocStackLogging=1 ./cpp20</span><br><span class="line">malloc_history -callTree cpp20</span><br><span class="line">MallocStackLogging=1 ./a.out</span><br><span class="line">heap ./a.out</span><br><span class="line">symbols ./a.out</span><br><span class="line">MallocStackLogging=1 leaks -quiet -atExit --  ./a.out</span><br><span class="line">sample cpp20 1 -file sample.txt</span><br><span class="line">filtercalltree sample.txt -i</span><br><span class="line">malloc_history -callTree cpp20 &gt; mhist.txt</span><br><span class="line">filtercalltree -i mhist.txt</span><br></pre></td></tr></table></figure><h3 id="libplatform-os-alloc-once"><a href="#libplatform-os-alloc-once" class="headerlink" title="libplatform(os_alloc_once)"></a>libplatform(os_alloc_once)</h3><h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><p>Dynamic paging (MacOS)<br>swapfile_pager<br>Compressed memory<br>vm_stat(1) or memory_pressure(1)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm_stat | grep ompr</span><br></pre></td></tr></table></figure><h3 id="Memory-Pressure"><a href="#Memory-Pressure" class="headerlink" title="Memory Pressure"></a>Memory Pressure</h3><p>MacOS:MemoryStatus<br><code>*OS</code>:Jetsam<br>The JetsamEvent reports</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults <span class="built_in">read</span> /System/Library/LaunchDaemons/com.apple.jetsamproperties.Mac.plist</span><br><span class="line">sysctl kern | egrep <span class="string">&#x27;(memoryst|jetsam)&#x27;</span></span><br><span class="line">sysctl kern | grep -E <span class="string">&#x27;(memoryst|jetsam)&#x27;</span></span><br></pre></td></tr></table></figure><p>vm_pressure_monitor<br>EVFILT_VM -&gt; kevent (util Darwin 16)<br>-&gt; DISPATCH_SOURCE_TYPE_MEMORYPRESSURE<br>libMalloc pressure handlers (Darwin 16)<br>didReceiveMemoryWarning</p><h3 id="iOS-mmaintenanced"><a href="#iOS-mmaintenanced" class="headerlink" title="iOS: mmaintenanced"></a>iOS: mmaintenanced</h3><h2 id="chapter-10"><a href="#chapter-10" class="headerlink" title="chapter 10"></a>chapter 10</h2><p>CFRun, RunLoopRun: The Darwin Runtime Environments</p><h3 id="Core-Foundation"><a href="#Core-Foundation" class="headerlink" title="[Core]Foundation"></a>[Core]Foundation</h3><p>CF* objects<br>CFString&#x2F;CFNumber&#x2F;CFAllocator<br>CFMachPort&#x2F;CFMessagePort<br>CFNotificationCenter<br>CFPasteboard&#x2F;CFRunArray<br>CFRunLoop&#x2F;CFRunLoopObserver<br>CFRunLoopSource&#x2F;CFRunLoopTimer<br>CFSocket&#x2F;CFURL&#x2F;CFStringTokenizer<br>CFUUID&#x2F;CFXMLParser&#x2F;CFTree<br>-&gt; CFRuntimeClass</p><h3 id="Run-Loops"><a href="#Run-Loops" class="headerlink" title="Run Loops"></a>Run Loops</h3><p>The runtime provides one CFRunLoop object per thread.<br>CFRunLoopRun -&gt; NSRunLoop</p><h4 id="Run-loop-sources"><a href="#Run-loop-sources" class="headerlink" title="Run loop sources"></a>Run loop sources</h4><p>CFFileDescriptor and CFSocket<br>CFMachPort&#x2F;CFMessagePort<br>CFUserNotification<br>CFRunLoopTimer</p><h4 id="Run-Loop-observers"><a href="#Run-Loop-observers" class="headerlink" title="Run Loop observers"></a>Run Loop observers</h4><p>CFRunLoopObserverCreate</p><h4 id="Putting-it-all-together-RunLoop-Run"><a href="#Putting-it-all-together-RunLoop-Run" class="headerlink" title="Putting it all together - RunLoop,Run"></a>Putting it all together - RunLoop,Run</h4><h3 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h3><h4 id="Objective-C-Library-initialization"><a href="#Objective-C-Library-initialization" class="headerlink" title="Objective-C Library initialization"></a>Objective-C Library initialization</h4><p>libSystem.B.initializer -&gt; libdispatch_init<br>-&gt; objc_init (environ_init&#x2F;tls_init&#x2F;lock_init&#x2F;execption_init<br>Register dyld Handlers)</p><h4 id="Type-Encoding"><a href="#Type-Encoding" class="headerlink" title="Type Encoding"></a>Type Encoding</h4><h4 id="Sending-messages"><a href="#Sending-messages" class="headerlink" title="Sending messages"></a>Sending messages</h4><p>objc_msgSend</p><h4 id="Message-Passing"><a href="#Message-Passing" class="headerlink" title="Message Passing"></a>Message Passing</h4><p>Reflection -&gt; class_getName&#x2F;method_getName<br>Methid Swizzling<br>Using DTrace</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objc$target:::entry</span><br><span class="line">objc$target:::<span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><h2 id="chapter-11"><a href="#chapter-11" class="headerlink" title="chapter 11"></a>chapter 11</h2><p>The Message is the Mediaum: Mach IPC</p><h3 id="A-litte-history"><a href="#A-litte-history" class="headerlink" title="A litte history"></a>A litte history</h3><p>XNU -&gt; NeXTSTEP -&gt; Mach -&gt; Mach messaging<br>port -&gt; port right [SEND&#x2F;SEND_ONCE&#x2F;RECEIVE&#x2F;DEAD_NAME]<br>mach_port_allocate&#x2F;<br>bootstrap_register&#x2F;bootstrap_lookup&#x2F;bootstrap_check_in</p><h3 id="View-Mach-Port"><a href="#View-Mach-Port" class="headerlink" title="View Mach Port"></a>View Mach Port</h3><h3 id="Sending-and-receiving-messages"><a href="#Sending-and-receiving-messages" class="headerlink" title="Sending and receiving messages"></a>Sending and receiving messages</h3><p>mach_msg&#x2F;mach_msg_overwrite</p><h3 id="The-Mach-Interface-Generator"><a href="#The-Mach-Interface-Generator" class="headerlink" title="The Mach Interface Generator"></a>The Mach Interface Generator</h3><p>The original SunRPC use rpcgen,<br>Windows’ RPC uses midl, Android use iadl -<br>and Mach uses the Mach Interface Generator, commonly referred to as MID.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kdv all | grep MID</span><br></pre></td></tr></table></figure><p><code>_NDR_RECORD</code></p><h2 id="chapter-12"><a href="#chapter-12" class="headerlink" title="chapter 12"></a>chapter 12</h2><p>Mach Primitives</p><h3 id="Ports-as-object-abstactions"><a href="#Ports-as-object-abstactions" class="headerlink" title="Ports as object abstactions"></a>Ports as object abstactions</h3><ul><li>The Host port<br>host_info&#x2F;host_kernel_version<br>host_processor_info<br>host_get_io_master<br>host_get_clock_service<br>host_statistics64<br>mach_zone_info<br>mach_memory_info<br>mach_zone_info_for_zone</li><li>The Host_Priv port<br>host_get_boot_info&#x2F;host_reboot</li><li>Task ports<br>task_for_pid&#x2F;pid_for_task<br>task_inspect (Darwin 17)<br>vm_map&#x2F;mach_vm -&gt; like Windows’ [Read&#x2F;Write]ProcessMemory<br>-&gt; ptrace Linux and other UNIX<br>With great power…<br>ps(1) top(1) com.apple.system-task-ports</li><li>Task special ports</li><li>Thread Ports<br>task_threads&#x2F;processor_set_threads<br>processor_info&#x2F;processor_set_things<br>processor_set_statistics&#x2F;processor_set_info</li></ul><h3 id="Execption-Ports"><a href="#Execption-Ports" class="headerlink" title="Execption Ports"></a>Execption Ports</h3><p>ReportCrash(8)<br>Exception codes and subcodes<br>&lt;mach&#x2F;exception_types.h&gt;<br>mach_msg_server<br>task_set_exception_ports&#x2F;host_set_exception_ports</p><h2 id="chapter-13"><a href="#chapter-13" class="headerlink" title="chapter 13"></a>chapter 13</h2><p>The Alpha and the Omega: Launchd<br>The daemon’s many roles - process launcher and reaper, system monitor,<br>job scheduler, and bootstrap server - make it a focal point for a large number of<br>system workflows, and thus important to understand.</p><h3 id="Born-Again"><a href="#Born-Again" class="headerlink" title="Born Again"></a>Born Again</h3><p>launchd 10.4 &lt;- mach_init(Mach subsystem)&#x2F;init(BSD subsystem)<br>atd(scheduled execution) at&#x2F;atq&#x2F;atrm&#x2F;batch<br>crond (scheduled recurring execuution)<br>inetd&#x2F;xinetd</p><h3 id="Triggered-execuation"><a href="#Triggered-execuation" class="headerlink" title="Triggered execuation"></a>Triggered execuation</h3><p>WatchPaths<br>IOKit Notifications<br>Other (third paryt) events</p><h3 id="Interlude-UserEventAgent"><a href="#Interlude-UserEventAgent" class="headerlink" title="Interlude: UserEventAgent"></a>Interlude: UserEventAgent</h3><h3 id="Agents-and-Daemons"><a href="#Agents-and-Daemons" class="headerlink" title="Agents and Daemons"></a>Agents and Daemons</h3><p>Agents are daemons that are started only when a user logs on.<br>Unlike other daemons, they may interface with the user, and may in fact have a GUI.</p><h3 id="launchctl"><a href="#launchctl" class="headerlink" title="launchctl"></a>launchctl</h3><p>xpc_bootstrap_pipe<br>xpc_pipe_routine</p><h3 id="The-XPC-bootstrap-pipe"><a href="#The-XPC-bootstrap-pipe" class="headerlink" title="The XPC bootstrap pipe"></a>The XPC bootstrap pipe</h3><p>Service&#x2F;Doamin&#x2F;Event&#x2F;Bootstrap&#x2F;VProc&#x2F;Launch&#x2F;Jetsam<br>liblaunch.dylib -&gt; launch_msg<br>ServiceManagement.framework deprecated</p><h2 id="chapter-14"><a href="#chapter-14" class="headerlink" title="chapter 14"></a>chapter 14</h2><p>X is not Procedure Call: XPC Internals</p><h3 id="Design-Rationle"><a href="#Design-Rationle" class="headerlink" title="Design Rationle"></a>Design Rationle</h3><p>Apple touts XPC as providing “a lightweight mechnism for basic interprocess communcation<br>intergrated with Grand Central Dispatch(GCD) and launchd”.<br>XPC APIs<br>xpc* -&gt; libxpc.dylib<br>NSXPCConnection&#x2F;NSXPCListener</p><h3 id="XPC-Transport-APIs"><a href="#XPC-Transport-APIs" class="headerlink" title="XPC Transport APIs"></a>XPC Transport APIs</h3><p>xpc_pipe<br>RemoteXPC.framework<br>-&gt; libnetwork’s nw_connection<br>&#x2F;usr&#x2F;libexec&#x2F;remotectl<br>netstat&#x2F;nettop</p><ul><li>Tracing Remote XPC with XPoCe 2<br>XCP service -&gt; xpc_main</li><li>Tracing xpcproxy with supraudit(j)<br>XPC caches -&gt; XPC bundles</li><li>Tracing XPC<br>kdebug&#x2F;dtrace&#x2F;XPoCe</li></ul><h2 id="chapter-15"><a href="#chapter-15" class="headerlink" title="chapter 15"></a>chapter 15</h2><p>Follow Me: Tracing &amp; Debugging<br>XCode’s Instruments.app provides a fine example of just how powerful<br>some of these (notablt, DTrace and Kdebug) are.</p><h2 id="chapter-16"><a href="#chapter-16" class="headerlink" title="chapter 16"></a>chapter 16</h2><p>Het-work: Darwin Networking</p><hr><ul><li>POSIX aio<br>aio_write</li><li>Native aio (Linux libaio)<br>io_submit<br>aio io_uring interface</li><li>Windows IOCP</li><li>macOS GCD aio</li></ul><p>sendfile<br>In Linux kernels before 2.6.33, out_fd must refer to a  socket.   Since<br>       Linux  2.6.33  it can be any file.  If it is a regular file, then send‐<br>       file() changes the file offset appropriately.</p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX与iOS内核编程 笔记</title>
      <link href="/2023/06/27/osx-and-ios-kernel/"/>
      <url>/2023/06/27/osx-and-ios-kernel/</url>
      
        <content type="html"><![CDATA[<p>OS.X and iOS Kernel Programming.md<br><a href="https://github.com/Apress/os-x-ios-kernel-programming">https://github.com/Apress/os-x-ios-kernel-programming</a><br><a href="https://github.com/knightsc/osx_and_ios_kernel_programming">https://github.com/knightsc/osx_and_ios_kernel_programming</a></p><h2 id="Memory-Allocation-in-Mach"><a href="#Memory-Allocation-in-Mach" class="headerlink" title="Memory Allocation in Mach"></a>Memory Allocation in Mach</h2><p>kmem_alloc&#x2F;kmem_alloc_contig&#x2F;kmem_free</p><p>The I&#x2F;O Kit framework consists of the kernel level framework, as well as a user space framework called IOKit.framework.<br>The kernel framework is written in Embedded C++, a subset of C++, whereas the user space framework is C-based.</p><p>In the case of a USB-based storage device, it might depent on the IOUSBFamily, as well as<br>the IOStorageFamily.</p><p>In addition to standard C++ runtime, libkern also provides a number of useful classes, the<br>most fundamental being OSObject, the superclass of every class in I&#x2F;O kit.</p><p>The platform expert itself will form the root node of the tree, IOPlatformExpertDevice.</p><h1 id="chapter-3"><a href="#chapter-3" class="headerlink" title="chapter 3"></a>chapter 3</h1><p>Xcode and the Kernel Development Environment<br>The features that are not available include the following:<br>Exceptions&#x2F;Multiple inheritance&#x2F;Templates&#x2F;Runtime type information</p><ul><li>Although both templates create a kernel extension, an I&#x2F;O Kit driver reuires us to nominate<br>a hardware device it will match against and will load only if that device is present.<br>A generic kernel extension, on the other hand, is not a hardware driver and can be loaded<br>any time by the user</li><li>Rather than a compile-time linking, the kernel resolves any library dependencies of a kernel<br>extension only when the kernel extension is loaded.</li><li>Version 9.0.0 corresponds to Mac OS X 10.5.0, the version of the Mac OS X kernel.[uname -r]</li></ul><h1 id="chapter-4"><a href="#chapter-4" class="headerlink" title="chapter 4"></a>chapter 4</h1><p>The I&#x2F;O Kit Framework<br>Kernel.framework&#x2F;IOKit.framework</p><ul><li>The kernel will refuse to load an extension that contains symbols that collide with an<br>extension that is already loaded, and so to avoid this, Apple recommends that all global<br>functions, classes, and variables are decorated with a reverse-DNS namming scheme.</li><li>Thankfully, the I&#x2F;O Kit provides a special nub known as IOResources that can be used as<br>the provider class of a driver that has no hardware device, such as the tutorial driver lised<br>here. In a system, there will be multiple drivers matching against the IOResources nub, and<br>so to allow more than one driver to attach itself to IOResources, the IOMatchCategory key in<br>the drivers’s matching dictionary must be defined.</li><li>Unlike the Windows Registry, the I&#x2F;O Registry is never written to disk or saved between<br>reboots of the computer.</li><li>include the macro OSDeclareDefaultDestructors()</li><li>OSSymbol(which is a subclass of OSString). When a new instance of OSSymbol is created, the constructor checks for an existing OSSymbol object that contains the same string value, and if<br>one is found, returns an instance of the existing object rather than creating a new instance.</li><li>All libkern container classes can be iterated over using the class OSCollectionIterator.</li></ul><h1 id="chapter-5"><a href="#chapter-5" class="headerlink" title="chapter 5"></a>chapter 5</h1><p>Interacting with Drivers from Applications</p><ul><li>In the kernel, a driver that provides a serial port will create an instance of the standard<br>I&#x2F;O Kit class IOSerialStreamSync. The I&#x2F;O Kit’s serial family will create a device node in<br>the &#x2F;dev directory, publishing the path of the node in the I&#x2F;O Registry so that applications<br>can find it.[#define super IOSerialDriverSync] -&gt; IOSerialBSDClient</li><li>IOServiceMatching&#x2F;IOServiceGetMatchingServices&#x2F;IOIteratorNext<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">notificationPort = <span class="built_in">IONotificationPortCreate</span>(kIOMasterPortDefault);</span><br><span class="line">runLoopSource = <span class="built_in">IONotificationPortGetRunLoopSource</span>(notificationPort);</span><br><span class="line"><span class="built_in">CFRunLoopAddSource</span>(<span class="built_in">CFRunLoopGetCurrent</span>(), runLoopSource, kCFRunLoopDefaultMode);</span><br><span class="line"></span><br><span class="line">kr = <span class="built_in">IOServiceAddMatchingNotification</span>(notificationPort, kIOFirstMatchNotification, matchingDict, DeviceAdded, <span class="literal">NULL</span>, &amp;iter);</span><br><span class="line"><span class="built_in">DeviceAdded</span>(<span class="literal">NULL</span>, iter);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFRunLoopRun</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">IONotificationPortDestroy</span>(notificationPort);</span><br></pre></td></tr></table></figure></li><li>IOServiceAddInterestNotification<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kIOGeneralInterest</span></span><br><span class="line"><span class="keyword">if</span> (messageType == kIOMessageServiceIsTerminated)</span><br></pre></td></tr></table></figure></li><li>Modifying Driver Properties</li><li>State-Based Interaction<br>To establish a connection to a driver, an application simply has to call the function IOServiceOpen(). -&gt; IOUserClient<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">custom_IOUserClient_class::start</span><span class="params">(IOService *provider)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FlockFlockClient::start client start\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (! super::<span class="built_in">start</span>(provider))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    m_driver = <span class="built_in">OSDynamicCast</span>(custome_IOService_class_ptr, provider);</span><br><span class="line">    <span class="keyword">if</span> (!m_driver)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>IOConnectCallScalarMethod<br>IOConnectCallStructMethod<br>IOConnectCallMethod</li><li>Unlike the Windows driver model, which, unless explicitly enabled, does not allow an<br>application to send multiple control requests to a driver simultaneously, the I&#x2F;O Kit<br>allows as many threads to send requests to a user client as the application requires.</li><li>Allocating a Port on Which an Application Can Receive Notifications When an Asynchronous<br>Operation Completes</li><li>The I&#x2F;O Kit framework provides asynchronous variations of each of the IOConnectCallXXX()<br>functions named IOConnectCallAsyncXXX(). The asynchronoues form of these functions take<br>additional arguments, including a notification port, a callback function, and a context<br>parameter that is passed to the callback function.<br>IOConnectCallAsyncScalarMethod -&gt; sendAsyncResult64</li><li>To prevent the user client object from being released while the operation is in progress,<br>the method increments its retain count when starting the operation and decrements its retain<br>count when the operatin completes. Finally, when the background operation hash completed, the<br>user client (or driver) signals the user application by calling sendAsyncResult64().<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IOReturn</span><br><span class="line">IOUserClient::_sendAsyncResult64 -&gt;</span><br><span class="line">mach_msg_send_from_kernel_with_options/mach_msg_send_from_kernel_proper</span><br><span class="line">-&gt; kernel_mach_msg_send</span><br></pre></td></tr></table></figure></li></ul><h1 id="chapter-6"><a href="#chapter-6" class="headerlink" title="chapter 6"></a>chapter 6</h1><p>Memory Mangement</p><ul><li>In fact, if you use I&#x2F;O Kit, it will do all the required translations for you automatically<br>if you use IOMemoryDescriptor, which is discussed later in this chapter.</li><li>All current-generation Macs are litter-endian, as the Intel x86&#x2F;x86_64 processors are little-endiansl; so too are ARM-based iOS devices. The older PowerPC-based Macs were big-endian.<br>vm_page_grab&#x2F;vm_page_alloc</li><li>As a kernel programmer, you can create your own zones with the zinit() function if you have<br>a need for frequent and fast allocation and de-allocation of data objects of the same type. To create a new zonem you need to tell the allocator the size of the object, the maximum size of the queue, and the allocation size, which specifies how mush memory will be added when zone is exhausted.</li><li>The kalloc family provides a slightly higher-level interface for fast memory allocation.</li><li>The kalloc functions and variants, except kalloc_noblock(), may block (sleep) to obtain memory. The same is true for the kfree() function. Therefore, you must use kalloc_noblock() if you need memory in an interrupt context or while holding a simple lock.</li></ul><h2 id="I-x2F-O-Kit-Memory-Allocation"><a href="#I-x2F-O-Kit-Memory-Allocation" class="headerlink" title="I&#x2F;O Kit Memory Allocation"></a>I&#x2F;O Kit Memory Allocation</h2><p>IOMalloc&#x2F;IOMallocAligned&#x2F;IOMallocPageable<br>There is also a last variant, IOMallocContiguous(), that allocates memory that is physically contiguous. Its use is now deprecated. Apple recommends using IOBufferMemoryDescriptor instead.</p><h3 id="Mapping-Memory-from-a-User-Space-Task-into-Kernel-Space"><a href="#Mapping-Memory-from-a-User-Space-Task-into-Kernel-Space" class="headerlink" title="Mapping Memory from a User Space Task into Kernel Space"></a>Mapping Memory from a User Space Task into Kernel Space</h3><p>Note: It is not necessary to map memory into the kernel unless the kernel needs to actively modify it. If DMA is performed from a user space buffer and the data in the buffer does not have to be modified by the kernel, it is not necessary to map it into the kernel’s address space, the buffer can be transferred directly to a hardware device. See Chaptr 9 for more information about DMA.</p><h3 id="Mapping-Memory-form-the-Kernel-to-a-User-Space-Task"><a href="#Mapping-Memory-form-the-Kernel-to-a-User-Space-Task" class="headerlink" title="Mapping Memory form the Kernel to a User Space Task"></a>Mapping Memory form the Kernel to a User Space Task</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOConnectMapMemory -&gt; kIOMapAnyWhere</span><br></pre></td></tr></table></figure><h3 id="Mapping-Memory-to-a-Specific-User-Space-Task"><a href="#Mapping-Memory-to-a-Specific-User-Space-Task" class="headerlink" title="Mapping Memory to a Specific User Space Task"></a>Mapping Memory to a Specific User Space Task</h3><p>Apple recommends not mapping memory obtained from functions such as IOMalloc() and IOMallocAligned() (though it is possible using the latter) because they come from the zone allocator, which is intended for private and temporary allications and not for sharing. The recommended way of mapping memory is to use the IOBuferMemoryDescriptor, a subclass of IOMemoryDescriptor that also allocates memory.</p><h1 id="chapter-7"><a href="#chapter-7" class="headerlink" title="chapter 7"></a>chapter 7</h1><p>Synchronization and Threading</p><ul><li>Atomic Operations Provides By the Libkern Framework [libkern&#x2F;OSAtomic.h]<br>OS[Increment&#x2F;Decrement&#x2F;Add&#x2F;BitAnd&#x2F;BitOr&#x2F;BitXor]Atomic<br>OSCompareAndSwap&#x2F;OSTestAndSet&#x2F;OSTestAndClear</li><li>An Implementation of Object Reference Counting in a Multithreaded Environment<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Object::retain</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">OSIncrementAtomic</span>(&amp;retainCount);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Object::release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> originalValue;</span><br><span class="line">originalValue = <span class="built_in">OSDecrementAtomic</span>(&amp;retainCount);</span><br><span class="line"><span class="keyword">if</span> (originalValue == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">free</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>The compare and swap function can be used to build more complex atomic operations.<br>Note: All atomic operations, such as OSAddAtomoc(), OSIncrementAtomic(), and OSBitOrAtomic() can be implemented using only OSCompareAndSwap(). In face, a number of atomic functions provided by the libkern library are implemented this way, including all bitwise atomic operations and the 8-bit and 16-bit variations of each operation, which perform a compare and swap on the full 32-bit word containing the value being modified.</li><li>Locking<br>IOSimpleLock -&gt; spin lock<br>IOLock -&gt; traditional mutex<br>IORecursiveLock<br>IORWLock</li><li>Unlike a mutex, an IOSimpleLock will never suspend the running thread. Instead it will spin until the lock becomes available. This makes IOSimpleLock perfect for providing synchronization between code that runs within a primiary interrupt handler and non-interrupt code. In reality, this functionality is rarely needed within an I&#x2F;O Kit driver since most drivers won’t ever have to hanlde an interrupt directly and, if they do, most will defer the interrupt to a secondary intterupt handler. The I&#x2F;O Kit provides other locking mechanisms that are appropriate for secondary interrupt handles, which are discussed later in this chapter.</li><li>Mutex. Because a mutex may block if it cannot be acquired immediately, mutex locks cannot be used within an interrupt handler.</li><li>Condition Variables<br>IOLockSleep&#x2F;IOLockWakeup<br>The behavior of IOLockSleep() is similar to that of its equivalent user space function pthread_cond_wait.</li><li>Condition variables in the I&#x2F;O Kit do not have a specific type, rather a condiation variable is an arbitary void* that uniquely identifies an event. A driver will usually use the address of an instance variable (such as the address of the lock itself) as a condition varibale, since the use of an address guarantees that the value will be unique among multiple instances of the driver and other drivers in the system.</li><li>Read&#x2F;Write Mutexes<br>The I&#x2F;O Kit provides read&#x2F;write mutexes through an object known as IORWLock.</li><li>GetMachLock<br>IOSimpleLockGetMachLock -&gt; lck_spin_t<br>IOLockGetMachLock -&gt; lck_mtx_t<br>IORecursiveLockGetMachLock -&gt; lck_mtx_t<br>IORWLockGetMachLock -&gt; lck_rw_t<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">_pthread_mutex_fairshare_lock_wait -&gt;</span><br><span class="line">__psynch_mutexwait -&gt; ksyn_wait</span><br><span class="line">-&gt; pthread_kern-&gt;psynch_wait_update_complete</span><br><span class="line">-&gt; turnstile_update_inheritor_complete</span><br><span class="line"><span class="comment">// ksyn_wait type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">thread_snapshot_wait_flags</span> &#123;</span><br><span class="line">kThreadWaitNone                 = <span class="number">0x00</span>,</span><br><span class="line">kThreadWaitKernelMutex          = <span class="number">0x01</span>,</span><br><span class="line">kThreadWaitPortReceive          = <span class="number">0x02</span>,</span><br><span class="line">kThreadWaitPortSetReceive       = <span class="number">0x03</span>,</span><br><span class="line">kThreadWaitPortSend             = <span class="number">0x04</span>,</span><br><span class="line">kThreadWaitPortSendInTransit    = <span class="number">0x05</span>,</span><br><span class="line">kThreadWaitSemaphore            = <span class="number">0x06</span>,</span><br><span class="line">kThreadWaitKernelRWLockRead     = <span class="number">0x07</span>,</span><br><span class="line">kThreadWaitKernelRWLockWrite    = <span class="number">0x08</span>,</span><br><span class="line">kThreadWaitKernelRWLockUpgrade  = <span class="number">0x09</span>,</span><br><span class="line">kThreadWaitUserLock             = <span class="number">0x0a</span>,</span><br><span class="line">kThreadWaitPThreadMutex         = <span class="number">0x0b</span>,</span><br><span class="line">kThreadWaitPThreadRWLockRead    = <span class="number">0x0c</span>,</span><br><span class="line">kThreadWaitPThreadRWLockWrite   = <span class="number">0x0d</span>,</span><br><span class="line">kThreadWaitPThreadCondVar       = <span class="number">0x0e</span>,</span><br><span class="line">kThreadWaitParkedWorkQueue      = <span class="number">0x0f</span>,</span><br><span class="line">kThreadWaitWorkloopSyncWait     = <span class="number">0x10</span>,</span><br><span class="line">kThreadWaitOnProcess            = <span class="number">0x11</span>,</span><br><span class="line">kThreadWaitSleepWithInheritor   = <span class="number">0x12</span>,</span><br><span class="line">kThreadWaitEventlink            = <span class="number">0x13</span>,</span><br><span class="line">kThreadWaitCompressor           = <span class="number">0x14</span>,</span><br><span class="line">&#125; __attribute__((packed)) <span class="type">block_hint_t</span>;</span><br><span class="line"><span class="comment">// pthread_workqueue.cpp</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">event_t</span></span></span><br><span class="line"><span class="function"><span class="title">workq_parked_wait_event</span><span class="params">(<span class="keyword">struct</span> uthread *uth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">event_t</span>)&amp;uth-&gt;uu_workq_stackaddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">workq_thread_wakeup</span><span class="params">(<span class="keyword">struct</span> uthread *uth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">thread_wakeup_thread</span>(<span class="built_in">workq_parked_wait_event</span>(uth), <span class="built_in">get_machthread</span>(uth));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thread_wait -&gt; assert_wait -&gt; thread_block</span><br><span class="line">lck_mtx_sleep -&gt; assert_wait/thread_block</span><br></pre></td></tr></table></figure></li></ul><h2 id="Synchronizing-Asynchronous-Events-Work-Loops"><a href="#Synchronizing-Asynchronous-Events-Work-Loops" class="headerlink" title="Synchronizing Asynchronous Events: Work Loops"></a>Synchronizing Asynchronous Events: Work Loops</h2><p>To simplify the work required by the driver developer, the I&#x2F;O Kit provides a class known as IOWorkLoop that creates a single thread on which all asynchronous evetns are handle. In I&#x2F;O Kit nomenclature, this thread is known as a “work loop” and a driver reigster any of its asynchronous event sources, such as interrupt hanlders and timers, with an IOWorkLoop object.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IOTimerEventSource::timerEventSource</span><br><span class="line">QEventLoop::exec -&gt; QEventLoop::processEvents</span><br><span class="line">QEventLoop::WaitForMoreEvents</span><br><span class="line">mac -&gt; CFRunLoopRunInMode/<span class="built_in">IOWorkLoop</span>(driver)</span><br><span class="line">win -&gt; MsgWaitForMultipleObjectsEx</span><br><span class="line">unix -&gt; qt_safe_poll [d-&gt;pollfds.<span class="built_in">append</span>(d-&gt;threadPipe.<span class="built_in">prepare</span>());]</span><br><span class="line">glib -&gt; g_main_context_iteration</span><br></pre></td></tr></table></figure><p>An driver will typically specify a static method in its main driver class as the callback function of an IOEventSource.</p><ul><li>IOCommandGate<br>A command gate is installed on a work loop like any other event source but, instead of generating events itself, it is used to execute an arbitrary callback function on the work loop thread. [runAction()]<br>The IOCommandGate achieves its synchronization throught a recursive lock. This allows a function that has been called throught the IOCommanGate to call other functions through the same IOCommandGate without causing a deadlock.</li><li>Timers<br>IOTimerEventSource</li><li>Releasing Work Loops<br>The first part is usually performed by a driver in its stop() method, but the work loop itself is typically not released until the driver’s free() method is called.</li></ul><h2 id="Kernel-Threads"><a href="#Kernel-Threads" class="headerlink" title="Kernel Threads"></a>Kernel Threads</h2><p>In these cases, a driver can create its own kernel thread on which to continue executing code without tying up the thread of a user process or the work loop thread.<br>kernel_thread_start&#x2F;thread_deallocate&#x2F;thread_terminate<br>Note that althought it might seem that it is possible to termiate a background thread from another thread, this will fail with an error returned to the caller. The thread_termiate() function only allows the current thread to ber terminated.</p><h1 id="chapter-8"><a href="#chapter-8" class="headerlink" title="chapter 8"></a>chapter 8</h1><p>Universal Serial Bus<br>It is worth mentioning that USE drivers can bewritten both in the kernel and in user space.</p><h2 id="I-x2F-O-Kit-USB-Support"><a href="#I-x2F-O-Kit-USB-Support" class="headerlink" title="I&#x2F;O Kit USB Support"></a>I&#x2F;O Kit USB Support</h2><p>IOUSEFamily -&gt; com.apple.iokit.IOUSBFamily</p><h1 id="chapter-9"><a href="#chapter-9" class="headerlink" title="chapter 9"></a>chapter 9</h1><p>PCI Express and Thunderbolt<br>IOPCIFamily</p><h2 id="I-x2F-O-Kit-Interrupt-Mechanisms"><a href="#I-x2F-O-Kit-Interrupt-Mechanisms" class="headerlink" title="I&#x2F;O Kit Interrupt Mechanisms"></a>I&#x2F;O Kit Interrupt Mechanisms</h2><p>IOFilterInterruptEventSource&#x2F;IOInterruptEventSource</p><h3 id="Direct-Memory-Access"><a href="#Direct-Memory-Access" class="headerlink" title="Direct Memory Access"></a>Direct Memory Access</h3><h1 id="chapter-10"><a href="#chapter-10" class="headerlink" title="chapter 10"></a>chapter 10</h1><p>Power Management<br>IOPMPowerState</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wake any threads that are blocked on a power state change</span></span><br><span class="line"><span class="built_in">IOLockWakeup</span>(m_lock, &amp;m_devicePowerState, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1 id="chapter-11"><a href="#chapter-11" class="headerlink" title="chapter 11"></a>chapter 11</h1><p>Serial Port Drivers<br>It is very flexible interface. The serial driver is concrened only with transferring date bytes between the serial port and the user space application.</p><ul><li>Devices that use serial ports include GPS receivers and barcode scanners. They are also commonly used to provide debugging output on hardware.<br>IOSerialFamily</li></ul><h1 id="chapter-12"><a href="#chapter-12" class="headerlink" title="chapter 12"></a>chapter 12</h1><p>Audio Driver</p><h1 id="chapter-13"><a href="#chapter-13" class="headerlink" title="chapter 13"></a>chapter 13</h1><p>Networking</p><ul><li>Another feature of the XNU kernel is the network kernel extensions (NKE) mechanism. NKE allows filtrs to be inserted at various levels of the network stack, such as in sockets layer or IP layer. The NKE architecture allows you to write custom routing algorithms, and implment new protocols and virtual network interfaces. It can also be used for packet filtering and logging. Furthermore, the kernel supports the Berkeley Packet Filter (BPF), which allows raw network traffice to be routed to user space for analysis with tools such as tcpdump.</li></ul><h2 id="Network-Memory-Buffers"><a href="#Network-Memory-Buffers" class="headerlink" title="Network Memory Buffers"></a>Network Memory Buffers</h2><p>Network Memory Buffers, or mbufs, is a fundamental data structure in BSD UNIX systems, including Mac OS X and iOS.<br>mbuf_copydata&#x2F;mbuf_copyback</p><h2 id="Network-Kernel-Extensions"><a href="#Network-Kernel-Extensions" class="headerlink" title="Network Kernel Extensions"></a>Network Kernel Extensions</h2><p>pcap -&gt; bpf -&gt; nke&#x2F;ke</p><h1 id="chapter-14"><a href="#chapter-14" class="headerlink" title="chapter 14"></a>chapter 14</h1><p>Storge Systems<br>IOBlockStorageDevice</p><h1 id="chapter-15"><a href="#chapter-15" class="headerlink" title="chapter 15"></a>chapter 15</h1><p>User-Space USB Drivers<br>Not all hardware devices can be controlled through a user-sapce dirver; for example, devices that contains a memory-mapped address range require a kernel driver. Similarly, devices that generate interrupts need a kernel driver, since only kernel code can execute at primary interrupt level. This means that all PCI and Thunderbolt devices need to be supported by a kernel driver. However, USB- and FireWire- based hardware devices are perfect candidates for a user-space driver.</p><ul><li>An application doesn’t need to call the methods from the user client class directly; instead, the I&#x2F;O Kit framework provides a high level API to control the hardware. This API is known as IOUSELib.<br>IOCreatePlugInInterfaceForService<br>Note: If you are familiar with Microsoft’s Component Object Model (COM), you will instantly recognize the method name QueryInterface(). All IOUSBLib classes are based on the COM programming model and are derived from the base class IUnknown. The biggest impact of this design on an application using IOUSBLib is that all IOUSBLib objects are references counted; they can be retained by calling the method AddRef() and can be release by calling the method Release().</li></ul><h1 id="chapter-16"><a href="#chapter-16" class="headerlink" title="chapter 16"></a>chapter 16</h1><p>Debugging</p><h2 id="Common-Types-of-Problems"><a href="#Common-Types-of-Problems" class="headerlink" title="Common Types of Problems"></a>Common Types of Problems</h2><ul><li>Race Conditions</li><li>Deadlocks</li><li>Lock Contention</li><li>Access to Invalid Memory</li><li>Memroy and Resources Leaks</li><li>Illegal Instruction&#x2F;Operand</li><li>Blocking in Primary Interrupt Context</li><li>Volunteered Panics</li></ul><h3 id="Printing-Stack-Traces"><a href="#Printing-Stack-Traces" class="headerlink" title="Printing Stack Traces"></a>Printing Stack Traces</h3><p>IOLog&#x2F;OSReportWithBackTrace()</p><h1 id="chapter-17"><a href="#chapter-17" class="headerlink" title="chapter 17"></a>chapter 17</h1><p>Advanced Kernel Programming<br>IOServiceOpen&#x2F;CFMachPortCreate&#x2F;IOConnectSetNotificationPort&#x2F;mach_msg_send_from_kernel</p><h1 id="chapter-18"><a href="#chapter-18" class="headerlink" title="chapter 18"></a>chapter 18</h1><p>Deployment</p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS命令行</title>
      <link href="/2023/06/27/macos-cmds/"/>
      <url>/2023/06/27/macos-cmds/</url>
      
        <content type="html"><![CDATA[<p>main_service</p><p>gcore<br>get core images of running processes<br>gcore: task_read_for_pid: (null)</p><p>man ipcs<br>iperf3-darwin – perform network throughput tests</p><p>ippfind - find internet printing protocol printers</p><p>look – display lines beginning with a given string</p><p>lsbom – list contents of a bom file<br>bom – bill of materials</p><p>lskq – display process kqueue state<br>lsmp – Display mach port information for processes on the system</p><p>lsm - Latent Semantic Mapping tool<br>LatentSemanticMapping.framework</p><p>mg – emacs-like text editor</p><p>man nano<br>pico - simple text editor in the style of the Alpine Composer</p><p>nettop – Display updated information about the network<br>networkQuality – Network quality testing tool</p><p>nscurl -&gt; CFNetwork<br>what <code>which nscurl</code></p><p>opendiff – Use FileMerge to graphically compare or merge file or<br>     directories</p><p>osacompile – compile AppleScripts and other OSA language scripts</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">osalang</span><br><span class="line"><span class="comment"># AppleScript</span></span><br><span class="line"><span class="comment"># JavaScript</span></span><br><span class="line"><span class="comment"># Generic Scripting System</span></span><br></pre></td></tr></table></figure><p>pathchk – check pathnames<br>pbcopy, pbpaste - provide copying and pasting to the pasteboard (the<br>       Clipboard) from command line</p><p>pmset – manipulate power management settings</p><p>printenv – print out the environment</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printenv</span> HOME</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><p>psm – Command line interface to Apple Silicon password slot manager<br>pstopdf – convert PostScript input into a PDF document<br>qlmanage – Quick Look Server debug and management tool</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qlmanage -m</span><br></pre></td></tr></table></figure><p>rpcgen – Remote Procedure Call (RPC) protocol compiler<br>rs – reshape a data array</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jot -r 100 | rs 10 10 | <span class="built_in">tee</span> array | rs -T &gt; tarray</span><br><span class="line"><span class="comment"># jot -&gt; seq</span></span><br><span class="line"><span class="comment"># tee </span></span><br><span class="line"><span class="comment"># rs -T</span></span><br><span class="line"><span class="built_in">seq</span> 4 | rs -T</span><br><span class="line"><span class="built_in">seq</span> -s <span class="string">&#x27;\t&#x27;</span> -t <span class="string">&#x27;\n&#x27;</span> 4</span><br></pre></td></tr></table></figure><p>rwsnoop - snoop read&#x2F;write events. Uses DTrace.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/bin | grep snoop</span><br><span class="line"><span class="comment"># execsnoop</span></span><br><span class="line"><span class="comment"># iosnoop</span></span><br><span class="line"><span class="comment"># opensnoop</span></span><br><span class="line"><span class="comment"># rwsnoop</span></span><br></pre></td></tr></table></figure><p>safaridriver – Safari WebDriver REST API service<br>The safaridriver utility is used to launch an HTTP server that implements<br>the Selenium WebDriver REST API<br>sandbox-exec – execute within a sandbox (DEPRECATED)<br>say - Convert text to audible speech<br>script – make typescript of terminal session [type or print]<br>shar – create a shell archive of files<br>shasum - Print or Check SHA Checksums [shasum is implemented using the Perl module Digest::SHA.]<br>shlock – create or verify a lock file for shell scripts<br>[NOTE: The shlock command is deprecated, and lockf(1) should be used instead.]<br>The lockf(), fcntl(2), and flock(2) locks are compatible.<br>shortcuts – Command-line utility for running shortcuts<br>sips – scriptable image processing system<br>size - print the size of the sections in an object file<br>smbutil – interface to the SMB requester<br>sourcekit-lsp - Language Server Protocol implementation for Swift and C-based<br>languages</p><p>sw_vers – print macOS version information<br>swcd – Shared Web Credentials Daemon<br>swcutil [<a href="https://developer.apple.com/documentation/security/shared_web_credentials]">https://developer.apple.com/documentation/security/shared_web_credentials]</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/bin/ | grep <span class="string">&#x27;\.d&#x27;</span></span><br></pre></td></tr></table></figure><p>taskinfo – display policy information from kernel</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo taskinfo Fork</span><br><span class="line">sudo taskinfo Fork --threads</span><br></pre></td></tr></table></figure><p>textutil – text utility<br>textutil can be used to manipulate text files of various formats, using<br>the mechanisms provided by the Cocoa text system.<br>tidy - check, correct, and pretty-print HTML(5) files [<a href="https://github.com/htacg/tidy-html5/]">https://github.com/htacg/tidy-html5/]</a><br>timerfires – analyze timers as they fire [DTrace]<br>tmutil – Time Machine utility<br>tops - perform in-place substitutions on code<br>tsort – topological sort of a directed graph<br>uname – display information about the system<br>unifdef, unifdefall – remove preprocessor conditionals from code<br>units – conversion program<br>uptime – show how long system has been running<br>users – list current users<br>uttype - Information about Uniform Type Identifiers</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uttype --all</span><br><span class="line">uttype --all | grep com.apple.iphone</span><br><span class="line">uttype --all | grep com.apple.mac</span><br></pre></td></tr></table></figure><p>uucp - Unix to Unix copy<br>uuidgen – generates new UUID strings<br>wdutil – Wireless Diagnostics command line utility<br>xar - eXtensible ARchiver<br>DEPRECATION WARNING<br>   xar is no longer under active development by Apple. Clients of xar<br>   should pursue alternative archive formats.</p><p>xcdebug – Start a debugging session in Xcode.<br>xcode-select - Manages the active developer directory for Xcode and BSD<br>       tools<br>xctrace – Record, import, export and symbolicate Instruments .trace<br>     files.<br>xed – Xcode text editor invocation tool<br>xcrun - Run or locate development tools and properties.<br>xip – Create or expand a secure archive for secure distribution.<br>xpath - a script to query XPath statements in XML documents.[Perl]<br>xxd - make a hexdump or do the reverse<br>zprint – show information about kernel zones</p><p>realpath – return resolved physical path</p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chibicc笔记</title>
      <link href="/2023/06/27/chibicc-note/"/>
      <url>/2023/06/27/chibicc-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/rui314/chibicc">chibicc</a></p><p>Chrome或Edge翻译 Safari有点不准<br><a href="https://www.sigbus.info/compilerbook">https://www.sigbus.info/compilerbook</a><br>macOS下修改<br>1.main<br>main –&gt; _main</p><p>2.gcc -static -o tmp tmp.s<br>–&gt; gcc -arch x86_64 -o tmp tmp.s</p><p>3.movzb<br>–&gt; movzx<br>或者注释掉这个步骤</p><p>4.strndup</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strndup</span><span class="params">(<span class="type">char</span> *p, <span class="type">int</span> len)</span></span>;</span><br><span class="line">--&gt; </span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">strndup_new</span><span class="params">(<span class="type">char</span> *p, <span class="type">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>5.macOS下划线修饰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ND_FUNCALL:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  call %s\n&quot;</span>, node-&gt;funcname);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  push rax\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// --&gt;</span></span><br><span class="line"><span class="keyword">case</span> ND_FUNCALL:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  call _%s\n&quot;</span>, node-&gt;funcname);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  push rax\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>6.变量无修饰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  .data\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  .globl %s\n&quot;</span>, var-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s:\n&quot;</span>, var-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  .zero %d\n&quot;</span>, var-&gt;ty-&gt;size);</span><br></pre></td></tr></table></figure><p>7.movsxd –&gt; movslq<br><a href="https://www.bbsmax.com/A/MyJxPZZAJn/">https://www.bbsmax.com/A/MyJxPZZAJn/</a><br>普通的mov指令<br>做符号扩展的movs<br>做零扩展的movz<br>movb #完成1个字节的复制<br>movw #完成2个字节的复制<br>movl #完成4个字节的复制 movx ???<br>movq #完成8个字节的复制</p><p>8.;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println</span>(<span class="string">&quot;  .local _%s&quot;</span>, fn-&gt;name);</span><br></pre></td></tr></table></figure><p>9.extern 变量下划线修饰</p><ol start="10"><li>.align –&gt; .p2align</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt相关</title>
      <link href="/2023/06/27/qt-note/"/>
      <url>/2023/06/27/qt-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h2><p><a href="https://github.com/qt/qtbase">qtbase</a><br><a href="https://github.com/KDAB/GammaRay">GammaRay</a><br><a href="https://github.com/GillesDebunne/libQGLViewer">libQGLViewer</a><br><a href="https://github.com/giladreich/QtDirect3D">QtDirect3D</a><br><a href="https://github.com/alpqr/qrhiimgui">qrhiimgui</a><br><a href="https://github.com/alpqr/rhiwidget">rhiwidget</a><br><a href="https://github.com/witalihirsch/QTWin11">QTWin11</a><br><a href="https://github.com/Sepera-okeq/QtFluentWin11">QtFluentWin11</a><br><a href="https://github.com/linson7017/qtframework">qtframework</a><br><a href="https://github.com/gpospelov/qt-mvvm">qt-mvvm</a><br><a href="https://github.com/itay-grudev/SingleApplication">SingleApplication</a><br><a href="https://github.com/QtDocumentCN/QtDocumentCN">QtDocumentCN</a><br><a href="https://github.com/msorvig/QtWS16">QtWS16</a> -&gt; cocoa<br><a href="https://github.com/MikeMcQuaid/Qocoa">Qocoa</a><br><a href="https://github.com/Bringer-of-Light/Qt-Nice-Frameless-Window">Qt-Nice-Frameless-Window</a><br><a href="https://github.com/Ochrazy/Qt-FramelessNativeWindow">Qt-FramelessNativeWindow</a><br><a href="https://github.com/Murazaki/QtCanvas">QtCanvas</a><br><a href="https://github.com/connectedtable/qtsingleapplication">qtsingleapplication</a><br><a href="https://github.com/qpdf/qpdf">qpdf</a><br><a href="https://github.com/tetsurom/rxqt">rxqt</a><br><a href="https://github.com/svalaskevicius/qt-event-dispatcher-libuv">qt-event-dispatcher-libuv</a><br><a href="https://github.com/FreedomZZQ/IcePlayer">IcePlayer</a><br><a href="https://github.com/paulovap/qtpdfium">qtpdfium</a><br><a href="https://github.com/MEONMedical/Log4Qt">Log4Qt</a><br><a href="https://github.com/flavio/qjson">qjson</a><br><a href="https://github.com/supamii/QttpServer">QttpServer</a><br><a href="https://github.com/GillesDebunne/libQGLViewer">libQGLViewer</a></p><h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><p>Qt：工欲善其事，必先利其器。在Qt中使用Sentry在线收集日志<br><a href="https://zhuanlan.zhihu.com/p/339169189">https://zhuanlan.zhihu.com/p/339169189</a></p><h2 id="vcpkg-build-qtbase"><a href="#vcpkg-build-qtbase" class="headerlink" title="vcpkg build qtbase"></a>vcpkg build qtbase</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">qtbase </span><br><span class="line">M1 3min </span><br><span class="line">16Pro 4Min</span><br><span class="line">Parallels Arm64 7min</span><br><span class="line"></span><br><span class="line">vcpkg qtbase debug </span><br><span class="line">UTM arm64 Windows</span><br><span class="line">x86_arm64 21min</span><br><span class="line">arm64 12min</span><br></pre></td></tr></table></figure><h2 id="some-note"><a href="#some-note" class="headerlink" title="some note"></a>some note</h2><p>qt5 -&gt; qt6<br>QTextCodec -&gt; QStringConverter</p><p>Qt的隐式共享和写时拷贝<br><a href="https://0cch.cn/2021/07/11/qt-implicit-sharing-copy-on-write/">https://0cch.cn/2021/07/11/qt-implicit-sharing-copy-on-write/</a></p><p>implicit sharing &#x3D; cow + rc<br>禁止直接引用并通过引用修改Qt容器中的对象</p><p>d-pointer<br>pointer to implementation (pimpl)</p><p>s.detach</p><p>q-pointer</p><p>一文搞懂可重入和线程安全<br><a href="https://blog.csdn.net/gaoyuelon/article/details/126672977">https://blog.csdn.net/gaoyuelon/article/details/126672977</a><br>一个线程安全的函数可以被多个线程同时调用，即使调用使用共享数据，因为对共享数据的所有引用都是序列化的（串行的）<br>一个可重入函数也可以被多个线程同时调用，但前提是每个调用都使用自己的数据。<br>因此，线程安全的函数总是可重入的，但可重入的函数并不总是线程安全的。<br>c++类通常是可重入的，这是因为它们只访问自己的成员数据。任何线程都可以调用可重入类实例中的成员函数，只要没有其他线程可以同时调用该类的同一个实例上的成员函数。</p><p>线程安全与可重入<br><a href="https://www.jianshu.com/p/4003b0f7fc6e">https://www.jianshu.com/p/4003b0f7fc6e</a><br>重入应该是指在单线程的情况下发生的，只有在发生中断、接收到信号的时候才会发生，因此可重入函数一般是对信号处理函数、中断处理函数的要求。</p><p>C++11单例模式<br><a href="https://zhuanlan.zhihu.com/p/406287036">https://zhuanlan.zhihu.com/p/406287036</a><br>单例模式还需要进行拷贝控制呀，也就是显式地删除copy&#x2F;move constructor 和 copy&#x2F;move assignment operator<br><a href="https://github.com/ltimaginea/Design-Patterns/blob/main/DesignPatterns/Singleton/Singleton.cpp">https://github.com/ltimaginea/Design-Patterns/blob/main/DesignPatterns/Singleton/Singleton.cpp</a></p><p>命令模式 Undo Framework<br>观察者模式 信号槽&#x2F;事件过滤器<br>工厂模式 QTextCodec&#x2F;QStyleFactory</p><p>deleteLater -&gt;<br>QEvent::DeferredDelete -&gt;<br>allowDeferredDelete -&gt;<br>qDeleteInEventHandler -&gt;<br>delete o;</p><p>QPointer只有一个作用QObject引用对象删除时自动置空<br>QPointer -&gt; QWeakPointer -&gt; QSharedPointer<br>std::weak_ptr -&gt; expired() -&gt; std::shared_ptr<br>QScopedPointer -&gt; std::unique_ptr</p><p>注意，由于 moc 只处理头文件中的标记了Q_OBJECT的类声明，不会处理 cpp 文件中的类似声明。因此，如果我们的Newspaper和Reader类位于 main.cpp 中，是无法得到 moc 的处理的。解决方法是，我们手动调用 moc 工具处理 main.cpp，并且将 main.cpp 中的#include “newspaper.h”改为#include “moc_newspaper.h”就可以了。不过，这是相当繁琐的步骤，为了避免这样修改，我们还是将其放在头文件中。许多初学者会遇到莫名其妙的错误，一加上Q_OBJECT就出错，很大一部分是因为没有注意到这个宏应该放在头文件中。</p><p>信号作为函数名，不需要在 cpp 函数中添加任何实现（我们曾经说过，Qt 程序能够使用普通的 make 进行编译。没有实现的函数名怎么会通过编译？原因还是在 moc，moc 会帮我们实现信号函数所需要的函数体，所以说，moc 并不是单纯的将 Q_OBJECT 展开，而是做了很多额外的操作）</p><p>对于 Qt4 的信号槽连接语法，其连接是在运行时完成的，因此即便是 private 的槽函数也是可以作为槽进行连接的。但是，如果你使用了 Qt5 的新语法，新语法提供了编译期检查（取函数指针），因此取 private 函数的指针是不能通过编译的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (d-&gt;parent)        <span class="comment">// remove it from parent object</span></span><br><span class="line">    d-&gt;<span class="built_in">setParent_helper</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><p>crash -&gt; stack orderpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QPushButton <span class="title function_">quit</span><span class="params">(<span class="string">&quot;Quit&quot;</span>)</span>;</span><br><span class="line">    QWidget window;</span><br><span class="line"></span><br><span class="line">    quit.setParent(&amp;window);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Qt5 connect 使用之“重载信号和槽”<br><a href="https://zhuanlan.zhihu.com/p/367431938">https://zhuanlan.zhihu.com/p/367431938</a></p><p>继续使用 QPointer<br><a href="https://www.devbean.net/2012/09/continue-using-qpointer/">https://www.devbean.net/2012/09/continue-using-qpointer/</a></p><p>Qt 使用QDialog::exec()实现应用程序级别的模态对话框，使用QDialog::open()实现窗口级别的模态对话框，使用QDialog::show()实现非模态对话框。</p><p>setAttribute()函数设置对话框关闭时，自动销毁对话框。另外，QObject还有一个deleteLater()函数，该函数会在当前事件循环结束时销毁该对话框（具体到这里，需要使用exec()开始一个新的事件循环）</p><p>不要担心如果对话框关闭，是不是还能获取到数据。因为 Qt 信号槽的机制保证，在槽函数在调用的时候，我们始终可以使用sender()函数获取到 signal 的发出者。</p><p>对于一个普通的QDialog而言，Qt 使用的是QDialogButtonBox这个类来实现不同平台的对话框按钮顺序的显示的。</p><p>我们不能在函数指针中使用函数参数的默认值。这是 C++ 语言的限制：参数默认值只能使用在直接地函数调用中。当使用函数指针取其地址的时候，默认参数是不可见的！<br>如果你还是想使用 Qt 5 的新语法，目前的办法只有一个：Lambda 表达式。</p><p>具体来说：如果一个事件处理函数调用了一个事件对象的accept()函数，这个事件就不会被继续传播给其父组件；如果它调用了事件的ignore()函数，Qt 会从其父组件中寻找另外的接受者。</p><p>在一个特殊的情形下，我们必须使用accept()和ignore()函数，那就是窗口关闭的事件。对于窗口关闭QCloseEvent事件，调用accept()意味着 Qt 会停止事件的传播，窗口关闭；调用ignore()则意味着事件继续传播，即阻止窗口关闭。</p><p>由此可以见，event()是一个集中处理不同类型的事件的地方。如果你不想重写一大堆事件处理器，就可以重写这个event()函数，通过QEvent::type()判断不同的事件。鉴于重写event()函数需要十分小心注意父类的同名函数的调用，一不留神就可能出现问题，所以一般还是建议只重写事件处理器（当然，也必须记得是不是应该调用父类的同名处理器）。这其实暗示了event()函数的另外一个作用：屏蔽掉某些不需要的事件处理器。</p><p>这个函数返回一个 bool 类型，如果你想将参数 event 过滤出来，比如，不想让它继续转发，就返回 true，否则返回 false。事件过滤器的调用时间是目标对象（也就是参数里面的watched对象）接收到事件对象之前。也就是说，如果你在事件过滤器中停止了某个事件，那么，watched对象以及以后所有的事件过滤器根本不会知道这么一个事件。</p><p>我们可以向一个对象上面安装多个事件处理器，只要调用多次installEventFilter()函数。如果一个对象存在多个事件过滤器，那么，最后一个安装的会第一个执行，也就是后进先执行的顺序。？？？？<br>d-&gt;extraData-&gt;eventFilters.prepend(obj);</p><p>事件过滤器和被安装过滤器的组件必须在同一线程，否则，过滤器将不起作用。另外，如果在安装过滤器之后，这两个组件到了不同的线程，那么，只有等到二者重新回到同一线程的时候过滤器才会有效。</p><p>if (d-&gt;threadData.loadRelaxed() !&#x3D; obj-&gt;d_func()-&gt;threadData.loadRelaxed()) {<br>    qWarning(“QObject::installEventFilter(): Cannot filter events for objects in a different thread.”);<br>    return;<br>}</p><p>全局过滤器有一个问题：只能用在主线程。<br>重写QCoreApplication::notify()函数。这是最强大的，和全局事件过滤器一样提供完全控制，并且不受线程的限制。但是全局范围内只能有一个被使用（因为QCoreApplication是单例的）。</p><p>其中，QEvent::User的值是 1000，QEvent::MaxUser的值是 65535。从这里知道，我们最多可以定义 64536 个事件。通过这两个枚举值，我们可以保证我们自己的事件类型不会覆盖系统定义的事件类型。但是，这样并不能保证自定义事件相互之间不会被覆盖。为了解决这个问题，Qt 提供了一个函数：registerEventType()，用于自定义事件的注册。</p><p>sendPostedEvents<br>这个函数的作用是，将事件队列中的接受者为receiver，事件类似为 event_type 的所有事件立即发送给 receiver 进行处理。需要注意的是，来自窗口系统的事件并不由这个函数进行处理，而是processEvent()。</p><p>处理自定义事件，同前面我们讲解的那些处理方法没有什么区别。我们可以重写QObject::customEvent()函数，该函数接收一个QEvent对象作为参数。</p><p>QPainter -&gt; QPaintEngine -&gt; QPaintDevice</p><p>因为在实际设备上，像素是最小单位，我们不能像上面一样，在两个像素之间进行绘制。所以在实际绘制时，Qt 的定义是，绘制点所在像素是逻辑定义点的右下方的像素。</p><p>emit 是一个空的宏。甚至 MOC 也不会处理它。换句话说，emit 其实是可选的，没有什么含义（除了提醒开发者）。</p><p>在每一个 QMetaObject 中，槽、信号以及其它该对象可调用的函数都会分配一个从 0 开始的索引。它们是有顺序的，信号在第一位，然后是槽，最后是其它函数。这个索引在内部被称为相对索引。它们不包含父对象的索引位。</p><p>Graphics View 使用了 BSP 树（Binary Space Partitioning tree，这是一种被广泛应用于图形学方面的数据结构）来提供非常快速的元素发现，也正因为如此，才能够实现一种上百万数量级元素的实时显示机制。</p><p>需要注意的是，原子引用计数并不能保证线程安全，还是需要恰当的锁机制。这种观点对所有类似的场合都是适用的。原子引用计数能够保证的是，线程肯定操作自己的数据，线程自己的数据是安全的。</p><p>WebChannelTransport::Install</p><p><a href="https://github.com/qt/qtwebengine/blob/dev/src/core/renderer/web_channel_ipc_transport.cpp">https://github.com/qt/qtwebengine/blob/dev/src/core/renderer/web_channel_ipc_transport.cpp</a></p><p>QHttpThreadDelegate</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Move the delegate to the http thread</span></span><br><span class="line">delegate-&gt;<span class="built_in">moveToThread</span>(thread);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QNetworkReplyHttpImplPrivate::postRequest</span><span class="params">(<span class="type">const</span> QNetworkRequest &amp;newHttpRequest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_Q</span>(QNetworkReplyHttpImpl);</span><br><span class="line"></span><br><span class="line">    QThread *thread = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (synchronous) &#123;</span><br><span class="line">        <span class="comment">// A synchronous HTTP request uses its own thread</span></span><br><span class="line">        thread = <span class="keyword">new</span> <span class="built_in">QThread</span>();</span><br><span class="line">        thread-&gt;<span class="built_in">setObjectName</span>(<span class="built_in">QStringLiteral</span>(<span class="string">&quot;Qt HTTP synchronous thread&quot;</span>));</span><br><span class="line">        QObject::<span class="built_in">connect</span>(thread, <span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>()), thread, <span class="built_in">SLOT</span>(<span class="built_in">deleteLater</span>()));</span><br><span class="line">        thread-&gt;<span class="built_in">start</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We use the manager-global thread.</span></span><br><span class="line">        <span class="comment">// At some point we could switch to having multiple threads if it makes sense.</span></span><br><span class="line">        thread = managerPrivate-&gt;<span class="built_in">createThread</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PTHREAD_CREATE_DETACHED&#x2F;CREATE_SUSPENDED(WIN32)</p><p>QThread -&gt; start&#x2F;exec(run) -&gt; detach&#x2F;join</p><p>如果真的有事件被移动，则尝试对目标线程调用wakeUp，告诉线程可以起来工作了</p><p>QThreadPrivate::start -&gt;<br>thr-&gt;run(); -&gt;<br>QThread::exec -&gt;<br>QEventLoop -&gt; exec</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!d-&gt;exit.<span class="built_in">loadAcquire</span>())</span><br><span class="line">    <span class="built_in">processEvents</span>(flags | WaitForMoreEvents | EventLoopExec);</span><br></pre></td></tr></table></figure><p>QThreadPrivate::createEventDispatcher<br>QEventDispatcherWin32<br>d-&gt;internalHwnd &#x3D; qt_create_internal_window(this);<br>unix eventfd&#x2F;pipe</p><p>在登录时，我们必须要等待网络返回结果，才能让界面做出响应：是验证成功进入系统，还是验证失败做出提示？这就是本章的主要内容：如何使用QNetworkAccessManager进行同步网络访问。</p><p><a href="https://www.devbean.net/2013/11/qt-study-road-2-thread-and-event-loop/">https://www.devbean.net/2013/11/qt-study-road-2-thread-and-event-loop/</a><br>伪代码里面的while会遍历整个事件队列，发送从队列中找到的事件；wait_for_more_events()函数则会阻塞事件循环，直到又有新的事件产生。我们仔细考虑这段代码，在wait_for_more_events()函数所得到的新的事件都应该是由程序外部产生的。因为所有内部事件都应该在事件队列中处理完毕了。因此，我们说事件循环在wait_for_more_events()函数进入休眠，并且可以被下面几种情况唤醒：</p><p>窗口管理器的动作（键盘、鼠标按键按下、与窗口交互等）；<br>套接字动作（网络传来可读的数据，或者是套接字非阻塞写等）；<br>定时器；<br>由其它线程发出的事件（我们会在后文详细解释这种情况）。</p><p>当然，这种情况也有解决的办法：我们可以在调用QCoreApplication::processEvents()函数时传入QEventLoop::ExcludeUserInputEvents参数，意思是不要再次派发用户输入事件（这些事件仍旧会保留在事件队列中）。</p><p>值得注意的一点是，虽然QObject是可重入的，但是 GUI 类，特别是QWidget及其所有的子类，都是不是可重入的。它们只能在主线程使用。由于这些 GUI 类大都需要一个事件循环，所以，调用QCoreApplication::exec()也必须是主线程，否则这些 GUI 类就没有事件循环了。</p><p>基于同样的原因，你也不能在另外的线程直接delete一个QObject对象，相反，你需要调用QObject::deleteLater()函数，这个函数会给对象所在线程发送一个删除的事件。</p><p>假设我们有一个很耗时的计算，我们不能简单地将它移动到另外的线程（或者是我们根本无法移动它，比如这个任务必须在 GUI 线程完成）。如果我们将这个计算任务分割成小块，那么我们就可以及时返回事件循环，从而让事件循环继续派发事件，调用处理下一个小块的函数。</p><p><a href="https://www.devbean.net/2012/08/qt-study-road-2-catelog/">https://www.devbean.net/2012/08/qt-study-road-2-catelog/</a></p><p>QEventDispatcher<br>cf -&gt; CFRunLoopWakeup<br>glib -&gt; g_main_context_wakeup</p><figure class="highlight cpp"><figcaption><span>QEventDispatcherGlib::processEvents</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g_main_context_iteration</span><br></pre></td></tr></table></figure><p>unix -&gt; d-&gt;threadPipe.wakeUp() -&gt; eventfd&#x2F;qt_safe_write[pipe]</p><figure class="highlight cpp"><figcaption><span>processEvents</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qt_safe_poll -&gt;</span><br><span class="line">d-&gt;threadPipe.check -&gt;</span><br><span class="line">eventfd_read/read</span><br><span class="line"><span class="comment">// include_notifiers</span></span><br><span class="line">d-&gt;<span class="built_in">activateSocketNotifiers</span>()</span><br><span class="line"><span class="comment">// include_timers</span></span><br><span class="line">d-&gt;<span class="built_in">activateTimers</span>()</span><br></pre></td></tr></table></figure><p>wasm -&gt; g_proxyingQueue.proxyAsync [emscripten::ProxyingQueue]<br>win -&gt; PostMessage[WM_QT_SENDPOSTEDEVENTS]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">HIWORD</span>(<span class="built_in">GetQueueStatus</span>(mask)) == <span class="number">0</span>)</span><br><span class="line">    q-&gt;<span class="built_in">sendPostedEvents</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    d-&gt;<span class="built_in">startPostedEventsTimer</span>();</span><br></pre></td></tr></table></figure><p>QFuture -&gt; whenAllImpl</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// checkForCompletion</span></span><br><span class="line"><span class="keyword">if</span> (!ready.<span class="built_in">fetchAndStoreRelaxed</span>(<span class="literal">true</span>)) &#123;</span><br><span class="line">    promise.<span class="built_in">addResult</span>(std::forward&lt;T&gt;(result));</span><br><span class="line">    promise.<span class="built_in">finish</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reportFinished</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">`QFutureInterfaceBase::<span class="built_in">reportFinished</span>();</span><br><span class="line">QFutureInterfaceBase::<span class="built_in">runContinuation</span>();`</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// runContinuation -&gt;</span></span><br><span class="line"><span class="keyword">auto</span> fn = std::<span class="built_in">move</span>(d-&gt;continuation);</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br><span class="line"><span class="built_in">fn</span>(*<span class="keyword">this</span>);</span><br><span class="line">lock.<span class="built_in">relock</span>();</span><br></pre></td></tr></table></figure><p>when完成时wakeup 通知不需要等待 然后执行d-&gt;continuation<br><a href="https://github.com/qt/qtbase/blob/dev/src/corelib/thread/qfuture_impl.h">https://github.com/qt/qtbase/blob/dev/src/corelib/thread/qfuture_impl.h</a><br>WhenAllContext&#x2F;WhenAnyContext -&gt; checkForCompletion</p><h2 id="Qt-Invoke"><a href="#Qt-Invoke" class="headerlink" title="Qt Invoke"></a>Qt Invoke</h2><p>QMetaMethodInvoker::invokeImpl</p><p>QEventDispatcher<br>win32 -&gt; PostMessage -&gt; WM_QT_SENDPOSTEDEVENTS<br>sendPostedEvents&#x2F;startPostedEventsTimer<br>unix -&gt; threadPipe.wakeUp<br>eventfd or pipe&#x2F;pipe2<br>mac -&gt; </p><p>postEvent -&gt; sendPostedEvent -&gt;<br>sendEvent -&gt; notifyInternal2 -&gt; notify_helper<br>sendThroughApplicationEventFilters&#x2F;<br>receiver-&gt;event(event);</p><p>connectNotify<br>QObjectPrivate::get(s)-&gt;addConnection</p><p>signal_func -&gt;<br>QMetaObject:activate -&gt;<br>doActivate -&gt;<br>connections<br>isSlotObject -&gt; obj-&gt;call<br>callFunction -&gt; callFunction<br>QMetaObject::metacall</p><p>QEvent::KeyRelease -&gt; QWindowSystemInterface::handleExtendedKeyEvent<br>QWindowsContext::windowsProc -&gt; QtWindows::AppCommandEvent</p><h2 id="macOS用vcpkg编译qtbase动态库报错处理"><a href="#macOS用vcpkg编译qtbase动态库报错处理" class="headerlink" title="macOS用vcpkg编译qtbase动态库报错处理"></a>macOS用vcpkg编译qtbase动态库报错处理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg install qtbase --triplet arm64-osx-dynamic</span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>icu_qt_dynamic.patch</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/ports/icu/portfile.cmake b/ports/icu/portfile.cmake</span></span><br><span class="line"><span class="comment">index c622dfd..350cca2 100644</span></span><br><span class="line"><span class="comment">--- a/ports/icu/portfile.cmake</span></span><br><span class="line"><span class="comment">+++ b/ports/icu/portfile.cmake</span></span><br><span class="line"><span class="meta">@@ -91,7 +91,7 @@</span> if(VCPKG_TARGET_IS_OSX AND VCPKG_LIBRARY_LINKAGE STREQUAL &quot;dynamic&quot;)</span><br><span class="line">     #31680: Fix @rpath in both debug and release build</span><br><span class="line">     foreach(CONFIG_TRIPLE IN ITEMS $&#123;DEBUG_TRIPLET&#125; $&#123;RELEASE_TRIPLET&#125;)</span><br><span class="line">         # add ID_PREFIX to libicudata libicui18n libicuio libicutu libicuuc</span><br><span class="line"><span class="deletion">-        foreach(LIB_NAME IN ITEMS libicudata libicui18n libicuio $&#123;LIBICUTU_RPATH&#125; libicuuc)</span></span><br><span class="line"><span class="addition">+        foreach(LIB_NAME IN ITEMS libicui18n libicuio libicuuc)</span></span><br><span class="line">             vcpkg_execute_build_process(</span><br><span class="line">                 COMMAND &quot;$&#123;INSTALL_NAME_TOOL&#125;&quot; -id &quot;$&#123;ID_PREFIX&#125;/$&#123;LIB_NAME&#125;.$&#123;ICU_VERSION_MAJOR&#125;.dylib&quot;</span><br><span class="line">                 &quot;$&#123;LIB_NAME&#125;.$&#123;VERSION&#125;.dylib&quot;</span><br><span class="line"><span class="meta">@@ -99,6 +99,13 @@</span> if(VCPKG_TARGET_IS_OSX AND VCPKG_LIBRARY_LINKAGE STREQUAL &quot;dynamic&quot;)</span><br><span class="line">                 LOGNAME &quot;make-build-fix-rpath-$&#123;CONFIG_TRIPLE&#125;&quot;</span><br><span class="line">             )</span><br><span class="line">         endforeach()</span><br><span class="line"><span class="addition">+        set(LIB_NAME libicudata)</span></span><br><span class="line"><span class="addition">+        vcpkg_execute_build_process(</span></span><br><span class="line"><span class="addition">+            COMMAND &quot;$&#123;INSTALL_NAME_TOOL&#125;&quot; -id &quot;$&#123;ID_PREFIX&#125;/$&#123;LIB_NAME&#125;.$&#123;ICU_VERSION_MAJOR&#125;.dylib&quot;</span></span><br><span class="line"><span class="addition">+            &quot;$&#123;LIB_NAME&#125;.$&#123;VERSION&#125;.dylib&quot;</span></span><br><span class="line"><span class="addition">+            WORKING_DIRECTORY &quot;$&#123;CURRENT_BUILDTREES_DIR&#125;/$&#123;CONFIG_TRIPLE&#125;/stubdata&quot;</span></span><br><span class="line"><span class="addition">+            LOGNAME &quot;make-build-fix-rpath-$&#123;CONFIG_TRIPLE&#125;&quot;</span></span><br><span class="line"><span class="addition">+        )</span></span><br><span class="line"> </span><br><span class="line">         # add ID_PREFIX to libicui18n libicuio libicutu dependencies</span><br><span class="line">         foreach(LIB_NAME IN ITEMS libicui18n libicuio)</span><br><span class="line"><span class="meta">@@ -119,7 +126,7 @@</span> if(VCPKG_TARGET_IS_OSX AND VCPKG_LIBRARY_LINKAGE STREQUAL &quot;dynamic&quot;)</span><br><span class="line">         endforeach()</span><br><span class="line"> </span><br><span class="line">         # add ID_PREFIX to remaining libicuio libicutu dependencies</span><br><span class="line"><span class="deletion">-        foreach(LIB_NAME libicuio libicutu)</span></span><br><span class="line"><span class="addition">+        foreach(LIB_NAME libicuio)</span></span><br><span class="line">             vcpkg_execute_build_process(</span><br><span class="line">                 COMMAND &quot;$&#123;INSTALL_NAME_TOOL&#125;&quot; -change &quot;libicui18n.$&#123;ICU_VERSION_MAJOR&#125;.dylib&quot;</span><br><span class="line">                                                     &quot;$&#123;ID_PREFIX&#125;/libicui18n.$&#123;ICU_VERSION_MAJOR&#125;.dylib&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>$&#123;HOMEBREW_PREFIX&#125;/share/xmake/rules/qt/deploy/macosx.lua</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/xmake/rules/qt/deploy/macosx.lua b/xmake/rules/qt/deploy/macosx.lua</span></span><br><span class="line"><span class="comment">index 5abbe4263..066a3dea3 100644</span></span><br><span class="line"><span class="comment">--- a/xmake/rules/qt/deploy/macosx.lua</span></span><br><span class="line"><span class="comment">+++ b/xmake/rules/qt/deploy/macosx.lua</span></span><br><span class="line"><span class="meta">@@ -91,7 +91,7 @@</span> function main(target, opt)</span><br><span class="line">     local qt = assert(find_qt(), &quot;Qt SDK not found!&quot;)</span><br><span class="line"> </span><br><span class="line">     -- get macdeployqt</span><br><span class="line"><span class="deletion">-    local macdeployqt = path.join(qt.bindir, &quot;macdeployqt&quot;)</span></span><br><span class="line"><span class="addition">+    local macdeployqt = path.join(qt.libexecdir, &quot;macdeployqt&quot;)</span></span><br><span class="line">     assert(os.isexec(macdeployqt), &quot;macdeployqt not found!&quot;)</span><br><span class="line"> </span><br><span class="line">     -- generate target app</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> VCPKG_ROOT=/Users/wurui/Documents/GitHub/vcpkg</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;VCPKG_ROOT&#125;</span>/installed/arm64-osx-dynamic/tools/Qt6/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> DYLD_LIBRARY_PATH=<span class="variable">$&#123;VCPKG_ROOT&#125;</span>/installed/arm64-osx-dynamic/lib</span><br><span class="line">xmake -yv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++笔记</title>
      <link href="/2023/06/27/cpp-note/"/>
      <url>/2023/06/27/cpp-note/</url>
      
        <content type="html"><![CDATA[<p>C++11中enable_shared_from_this的用法解析<br><a href="https://blog.csdn.net/breadheart/article/details/112451022">https://blog.csdn.net/breadheart/article/details/112451022</a></p><h2 id="cpp-feature"><a href="#cpp-feature" class="headerlink" title="cpp feature"></a>cpp feature</h2><p><a href="https://godbolt.org/">https://godbolt.org/</a><br>stacktrace -&gt; gcc 12<br>source_location -&gt; gcc 11&#x2F;clang 15&#x2F;msvc 19.29<br>ranges views -&gt; gcc 10&#x2F;clang 16&#x2F;msvc 19.32<br>coroutine -&gt; gcc 11&#x2F;clang 13(not apple clang)&#x2F;msvc 19.30<br>deducing this -&gt; msvc 19.32&#x2F;<br>format&#x2F;print -&gt; clang 17&#x2F;msvc 19.37(&#x2F;std:c++latest)</p><h2 id="C-实现lambda递归调用（C-11-C-23）"><a href="#C-实现lambda递归调用（C-11-C-23）" class="headerlink" title="C++ 实现lambda递归调用（C++11 - C++23）"></a>C++ 实现lambda递归调用（C++11 - C++23）</h2><p><a href="https://blog.csdn.net/J__M__C/article/details/125437699">https://blog.csdn.net/J__M__C/article/details/125437699</a><br><a href="https://wandbox.org/">https://wandbox.org/</a></p><p><a href="https://zh.cppreference.com/w/cpp/feature_test">https://zh.cppreference.com/w/cpp/feature_test</a></p><h2 id="cppref-note"><a href="#cppref-note" class="headerlink" title="cppref note"></a>cppref note</h2><p>无后缀浮点常量拥有 double 类型。若 后缀 为字母 f 或 F ，则浮点常量拥有 float 类型。若 后缀 为 l 或 L ，则浮点常量拥有 long double 类型。 </p><p>C++11新特性3 - 左右值与右值引用<br><a href="https://zhuanlan.zhihu.com/p/85668787">https://zhuanlan.zhihu.com/p/85668787</a></p><p>有限定的名字查找<br>如果 :: 左边为空，那么查找过程只会考虑全局命名空间作用域中作出（或通过 using 声明引入到全局命名空间中）的声明。这使得即使被局部声明隐藏的名字也能够被访问： </p><p>C++中的mutable关键字<br><a href="https://www.cnblogs.com/yongdaimi/p/9565996.html">https://www.cnblogs.com/yongdaimi/p/9565996.html</a><br>显而易见，mutable只能用来修饰类的数据成员；而被mutable修饰的数据成员，可以在const成员函数中修改。</p><p>friend有点类似</p><p>从函数返回时，作为求值函数调用结果的临时量的复制初始化按顺序早于在 return 语句的操作数末尾处对所有临时量的销毁，而这些销毁进一步按顺序早于对环绕 return 语句的块的所有局部变量的销毁。</p><p>构造函数不能是虚函数（因为在调用构造函数时，虚表指针并没有在对象的内存空间中，必须要构造函数调用完成后才会形成虚表指针）</p><p>虚析构函数是为了解决基类的指针指向派生类对象，并用基类的指针删除派生类对象。</p><p>别让异常逃离析构函数（析构函数应该吞下不传播异常，或者结束程序，而不是吐出异常；如果要处理异常应该在非析构的普通函数处理）</p><h2 id="counting-semaphore"><a href="#counting-semaphore" class="headerlink" title="counting_semaphore"></a>counting_semaphore</h2><p>不同于 std::mutex ， counting_semaphore 不捆绑到执行线程——能在不同于释放信号量的线程获取该信号量。能同时进行 counting_semaphore 上的所有操作而无需联系到任何特定的执行线程，除了不能同时执行，但能在一个不同的线程上执行析构函数。</p><p>信号量亦常用于发信&#x2F;提醒而非互斥，通过初始化该信号量为0 从而阻塞尝试 acquire() 的接收者，直至提醒者通过调用 release(n) “发信”。在此方面可把信号量当作 std::condition_variable 的替用品，通常它有更好的性能。 </p><p>Mutex只能由获取它的线程释放，而您可以从任何其他线程(或进程)发出信号量信号，因此信号量更适合某些同步问题，如producer-consumer。</p><p>在Windows上，二进制信号量更像是事件对象而不是互斥体。<br><a href="https://www.codenong.com/62814/">https://www.codenong.com/62814/</a></p><h2 id="std-list和std-forward-list"><a href="#std-list和std-forward-list" class="headerlink" title="std::list和std::forward_list"></a>std::list和std::forward_list</h2><p><a href="https://zh.cppreference.com/w/cpp/container/list">https://zh.cppreference.com/w/cpp/container/list</a><br>std::list 是支持常数时间从容器任何位置插入和移除元素的容器。不支持快速随机访问。它通常实现为双向链表。与 std::forward_list 相比，此容器提供双向迭代但在空间上效率稍低。<br><a href="https://zh.cppreference.com/w/cpp/container/forward_list">https://zh.cppreference.com/w/cpp/container/forward_list</a><br>std::forward_list 是支持从容器中的任何位置快速插入和移除元素的容器。不支持快速随机访问。它实现为单链表，且实质上与其在 C 中实现相比无任何开销。与 std::list 相比，此容器在不需要双向迭代时提供更有效地利用空间的存储。</p><h2 id="std-recursive-mutex"><a href="#std-recursive-mutex" class="headerlink" title="std::recursive_mutex"></a>std::recursive_mutex</h2><p>有时候会在两个函数中分别对数据进行lock，如果在一个函数中又调用了另一个函数，此时如果使用std::mutex将会死锁，而用std::recursive_mutex则不会。看起来std::recursive_mutex很不错，但是使用的时候也需要多注意，lock和unlock的数量必须相等，否则会出错。</p><p>另外还有性能的问题，std::recursive_mutex的性能会比较差一些</p><h2 id="std-unique-lock与std-lock-guard"><a href="#std-unique-lock与std-lock-guard" class="headerlink" title="std::unique_lock与std::lock_guard"></a>std::unique_lock与std::lock_guard</h2><p><a href="https://www.jianshu.com/p/7eba4f722e07">https://www.jianshu.com/p/7eba4f722e07</a><br>std::condition_variable 对象通常使用 std::unique_lock 来等待，如果需要使用另外的 lockable 类型，可以使用std::condition_variable_any类</p><p>condition_variable(条件变量)，通俗的将线程根据条件去拿锁，若不符合条件则休眠，直到有线程唤醒它才会继续去竞争锁，用于线程同步，只能配合unique_lock使用，前面3个wait函数需要传入一个已经上锁的变量unique_lock<mutex>，此外第二个参数传入lambda表达式用于防止虚假唤醒;而condition_variable_any可以应用于任意的lock；</p><p>C++锁的管理– std::lock_guard和std::unique_lock<br><a href="https://blog.51cto.com/u_15127564/3587504?b=totalstatistic">https://blog.51cto.com/u_15127564/3587504?b=totalstatistic</a></p><p><a href="https://zh.cppreference.com/w/cpp/thread/lock">https://zh.cppreference.com/w/cpp/thread/lock</a><br>用免死锁算法避免死锁。<br>std::scoped_lock 提供此函数的 RAII 包装，通常它比裸调用 std::lock 更好。 </p><p>std::weak_ptr 是一种智能指针，它对被 std::shared_ptr 管理的对象存在非拥有性（「弱」）引用。在访问所引用的对象前必须先转换为 std::shared_ptr。</p><p>std::weak_ptr 用来表达临时所有权的概念：当某个对象只有存在时才需要被访问，而且随时可能被他人删除时，可以使用 std::weak_ptr 来跟踪该对象。需要获得临时所有权时，则将其转换为 std::shared_ptr，此时如果原来的 std::shared_ptr 被销毁，则该对象的生命期将被延长至这个临时的 std::shared_ptr 同样被销毁为止。</p><p>std::weak_ptr 的另一用法是打断 std::shared_ptr 所管理的对象组成的环状引用。若这种环被孤立（例如无指向环中的外部共享指针），则 shared_ptr 引用计数无法抵达零，而内存被泄露。能令环中的指针之一为弱指针以避免此情况。 </p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://winbgim.codecutter.org/">https://winbgim.codecutter.org/</a><br><a href="https://libxbgi.sourceforge.net/">https://libxbgi.sourceforge.net/</a><br><a href="https://lcc-win32.services.net/">https://lcc-win32.services.net/</a></p><p>avilib -&gt; Rainer Johanni<br>player -&gt; MCI mciSendCommand<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/multimedia/mci">https://learn.microsoft.com/zh-cn/windows/win32/multimedia/mci</a></p><p><a href="https://github.com/leixiaohua1020/simplest_media_play">https://github.com/leixiaohua1020/simplest_media_play</a></p><p>各系统添加根证书<br><a href="https://www.cnblogs.com/meilong/p/ge-xi-tong-tian-jia-gen-zheng-shu.html">https://www.cnblogs.com/meilong/p/ge-xi-tong-tian-jia-gen-zheng-shu.html</a></p><p>format str -&gt; python -&gt; c++ fmtlib</p><p>C++ 项目编译优化：记一次提速 60% 的实践<br><a href="https://zhuanlan.zhihu.com/p/466738535">https://zhuanlan.zhihu.com/p/466738535</a><br>json_fwd.hpp</p><p>windows -&gt; robocopy&#x2F;forfiles&#x2F;runas</p><p>cimg -&gt; x11&#x2F;win32 -&gt; not apple</p><p>基于范围的 for 循环—自定义类型<br><a href="https://zhuanlan.zhihu.com/p/354609822">https://zhuanlan.zhihu.com/p/354609822</a><br><a href="https://learnmoderncpp.com/2019/11/18/pythons-range-in-20-lines-of-c/">https://learnmoderncpp.com/2019/11/18/pythons-range-in-20-lines-of-c/</a></p><p>C++20之模板元条件判断，编译期if else, switch case</p><p>std::decay 主要是弱化一些类型，说白了就是通过typedef 的方式去除掉引用、cv等属性。一般std::decay 与std::is_same 配合使用，确认基础类型。</p><h2 id="探索X86架构C可变参数函数实现原理-gt-va-list-x2F-cdecl"><a href="#探索X86架构C可变参数函数实现原理-gt-va-list-x2F-cdecl" class="headerlink" title="探索X86架构C可变参数函数实现原理 -&gt; va_list&#x2F;__cdecl"></a>探索X86架构C可变参数函数实现原理 -&gt; va_list&#x2F;__cdecl</h2><p><a href="https://blog.csdn.net/m0_50662680/article/details/127709109">https://blog.csdn.net/m0_50662680/article/details/127709109</a><br>AArch64中va_list&#x2F;va_start&#x2F;va_arg&#x2F;…的实现<br><a href="https://blog.csdn.net/lidan113lidan/article/details/123962416">https://blog.csdn.net/lidan113lidan/article/details/123962416</a></p><p>c++自定义迭代器练习<br><a href="https://blog.csdn.net/wyg_031113/article/details/128277587">https://blog.csdn.net/wyg_031113/article/details/128277587</a></p><p>struct 内成员初始化<br>成员是class的情况 c++会调用构造函数 此时gcc<br>默认初始化为0的情况(基础类型?)<br>mingw gcc&#x2F;mingw clang&#x2F;apple clang(-O1)部分<br>Uninitialized variable warnings and compiler optimizations<br><a href="http://jakegoulding.com/blog/2011/01/27/uninitialized-variable-warnings-and-compiler-optimizations/">http://jakegoulding.com/blog/2011/01/27/uninitialized-variable-warnings-and-compiler-optimizations/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> = &#123;&#125;; <span class="comment">// -pedantic warn</span></span><br><span class="line"><span class="comment">// gcc -&gt; warning: ISO C forbids empty initializer braces before C2X [-Wpedantic]</span></span><br><span class="line"><span class="comment">// clang -&gt; warning: use of GNU empty initializer extension [-Wgnu-empty-initializer]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> = &#123;<span class="number">0</span>&#125;; <span class="comment">// ok for c</span></span><br><span class="line"><span class="comment">// but c++ not happy</span></span><br><span class="line"><span class="comment">// gcc -&gt; warning: missing initializer for member &#x27;b&#x27; [-Wmissing-field-initializers]</span></span><br><span class="line"><span class="comment">// clang -&gt; warning: missing field &#x27;b&#x27; initializer [-Wmissing-field-initializers]</span></span><br></pre></td></tr></table></figure><p>C++11编译问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// warning: ISO C++11 does not allow conversion from string literal to &#x27;char *&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_35683407/article/details/119603415">https://blog.csdn.net/qq_35683407/article/details/119603415</a></p><p>gcc -Wuninitialized会warn<br>clang编译好像没有警告 clang –analyze可以<br>msvc &#x2F;permissive检查比较严格</p><p><a href="https://curl.se/docs/caextract.html">https://curl.se/docs/caextract.html</a></p><p>gcc与vs2013的三个charset编译选项<br><a href="https://www.cnblogs.com/findumars/p/6627255.html">https://www.cnblogs.com/findumars/p/6627255.html</a><br><a href="https://zh.cppreference.com/w/c/language/translation_phases">https://zh.cppreference.com/w/c/language/translation_phases</a></p><p>C 语言中 static 的作用<br><a href="https://www.runoob.com/w3cnote/c-static-effect.html">https://www.runoob.com/w3cnote/c-static-effect.html</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *🐱 = <span class="string">&quot;cat&quot;</span>; <span class="comment">// 实现定义（ Clang 可用，但版本 10 前的 GCC 不可）</span></span><br></pre></td></tr></table></figure><p>确定对象身份（左值求值）或读取之前赋给对象的值（右值求值）<br><a href="https://zh.cppreference.com/w/c/language/eval_order">https://zh.cppreference.com/w/c/language/eval_order</a></p><p>c构造函数<br><a href="https://www.cnblogs.com/imlgc/archive/2014/06/25/3808507.html">https://www.cnblogs.com/imlgc/archive/2014/06/25/3808507.html</a><br><a href="https://www.orcode.com/question/217772_k204b7.html">https://www.orcode.com/question/217772_k204b7.html</a></p><p>在main函数启动前和退出后执行代码<br><a href="https://www.cnblogs.com/shokey520/p/3680804.html">https://www.cnblogs.com/shokey520/p/3680804.html</a></p><p>gcc由于全局对象的构建和析构都是由运行库完成的，于是在程序或共享库中有全局对象时，记得不能使用“-nonstartfiles”或“-nostdlib”选项，否则，构建与析构函数将不能正常执行（除非你很清楚自己的行为，并且手工构造和析构全局对象）。</p><p>select、poll、epoll程序实例<br><a href="https://www.cnblogs.com/bugutian/p/4816764.html">https://www.cnblogs.com/bugutian/p/4816764.html</a></p><p><a href="https://code.saghul.net/2016/05/libuv-internals-the-osx-select2-trick/">https://code.saghul.net/2016/05/libuv-internals-the-osx-select2-trick/</a></p><p>ps使用<br>ps -wwo args -p7230<br>ps -wwo comm -p7230<br>ps -cwwo comm -p7230<br>ps -chwwo comm -p7230<br>ps -wwo comm,args -p7230</p><p>wrk测试<br>wrk -c12 -d3s -t1 <a href="http://www.meitulu.cn/">http://www.meitulu.cn/</a> -H “Accept-Encoding: deflate, gzip”<br>bombardier -c12 -d3s <a href="http://www.meitulu.cn/">http://www.meitulu.cn/</a> -H “Accept-Encoding: deflate, gzip”</p><p>breakpad生成dmp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lldb -c 8F1E87E4-11F2-4646-BDC5-ABDAEC89FC69.dmp</span><br><span class="line"></span><br><span class="line">free((int*)0xFEE1DEAD);</span><br><span class="line">delete reinterpret_cast&lt;int*&gt;(0xFEE1DEAD);</span><br></pre></td></tr></table></figure><p>Rust<br><a href="http://mirrors.ustc.edu.cn/help/crates.io-index.html">http://mirrors.ustc.edu.cn/help/crates.io-index.html</a><br><a href="https://rsproxy.cn/">https://rsproxy.cn/</a></p><p><a href="https://lief-project.github.io/">https://lief-project.github.io/</a><br>LIEF : Library to Instrument Executable Formats<br>This project aims at providing a cross platform library to parse, modify and abstract ELF, PE and MachO formats.</p><p>Windows On Arm Resources<br><a href="https://linaro.atlassian.net/wiki/spaces/WOAR/overview">https://linaro.atlassian.net/wiki/spaces/WOAR/overview</a></p><p><a href="https://www.likecs.com/ask-1171204.html">https://www.likecs.com/ask-1171204.html</a><br><a href="https://snai.pe/posts/c-smart-pointers">https://snai.pe/posts/c-smart-pointers</a><br><a href="https://blog.csdn.net/guyueshanliangxin/article/details/106474989">https://blog.csdn.net/guyueshanliangxin/article/details/106474989</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> auto_free __attribute__ ((cleanup(sfree)))</span></span><br><span class="line"></span><br><span class="line">__attribute__((always_inline))</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">sfree</span><span class="params">(<span class="type">void</span>* str)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !str ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">free</span>( *(<span class="type">void</span>**)str );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;auto release\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    auto_free <span class="type">char</span>* tmp_str = <span class="built_in">calloc</span>(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蚂蚁加速器-windows端口转发给macos或其他局域网设备使用"><a href="#蚂蚁加速器-windows端口转发给macos或其他局域网设备使用" class="headerlink" title="蚂蚁加速器 windows端口转发给macos或其他局域网设备使用"></a>蚂蚁加速器 windows端口转发给macos或其他局域网设备使用</h2><p>netsh interface portproxy add v4tov4 listenport&#x3D;1081 listenaddress&#x3D;10.106.19.66 connectport&#x3D;1080 connectaddress&#x3D;localhost<br>netsh interface portproxy show all<br>netsh interface portproxy delete v4tov4 listenport&#x3D;1081 listenaddress&#x3D;10.106.19.66<br>netsh advfirewall firewall add rule name&#x3D;ANT_PROXY dir&#x3D;in action&#x3D;allow protocol&#x3D;tcp localport&#x3D;1081<br>netsh advfirewall firewall delete rule name&#x3D;ANT_PROXY<br>注意事项: 可能需要先关掉防火墙 ping权限(文件和打印机共享)<br>#netsh advfirewall firewall show rule dir&#x3D;in type&#x3D;dynamic status&#x3D;enabled name&#x3D;ANT_PROXY<br>#netsh advfirewall firewall show rule name&#x3D;all dir&#x3D;in type&#x3D;dynamic status&#x3D;enabled<br>Ref: <a href="https://blog.csdn.net/vr7jj/article/details/80531353">https://blog.csdn.net/vr7jj/article/details/80531353</a><br><a href="https://www.cnblogs.com/boltkiller/articles/5732497.html">https://www.cnblogs.com/boltkiller/articles/5732497.html</a></p><p>2021-06-01-WSL 2 兼容性问题<br>dism.exe &#x2F;Online &#x2F;Disable-Feature &#x2F;FeatureName:Microsoft-Hyper-V-All<br><a href="https://www.jianshu.com/p/5f3cb933f9b6">https://www.jianshu.com/p/5f3cb933f9b6</a><br>Disable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform<br>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</p><h2 id="linuxaudit-–-gt-libaudit-–-gt-audit-open"><a href="#linuxaudit-–-gt-libaudit-–-gt-audit-open" class="headerlink" title="linuxaudit –&gt; libaudit –&gt; audit_open()"></a>linuxaudit –&gt; libaudit –&gt; audit_open()</h2><p>brew install llvm<br>export PATH&#x3D;”&#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;llvm&#x2F;bin:$PATH”</p><p>&#x2F;&#x2F; 0x00000001 | &#x2F;&#x2F; File read (fr)<br>&#x2F;&#x2F; 0x00000040 | &#x2F;&#x2F; File close (cl)<br>&#x2F;&#x2F; 0x20000000 | &#x2F;&#x2F; ioctl (io)<br>非常频繁</p><h2 id="ArchLinux-systemd"><a href="#ArchLinux-systemd" class="headerlink" title="ArchLinux systemd"></a>ArchLinux systemd</h2><p>docker commit -m “manjaro” 7f359fcf09b0 manjaro<br>docker run -it -d –entrypoint&#x3D;&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd –mount type&#x3D;bind,source&#x3D;&#x2F;sys&#x2F;fs&#x2F;cgroup,target&#x3D;&#x2F;sys&#x2F;fs&#x2F;cgroup –mount type&#x3D;tmpfs,destination&#x3D;&#x2F;run manjaro bash</p><h2 id="pacman-color"><a href="#pacman-color" class="headerlink" title="pacman color"></a>pacman color</h2><p>sudo sed -i “s&#x2F;#Color&#x2F;Color&#x2F;g” &#x2F;etc&#x2F;pacman.conf</p><h2 id="clang-pg支持-Richard-Smith-6年前-1-25th-2017-3-39-凌晨"><a href="#clang-pg支持-Richard-Smith-6年前-1-25th-2017-3-39-凌晨" class="headerlink" title="clang -pg支持   Richard Smith, 6年前  (1 25th, 2017 3:39 凌晨)"></a>clang -pg支持   Richard Smith, 6年前  (1 25th, 2017 3:39 凌晨)</h2><p><a href="https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-pg">https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-pg</a></p><h2 id="名称查找进程"><a href="#名称查找进程" class="headerlink" title="名称查找进程"></a>名称查找进程</h2><p>man pgrep<br>pgrep, pkill – find or signal processes by name<br>taskkill ?for windows</p><h2 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h2><p>Android –&gt; termux&#x2F;aidlearning<br>iOS –&gt; iSH Shell&#x2F;UTM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_43652666/article/details/125161234</span><br><span class="line"></span><br><span class="line">vmware此平台不支持虚拟化的 Intel VT-x/EP</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/u013511036/article/details/126049334</span><br><span class="line"></span><br><span class="line">此平台不支持虚拟化的Intel VT-x/EPT</span><br><span class="line"></span><br><span class="line">WSL2依赖虚拟机平台 与Intel VT-x/EPT冲突</span><br><span class="line"></span><br><span class="line">macOS无法启用IOMMU</span><br></pre></td></tr></table></figure><h2 id="Package-swift"><a href="#Package-swift" class="headerlink" title="Package.swift"></a>Package.swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"><span class="keyword">let</span> package <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">name: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">dependencies: [</span><br><span class="line">.package(url: <span class="string">&quot;https://github.com/Alamofire/Alamofire.git&quot;</span>, .upToNextMajor(from: <span class="string">&quot;5.6.1&quot;</span>)),</span><br><span class="line">.package(url: <span class="string">&quot;https://github.com/SwiftyJSON/SwiftyJSON.git&quot;</span>, from: <span class="string">&quot;4.0.0&quot;</span>),</span><br><span class="line">],</span><br><span class="line">targets: [</span><br><span class="line">.executableTarget(</span><br><span class="line">name: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">dependencies: [<span class="string">&quot;SwiftyJSON&quot;</span>, <span class="string">&quot;Alamofire&quot;</span>]),</span><br><span class="line">.testTarget(</span><br><span class="line">name: <span class="string">&quot;helloTests&quot;</span>,</span><br><span class="line">dependencies: [<span class="string">&quot;hello&quot;</span>]),</span><br><span class="line">]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="maven-spring"><a href="#maven-spring" class="headerlink" title="maven spring"></a>maven spring</h2><p>&#x2F;Users&#x2F;wurui&#x2F;.m2&#x2F;wrapper&#x2F;dists&#x2F;apache-maven-3.8.6-bin&#x2F;1ks0nkde5v1pk9vtc31i9d0lcd&#x2F;apache-maven-3.8.6&#x2F;conf&#x2F;settings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="glfw-cmake"><a href="#glfw-cmake" class="headerlink" title="glfw cmake"></a>glfw cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(glfw3 REQUIRED)</span><br><span class="line"><span class="keyword">get_cmake_property</span>(_variableNames VARIABLES)</span><br><span class="line"><span class="keyword">foreach</span> (_variableName <span class="variable">$&#123;_variableNames&#125;</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">&quot;$&#123;_variableName&#125;=$&#123;$&#123;_variableName&#125;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure><h2 id="qtbase-macOS-ninja-build"><a href="#qtbase-macOS-ninja-build" class="headerlink" title="qtbase macOS ninja build"></a>qtbase macOS ninja build</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake -Bbuild -GNinja</span><br><span class="line">time ninja -C build</span><br><span class="line">clang 13 3m40s -&gt; 3m13s</span><br><span class="line">clang 14 2m50s</span><br></pre></td></tr></table></figure><p>理解全双工http<br><a href="https://www.cnblogs.com/LoveOpenSourceBoy/p/14192243.html">https://www.cnblogs.com/LoveOpenSourceBoy/p/14192243.html</a><br>http1.1:半双工<br>http2.0是全双工<br>HTTP&#x2F;2推送服务器只能被浏览器来处理，而不是应用<br>HTTP2和WebSocket<br><a href="https://www.cnblogs.com/yrxing/p/15799678.html">https://www.cnblogs.com/yrxing/p/15799678.html</a><br>双工通信的Websocket<br><a href="https://www.cnblogs.com/ltfxy/p/16320346.html">https://www.cnblogs.com/ltfxy/p/16320346.html</a><br>websocket实时通讯聊天室<br><a href="https://www.cnblogs.com/ltfxy/p/12527794.html">https://www.cnblogs.com/ltfxy/p/12527794.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xattr</span><br><span class="line"><span class="built_in">ls</span> -l@</span><br><span class="line">xattr -l</span><br><span class="line">xattr -d com.apple.quarantine</span><br><span class="line">sudo xattr -r -d com.apple.quarantine</span><br><span class="line">xattr -cr</span><br></pre></td></tr></table></figure><h2 id="XNU内核启动"><a href="#XNU内核启动" class="headerlink" title="XNU内核启动"></a>XNU内核启动</h2><p>osfmk&#x2F;kern&#x2F;startup.c<br>__startup_func<br>void<br>kernel_startup_bootstrap(void)<br>osfmk&#x2F;kern&#x2F;startup.h<br>#define __startup_func <br> __PLACE_IN_SECTION(STARTUP_CODE_SEGSECT) <br> <strong>attribute</strong>((cold, visibility(“hidden”)))<br>osfmk&#x2F;arm&#x2F;arm_init.c<br>__startup_func<br>void<br>arm_init(<br> boot_args       *args)<br>osfmk&#x2F;arm&#x2F;start.s<br>LOAD_ADDR(lr, arm_init)</p><h2 id="Windows-源码"><a href="#Windows-源码" class="headerlink" title="Windows 源码"></a>Windows 源码</h2><p>WinNT4 <a href="https://github.com/ZoloZiak/WinNT4">https://github.com/ZoloZiak/WinNT4</a><br><a href="https://github.com/Mooliecool/windows">https://github.com/Mooliecool/windows</a><br>WinNT5&#x2F;XPSP1 <a href="https://github.com/jiubanlo/WinNT5_src_20201004">https://github.com/jiubanlo/WinNT5_src_20201004</a></p><h2 id="Shader-book"><a href="#Shader-book" class="headerlink" title="Shader book"></a>Shader book</h2><p><a href="https://thebookofshaders.com/?lan=ch">https://thebookofshaders.com/?lan=ch</a></p><h2 id="nim的特殊之处"><a href="#nim的特殊之处" class="headerlink" title="nim的特殊之处"></a>nim的特殊之处</h2><p>函数括号省略 echo(“Hello”) –&gt; echo “Hello”<br>第一个参数的形式化 sort(c) –&gt; c.sort() –&gt; c.sort</p><p>ruby 函数括号省略</p><h2 id="lua的loadlib"><a href="#lua的loadlib" class="headerlink" title="lua的loadlib"></a>lua的loadlib</h2><p>返回的函数不支持参数<br>只能用于初始化</p><h2 id="Lua完美打印一个Table的方案"><a href="#Lua完美打印一个Table的方案" class="headerlink" title="Lua完美打印一个Table的方案"></a>Lua完美打印一个Table的方案</h2><p><a href="https://www.cnblogs.com/leezj/p/4230271.html">https://www.cnblogs.com/leezj/p/4230271.html</a></p><h2 id="xcode配置bitcode说明"><a href="#xcode配置bitcode说明" class="headerlink" title="xcode配置bitcode说明"></a>xcode配置bitcode说明</h2><p><a href="https://www.jianshu.com/p/a971355877cb">https://www.jianshu.com/p/a971355877cb</a><br>对应iOS，bitcode是可选的。<br>对于watchOS，bitcode是必须的。<br>Mac OS不支持bitcode。</p><p>Xcode 弃用 Bitcode，导致应用体积大幅增加<br><a href="https://www.oschina.net/news/217744/xcode14-increases-app-size">https://www.oschina.net/news/217744/xcode14-increases-app-size</a></p><h2 id="checksum"><a href="#checksum" class="headerlink" title="checksum"></a>checksum</h2><p>shasum - Print or Check SHA Checksums [shasum is implemented using the Perl module Digest::SHA.]</p><p>md5 data.png<br>openssl dgst -md5 data.png<br>openssl dgst -sha5 data.png</p><h2 id="macOS文稿目录-HOME-x2F-Documents不适合开发-最新的系统会频繁提醒访问"><a href="#macOS文稿目录-HOME-x2F-Documents不适合开发-最新的系统会频繁提醒访问" class="headerlink" title="macOS文稿目录$HOME&#x2F;Documents不适合开发 最新的系统会频繁提醒访问"></a>macOS文稿目录$HOME&#x2F;Documents不适合开发 最新的系统会频繁提醒访问</h2><p><a href="https://www.brunerd.com/blog/2020/01/07/track-and-tackle-com-apple-macl/">https://www.brunerd.com/blog/2020/01/07/track-and-tackle-com-apple-macl/</a><br>xattr -l $HOME&#x2F;Documents<br>ls -l -d $HOME&#x2F;Documents<br>可用路径$HOME以及&#x2F;Users&#x2F;Shared</p><h2 id="winget"><a href="#winget" class="headerlink" title="winget"></a>winget</h2><p><a href="https://winget.azureedge.net/cache">https://winget.azureedge.net/cache</a></p><p>152.199.39.108 ping不通 新建账户也不行<br>虚拟机 Manjaro可以 系统设置故障??</p><h2 id="消除Signal-lt-void-string-gt-指定类型-自动推导"><a href="#消除Signal-lt-void-string-gt-指定类型-自动推导" class="headerlink" title="消除Signal&lt;void, string&gt;指定类型 自动推导"></a>消除Signal&lt;void, string&gt;指定类型 自动推导</h2><p>参考src&#x2F;corelib&#x2F;kernel&#x2F;qobjectdefs_impl.h</p><h2 id="关于设计模式：SoA-x2F-AoS内存布局的C-零成本抽象"><a href="#关于设计模式：SoA-x2F-AoS内存布局的C-零成本抽象" class="headerlink" title="关于设计模式：SoA &#x2F; AoS内存布局的C ++零成本抽象"></a>关于设计模式：SoA &#x2F; AoS内存布局的C ++零成本抽象</h2><p><a href="https://www.codenong.com/50574639/">https://www.codenong.com/50574639/</a></p><h2 id="small-vector"><a href="#small-vector" class="headerlink" title="small_vector"></a>small_vector</h2><p><a href="https://github.com/p-ranav/small_vector/blob/master/include/small_vector/small_vector.h">https://github.com/p-ranav/small_vector/blob/master/include/small_vector/small_vector.h</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, std::<span class="type">size_t</span> N, <span class="keyword">class</span> <span class="title class_">Allocator</span> = std::allocator&lt;T&gt;&gt; <span class="keyword">class</span> small_vector &#123;</span><br><span class="line">std::array&lt;T, N&gt; stack_;</span><br><span class="line">std::vector&lt;T, Allocator&gt; heap_;</span><br><span class="line">std::<span class="type">size_t</span> size_&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="Enable-sudo-without-a-password-on-MacOS"><a href="#Enable-sudo-without-a-password-on-MacOS" class="headerlink" title="Enable sudo without a password on MacOS"></a>Enable sudo without a password on MacOS</h2><p><a href="https://jefftriplett.com/2022/enable-sudo-without-a-password-on-macos/">https://jefftriplett.com/2022/enable-sudo-without-a-password-on-macos/</a></p><h2 id="audit-event"><a href="#audit-event" class="headerlink" title="audit_event"></a>audit_event</h2><p>cat &#x2F;etc&#x2F;security&#x2F;audit_event | grep :pc</p><h2 id="window-system"><a href="#window-system" class="headerlink" title="window system"></a>window system</h2><ul><li>linux (X Window)<br>XOpenDisplay -&gt; XCreateWindow -&gt; XCreateImage -&gt; XPutImage</li><li>macos<br>NSWindow</li><li>windows<br>CreateWindow</li></ul><h2 id="target-lt-gt-action"><a href="#target-lt-gt-action" class="headerlink" title="target &lt;-&gt; action"></a>target &lt;-&gt; action</h2><p>cell&#x2F;control&#x2F;menuitem<br>NSView-&gt;NSControl</p><h2 id="关于堆栈"><a href="#关于堆栈" class="headerlink" title="关于堆栈"></a>关于堆栈</h2><p>全局栈(全局区?) 无限制<br>若初始化字符串 生成的二进制膨胀 .global .text<br>栈大小 8192kbyte (m1 macmini) 包括alloca<br>线程限制 (代码栈+数据栈）<br>代码栈 递归和函数个数限制<br>数据栈 静态分配大小限制<br>栈几乎无分配开销<br>堆开销 malloc 40ns(m1 macmini)<br>1byte~1024<em>1024byte变化不大 1024</em>1024byte之后的某个点 开销上升60倍<br>100<em>1024</em>1024byte 大概需要40us<br>结构体返回 栈拷贝</p><p>alloca使用例子 <a href="https://github.com/apache/apr/blob/trunk/poll/unix/poll.c#L80">https://github.com/apache/apr/blob/trunk/poll/unix/poll.c#L80</a><br>栈上的链表 <a href="https://course.rs/too-many-lists/advanced-lists/stack-allocated.html">https://course.rs/too-many-lists/advanced-lists/stack-allocated.html</a></p><h2 id="imagemagick"><a href="#imagemagick" class="headerlink" title="imagemagick"></a>imagemagick</h2><p>convert -size 32000x32000 pattern:checkerboard -auto-level +level-colors white,black tiff64:test.tif<br>convert -size 20000x20000 xc:skyblue skyblue.tif<br>convert -size 10000x10000 pattern:checkerboard checkerboard.tif<br>convert -size 5000x5000 pattern:checkerboard -auto-level +level-colors white,black checkerboard.tif</p><h2 id="shuriken"><a href="#shuriken" class="headerlink" title="shuriken"></a>shuriken</h2><p><a href="https://github.com/per-gron/shuriken/blob/d826e295dc0bbf2c19c597035414f1ddec2e46fa/src/traceexec/README.md">https://github.com/per-gron/shuriken/blob/d826e295dc0bbf2c19c597035414f1ddec2e46fa/src/traceexec/README.md</a></p><h2 id="macos-log"><a href="#macos-log" class="headerlink" title="macos log"></a>macos log</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span> stream --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;tmp&quot;&#x27;</span></span><br><span class="line"><span class="built_in">log</span> show --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;tmp&quot;&#x27;</span></span><br><span class="line"><span class="built_in">log</span> <span class="built_in">help</span> predicates</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> KEXT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libkern/libkern.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(...)    PrintCurrentProcess();printf(<span class="string">&quot;Echo: &quot;</span> __VA_ARGS__); printf(<span class="string">&quot;\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGE(...)   PrintCurrentProcess;printf(<span class="string">&quot;Echo: [Error] &quot;</span> __VA_ARGS__); printf(<span class="string">&quot;\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> IOKIT_KEXT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;IOKit/IOLib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(...)    PrintCurrentProcess;IOLog(<span class="string">&quot;IOKitEcho: &quot;</span> __VA_ARGS__); IOLog(<span class="string">&quot;\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGE(...)   PrintCurrentProcess;IOLog(<span class="string">&quot;IOKitEcho: [Error] &quot;</span> __VA_ARGS__); IOLog(<span class="string">&quot;\n&quot;</span>);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="create-macos-recovery"><a href="#create-macos-recovery" class="headerlink" title="create_macos_recovery"></a>create_macos_recovery</h2><p><a href="https://github.com/rtrouton/create_macos_recovery">https://github.com/rtrouton/create_macos_recovery</a><br>Note: macOS Big Sur (macOS 11.x) made significant changes to the Recovery volume and it is unlikely this script will support any version of macOS past macOS 10.15.x.</p><h2 id="mach-msg-send-x2F-mach-msg-receive"><a href="#mach-msg-send-x2F-mach-msg-receive" class="headerlink" title="mach_msg_send&#x2F;mach_msg_receive"></a>mach_msg_send&#x2F;mach_msg_receive</h2><p><a href="https://github.com/apple-oss-distributions/xnu/blob/5c2921b07a2480ab43ec66f5b9e41cb872bc554f/libsyscall/mach/mach_msg.c#L314-L328">https://github.com/apple-oss-distributions/xnu/blob/5c2921b07a2480ab43ec66f5b9e41cb872bc554f/libsyscall/mach/mach_msg.c#L314-L328</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">mach_msg_return_t</span></span><br><span class="line"><span class="title function_">mach_msg_send</span><span class="params">(<span class="type">mach_msg_header_t</span> *msg)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> mach_msg(msg, MACH_SEND_MSG,</span><br><span class="line"> msg-&gt;msgh_size, <span class="number">0</span>, MACH_PORT_NULL,</span><br><span class="line"> MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mach_msg_return_t</span></span><br><span class="line"><span class="title function_">mach_msg_receive</span><span class="params">(<span class="type">mach_msg_header_t</span> *msg)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> mach_msg(msg, MACH_RCV_MSG,</span><br><span class="line"> <span class="number">0</span>, msg-&gt;msgh_size, msg-&gt;msgh_local_port,</span><br><span class="line"> MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【摘录】OSX&#x2F;iOS 的系统mach_msg浅解<br><a href="https://www.jianshu.com/p/4596d2dd2d88">https://www.jianshu.com/p/4596d2dd2d88</a><br><a href="https://nshipster.com/inter-process-communication/">https://nshipster.com/inter-process-communication/</a><br><a href="https://segmentfault.com/a/1190000002400329">https://segmentfault.com/a/1190000002400329</a></p><h2 id="pcap"><a href="#pcap" class="headerlink" title="pcap"></a>pcap</h2><p><a href="https://github.com/GyulyVGC/sniffnet">https://github.com/GyulyVGC/sniffnet</a><br><a href="https://github.com/rust-pcap/pcap/blob/main/src/raw.rs">https://github.com/rust-pcap/pcap/blob/main/src/raw.rs</a></p><p>man pcap<br>pcap -&gt; bpf -&gt; nke&#x2F;ke</p><h2 id="nmap-masscan-各自优缺点，快速上手综合使用"><a href="#nmap-masscan-各自优缺点，快速上手综合使用" class="headerlink" title="nmap+masscan 各自优缺点，快速上手综合使用"></a>nmap+masscan 各自优缺点，快速上手综合使用</h2><p><a href="https://blog.csdn.net/qq_53079406/article/details/122922401">https://blog.csdn.net/qq_53079406/article/details/122922401</a><br>Masscan 最快的互联网IP端口扫描器<br><a href="https://www.cnblogs.com/hubin123/p/16517022.html">https://www.cnblogs.com/hubin123/p/16517022.html</a></p><h2 id="Reactor和Proactor"><a href="#Reactor和Proactor" class="headerlink" title="Reactor和Proactor"></a>Reactor和Proactor</h2><p>Reactor 可以理解为「来了事件操作系统通知应用进程，让应用进程来处理」，而 Proactor 可以理解为「来了事件操作系统来处理，处理完再通知应用进程」。这里的「事件」就是有新连接、有数据可读、有数据可写的这些 I&#x2F;O 事件这里的「处理」包含从驱动读取到内核以及从内核读取到用户空间。</p><p>如何深刻理解Reactor和Proactor？<br><a href="https://www.zhihu.com/question/26943938">https://www.zhihu.com/question/26943938</a></p><h2 id="root函数指针"><a href="#root函数指针" class="headerlink" title="root函数指针"></a>root函数指针</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ root -l</span><br><span class="line">root [0] void func()</span><br><span class="line">root [1] func</span><br><span class="line">input_line_10:2:3: error: use of undeclared identifier <span class="string">&#x27;func&#x27;</span></span><br><span class="line"> (func)</span><br><span class="line">  ^</span><br><span class="line">root [2] void (*func)()</span><br><span class="line">(void (*)()) Function @0x0</span><br><span class="line">root [3] func</span><br><span class="line">(void (*)()) Function @0x0</span><br><span class="line">root [4] void <span class="function"><span class="title">func2</span></span>()&#123;&#125;</span><br><span class="line">root [5] func2</span><br><span class="line">(void (*)()) Function @0x1196e8080</span><br><span class="line">  at input_line_14:2:</span><br><span class="line">void <span class="function"><span class="title">func2</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">root [6] func = func2</span><br><span class="line">(void (*)()) Function @0x1196e8080</span><br><span class="line">root [7] func</span><br><span class="line">(void (*)()) Function @0x1196e8080</span><br><span class="line">root [8] func2</span><br><span class="line">(void (*)()) Function @0x1196e8080</span><br><span class="line">  at input_line_14:2:</span><br><span class="line">void <span class="function"><span class="title">func2</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="pcap-gt-bpf"><a href="#pcap-gt-bpf" class="headerlink" title="pcap -&gt; bpf"></a>pcap -&gt; bpf</h2><p>man pcap_compile<br>man pcap-filter<br>sudo tcpdump port 53</p><h2 id="plutil-SystemExtensions"><a href="#plutil-SystemExtensions" class="headerlink" title="plutil SystemExtensions"></a>plutil SystemExtensions</h2><p>plutil -p &#x2F;Library&#x2F;SystemExtensions&#x2F;db.plist</p><h2 id="choco-and-scoop"><a href="#choco-and-scoop" class="headerlink" title="choco and scoop"></a>choco and scoop</h2><p>choco安装需要 管理员 powershell<br>scoop需要powershell 不需要管理员<br>scoop需要退出登陆 PATH环境变量才生效</p><h2 id="在-Windows-11-下安装和使用-SSH-连接远程服务器"><a href="#在-Windows-11-下安装和使用-SSH-连接远程服务器" class="headerlink" title="在 Windows 11 下安装和使用 SSH 连接远程服务器"></a>在 Windows 11 下安装和使用 SSH 连接远程服务器</h2><p><a href="https://www.yundongfang.com/Yun73222.html">https://www.yundongfang.com/Yun73222.html</a><br>Get-WindowsCapability -Online | Where-Object Name -like  ‘OpenSSH*’<br>Add-WindowsCapability -Online -Name OpenSSH.Server<br><a href="https://www.jianshu.com/p/9235e33c2ca0">https://www.jianshu.com/p/9235e33c2ca0</a><br>sc query sshd<br>sc config sshd start&#x3D;auto<br>sc start sshd</p><h2 id="ssh免密登陆"><a href="#ssh免密登陆" class="headerlink" title="ssh免密登陆"></a>ssh免密登陆</h2><p>ssh-copy-id -i .ssh&#x2F;id_rsa.pub <a href="mailto:&#x75;&#115;&#x65;&#x72;&#64;&#49;&#48;&#46;&#x32;&#50;&#x36;&#x2e;&#x33;&#50;&#x2e;&#55;&#54;">&#x75;&#115;&#x65;&#x72;&#64;&#49;&#48;&#46;&#x32;&#50;&#x36;&#x2e;&#x33;&#50;&#x2e;&#55;&#54;</a><br><a href="https://www.cnblogs.com/kasader/p/12760284.html">https://www.cnblogs.com/kasader/p/12760284.html</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS记录</title>
      <link href="/2023/06/27/macos-note/"/>
      <url>/2023/06/27/macos-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/utmapp/UTM">UTM</a><br><a href="https://github.com/adespoton/utmconfigs">utmconfigs</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MallocStackLogging=1 ./titanagent</span><br><span class="line">sudo heap -guessNonObjects -<span class="built_in">sort</span> $(pgrep titanagent)</span><br></pre></td></tr></table></figure><h2 id="macos-ventura-note-md"><a href="#macos-ventura-note-md" class="headerlink" title="macos_ventura_note.md"></a>macos_ventura_note.md</h2><p>CODE_SIGNING_MONITOR<br>xnu&#x2F;bsd&#x2F;kern&#x2F;kern_codesigning.c</p><p>drop 32bit arm</p><p>xnu&#x2F;bsd&#x2F;sys&#x2F;constrained_ctypes.h<br>xnu&#x2F;bsd&#x2F;sys&#x2F;kdebug_triage.h<br>xnu&#x2F;bsd&#x2F;sys&#x2F;trust_caches.h</p><p>xnu&#x2F;config&#x2F;MasterVersion<br>xnu&#x2F;doc&#x2F;memorystatus&#x2F;overview.md</p><p>xnu&#x2F;doc&#x2F;sched_cond.md<br>Atomic Condition Variables for Thread Synchronization</p><p>xnu&#x2F;osfmk&#x2F;kern&#x2F;cambria_layout.h</p><p>[+] xnu&#x2F;osfmk&#x2F;kern&#x2F;iotrace.h</p><p>xnu&#x2F;osfmk&#x2F;kern&#x2F;smr.c<br>SMR clocks have 3 state machines interacting at any given timea</p><h2 id="kdebug-note-md"><a href="#kdebug-note-md" class="headerlink" title="kdebug_note.md"></a>kdebug_note.md</h2><p>sudo ktrace trace -sS -p 62872 | grep test</p><p>export PATH&#x3D;$PATH:&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Applications&#x2F;Instruments.app&#x2F;Contents&#x2F;MacOS<br>instruments  -d result.trace -t ‘System Trace’ &#x2F;bin&#x2F;ls<br>open result.trace</p><p>sudo .&#x2F;kdv 23960 | grep BSC_</p><p>sudo ktrace trace -p 62872</p><p>sudo ktrace setopt -x 62872<br>sudo ktrace dump -T1 -p 62872</p><p>dump的过滤好像无效<br>ktrace dump trace001.trace<br>ktrace trace -R trace001.trace -p firefox<br>只能先dump再过滤???</p><p><a href="https://github.com/nowsecure/fsmon">https://github.com/nowsecure/fsmon</a></p><p>sudo ktrace setopt -x firefox<br>sudo ktrace dump -p firefox</p><h2 id="bash-inject"><a href="#bash-inject" class="headerlink" title="bash inject"></a>bash inject</h2><p>sudo mv &#x2F;bin&#x2F;bash &#x2F;bin&#x2F;bash_old<br>Password:<br>mv: rename &#x2F;bin&#x2F;bash to &#x2F;bin&#x2F;bash_old: Operation not permitted</p><p>macOS可能不具备bash注入能力</p><h2 id="获取运行进程的CFBundleIdentifier"><a href="#获取运行进程的CFBundleIdentifier" class="headerlink" title="获取运行进程的CFBundleIdentifier"></a>获取运行进程的CFBundleIdentifier</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl procinfo 48339 | grep CFBundleIdentifier | <span class="built_in">head</span> -n1 | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="获取bundleid根据bundleid打开应用"><a href="#获取bundleid根据bundleid打开应用" class="headerlink" title="获取bundleid根据bundleid打开应用"></a>获取bundleid根据bundleid打开应用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -dump | grep identifier: | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">sort</span> -u</span><br><span class="line">open -b com.apple.Console <span class="comment">#控制台</span></span><br><span class="line">open -b com.apple.grapher</span><br><span class="line">open -b com.netease.163music</span><br><span class="line">open -b com.tencent.qq</span><br><span class="line">open -b com.google.Chrome</span><br><span class="line">open -b com.kingsoft.wpsoffice.mac</span><br><span class="line">open -b com.apple.Dictionary</span><br><span class="line">open -b com.apple.DigitalColorMeter</span><br><span class="line">open -b com.apple.FontBook</span><br><span class="line">open -b com.apple.Preview</span><br><span class="line">open -b com.apple.calculator</span><br><span class="line">open -b com.apple.dt.Instruments</span><br><span class="line">open -b com.apple.finder</span><br><span class="line">open -b com.xunlei.Thunder</span><br><span class="line">open -b com.apple.TextEdit</span><br></pre></td></tr></table></figure><h2 id="macOS动态库"><a href="#macOS动态库" class="headerlink" title="macOS动态库"></a>macOS动态库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tapi - Text-based</span><br><span class="line">TAPI can generate text-based stub files (.tbd) from existing Mach-O</span><br><span class="line">libraries or parse the headers of a framework and infer the text-based</span><br><span class="line">stub file from it. Stubs Tool</span><br><span class="line"></span><br><span class="line">vtool – Mach-O version number utility</span><br><span class="line">The vtool utility displays and edits build and source version numbers</span><br><span class="line">embedded in the Mach-O(5) file format.</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vtool -show /opt/homebrew/opt/qt/lib/QtSvg.framework/QtSvg | grep minos</span><br><span class="line">vtool -show /opt/homebrew/opt/qt/lib/QtSvg.framework/QtSvg</span><br></pre></td></tr></table></figure><h2 id="Network-framework"><a href="#Network-framework" class="headerlink" title="Network.framework"></a>Network.framework</h2><p><a href="https://developer.apple.com/documentation/network">https://developer.apple.com/documentation/network</a><br><a href="https://developer.apple.com/documentation/network/implementing_netcat_with_network_framework">https://developer.apple.com/documentation/network/implementing_netcat_with_network_framework</a><br><a href="https://developer.apple.com/documentation/network/taking_advantage_of_third-party_network_debugging_tools">https://developer.apple.com/documentation/network/taking_advantage_of_third-party_network_debugging_tools</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -framework Network -framework Security main.c -o nwcat</span><br></pre></td></tr></table></figure><h2 id="Apple-OSS上的CF-CoreFoundation-有些没有开源-比如Notification的实现"><a href="#Apple-OSS上的CF-CoreFoundation-有些没有开源-比如Notification的实现" class="headerlink" title="Apple OSS上的CF(CoreFoundation)有些没有开源 比如Notification的实现"></a>Apple OSS上的CF(CoreFoundation)有些没有开源 比如Notification的实现</h2><h2 id="KDebug"><a href="#KDebug" class="headerlink" title="KDebug"></a>KDebug</h2><p><a href="https://github.com/matan1008/pykdebugparser">https://github.com/matan1008/pykdebugparser</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pykdebugparser</span><br><span class="line">sudo ktrace dump -p pid</span><br><span class="line">pykdebugparser kevents trace001.ktrace</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dump的过滤好像无效</span></span><br><span class="line">ktrace dump trace001.trace</span><br><span class="line">ktrace trace -R trace001.trace -p firefox</span><br><span class="line"><span class="comment"># 只能先dump再过滤???</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/per-gron/shuriken/tree/master/src/shk-trace">https://github.com/per-gron/shuriken/tree/master/src/shk-trace</a><br><a href="https://github.com/dlevi309/kdebugView">https://github.com/dlevi309/kdebugView</a><br><a href="https://github.com/nowsecure/fsmon">https://github.com/nowsecure/fsmon</a></p><p><a href="https://stackoverflow.com/questions/72549332/macos-ktrace-t-c-system-call-tracing-available-on-newer-macos">https://stackoverflow.com/questions/72549332/macos-ktrace-t-c-system-call-tracing-available-on-newer-macos</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ktrace trace -s -S -t c -p 25317 | grep <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">python</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://etcnotes.com/posts/system-call/">https://etcnotes.com/posts/system-call/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/MacOS</span><br><span class="line">instruments  -d result.trace -t <span class="string">&#x27;System Trace&#x27;</span> /bin/ls</span><br><span class="line">open result.trace</span><br><span class="line"><span class="comment"># 选择ls主线程 然后选择Events：System Calls</span></span><br></pre></td></tr></table></figure><h2 id="osquery-endpointsecurity"><a href="#osquery-endpointsecurity" class="headerlink" title="osquery endpointsecurity"></a>osquery endpointsecurity</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo osqueryi --disable_events=<span class="literal">false</span> --disable_audit=<span class="literal">false</span> --disable_endpointsecurity=<span class="literal">false</span> --audit_allow_config</span><br></pre></td></tr></table></figure><h2 id="recovery-mode-old-system"><a href="#recovery-mode-old-system" class="headerlink" title="recovery mode (old system)"></a>recovery mode (old system)</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usr/sbin/nvram internet-recovery-mode=RecoveryModeNetwork</span><br><span class="line">sudo /usr/sbin/nvram -d internet-recovery-mode</span><br></pre></td></tr></table></figure><h2 id="WPS-Office"><a href="#WPS-Office" class="headerlink" title="WPS Office"></a>WPS Office</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4.1.2 1.67G</span><br><span class="line">4.2.0 2.14G</span><br></pre></td></tr></table></figure><h2 id="OpenJDK-Symlink"><a href="#OpenJDK-Symlink" class="headerlink" title="OpenJDK Symlink"></a>OpenJDK Symlink</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk</span><br></pre></td></tr></table></figure><h2 id="system-profiler"><a href="#system-profiler" class="headerlink" title="system_profiler"></a>system_profiler</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system_profiler -json SPMemoryDataType</span><br><span class="line">system_profiler -listDataTypes</span><br></pre></td></tr></table></figure><h2 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">macOS</span><br><span class="line">这就是你如何将 stderr 重定向到 /dev/null</span><br><span class="line">command 2&gt; /dev/null</span><br><span class="line">例如</span><br><span class="line">ls -l 2&gt; /dev/null</span><br></pre></td></tr></table></figure><h2 id="brew-services-命令解析"><a href="#brew-services-命令解析" class="headerlink" title="brew services 命令解析"></a>brew services 命令解析</h2><p><a href="https://qiujunya.com/article/2019/6/23/23.html">https://qiujunya.com/article/2019/6/23/23.html</a></p><h2 id="mdutil"><a href="#mdutil" class="headerlink" title="mdutil"></a>mdutil</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/231076209</span><br><span class="line">关掉方法：sudo mdutil -a -i off</span><br><span class="line">打开方法: sudo mdutil -a -i on</span><br><span class="line"></span><br><span class="line">关闭mds_stores的命令：</span><br><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><br><span class="line">[开启是：sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist]</span><br><span class="line"></span><br><span class="line">关闭spotlight的命令：</span><br><span class="line">sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.Spotlight.plist</span><br><span class="line">[开启是：sudo launchctl load -w /System/Library/LaunchAgents/com.apple.Spotlight.plist]</span><br></pre></td></tr></table></figure><h2 id="macos13-Ventura虚拟机安装无网络问题"><a href="#macos13-Ventura虚拟机安装无网络问题" class="headerlink" title="macos13 Ventura虚拟机安装无网络问题"></a>macos13 Ventura虚拟机安装无网络问题</h2><p><a href="https://www.dhzy.fun/archives/4263.html">https://www.dhzy.fun/archives/4263.html</a></p><h2 id="set-hostname"><a href="#set-hostname" class="headerlink" title="set hostname"></a>set hostname</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scutil --<span class="built_in">set</span> HostName wurui</span><br></pre></td></tr></table></figure><h2 id="ibtool"><a href="#ibtool" class="headerlink" title="ibtool"></a>ibtool</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ibtool Window.xib --compile test.nib</span><br><span class="line">ibtool test.nib --upgrade --write test.xib</span><br><span class="line"><span class="comment"># [&lt;string&gt;Interface Builder cannot open compiled nibs.&lt;/string&gt;]</span></span><br></pre></td></tr></table></figure><h2 id="PlistBuddy简单使用"><a href="#PlistBuddy简单使用" class="headerlink" title="PlistBuddy简单使用"></a>PlistBuddy简单使用</h2><p><a href="https://www.jianshu.com/p/2167f755c47e">https://www.jianshu.com/p/2167f755c47e</a></p><h2 id="csrutil"><a href="#csrutil" class="headerlink" title="csrutil"></a>csrutil</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[-bash-3.2# csrutil disable</span><br><span class="line">Turning off System Integrity Protection requires modifying system security.</span><br><span class="line">Allow booting unsigned operating systems and any kernel extensions for os &quot;Macin</span><br><span class="line">tosh HD&quot;? [y/nl: y</span><br><span class="line">Authorized user: wurui</span><br><span class="line">[Password</span><br><span class="line">System Integrity Protection is off.</span><br><span class="line">Restart the machine for the changes to take effect.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M1芯片电脑添加系统扩展时提示：若要启用系统扩展，您需要在“恢复” </span><br><span class="line">https://www.bilibili.com/read/cv19689455</span><br><span class="line">https://www.jianshu.com/p/e459da1c8680</span><br></pre></td></tr></table></figure><h2 id="关闭-OSX-10-11-SIP-System-Integrity-Protection-功能"><a href="#关闭-OSX-10-11-SIP-System-Integrity-Protection-功能" class="headerlink" title="关闭 OSX 10.11 SIP (System Integrity Protection) 功能"></a>关闭 OSX 10.11 SIP (System Integrity Protection) 功能</h2><p><a href="https://www.cnblogs.com/lsgxeva/p/11872185.html">https://www.cnblogs.com/lsgxeva/p/11872185.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /System/Library/Sandbox/rootless.conf</span><br></pre></td></tr></table></figure><h2 id="10-15关闭SIP后升级到12-0的情况"><a href="#10-15关闭SIP后升级到12-0的情况" class="headerlink" title="10.15关闭SIP后升级到12.0的情况"></a>10.15关闭SIP后升级到12.0的情况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ csrutil status</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">System Integrity Protection status: unknown (Custom Configuration).</span><br><span class="line"></span><br><span class="line">Configuration:</span><br><span class="line"> Apple Internal: disabled</span><br><span class="line"> Kext Signing: disabled</span><br><span class="line"> Filesystem Protections: disabled</span><br><span class="line"> Debugging Restrictions: disabled</span><br><span class="line"> DTrace Restrictions: disabled</span><br><span class="line"> NVRAM Protections: disabled</span><br><span class="line"> BaseSystem Verification: enabled</span><br><span class="line"></span><br><span class="line">This is an unsupported configuration, likely to break in the future and leave your machine in an unknown state.</span><br></pre></td></tr></table></figure><h2 id="macOS-12-进程注入漏洞破坏所有安全层"><a href="#macOS-12-进程注入漏洞破坏所有安全层" class="headerlink" title="macOS 12 进程注入漏洞破坏所有安全层"></a>macOS 12 进程注入漏洞破坏所有安全层</h2><p><a href="https://www.oschina.net/news/206685/process-injection-breaking-all-macos-security-layers">https://www.oschina.net/news/206685/process-injection-breaking-all-macos-security-layers</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在 macOS 12.0.1 Monterey 中，苹果修复了编号为 CVE-2021-30873 的进程注入漏洞 (process injection)，此漏洞影响所有基于 macOS AppKit 的应用。</span><br><span class="line"></span><br><span class="line">进程注入</span><br><span class="line"></span><br><span class="line">进程注入是一个进程在不同进程中执行代码的能力。 在 Windows 中，使用它的一个原因是逃避防病毒扫描程序的检测，例如通过称为 DLL 劫持的技术。 这允许恶意代码伪装成不同可执行文件的一部分。 在 macOS 中，由于两个应用程序可以拥有的权限不同，这种技术的影响要大得多。</span><br><span class="line"></span><br><span class="line">在经典的 Unix 安全模型中，每个进程都以特定用户身份运行。 每个文件都有一个所有者、组和标志，这些标志确定允许哪些用户读取、写入或执行该文件。 以同一用户身份运行的两个进程具有相同的权限：假设它们之间没有安全边界。 用户是安全边界，流程不是。 如果两个进程作为同一个用户运行，那么一个进程可以作为调试器附加到另一个进程，允许它读取或写入另一个进程的内存和寄存器。 root 用户是一个例外，因为它可以访问所有文件和进程。 因此，root 始终可以访问计算机上的所有数据，无论是在磁盘上还是在 RAM 中。</span><br><span class="line"></span><br><span class="line">从本质上讲，在引入 SIP（​​也称为“无根”）之前，这与 macOS 的安全模型相同。 这个名称并不意味着不再有 root 用户，但现在它本身的功能已经不那么强大了。 例如，某些文件不能再被 root 用户读取，除非该进程也具有特定的权利。 权利是为可执行文件生成代码签名时包含的元数据。 检查进程是否具有特定权利是 macOS 中许多安全措施的重要组成部分。 Unix 所有权规则仍然存在，这是在它们之上的额外权限检查层。 某些敏感文件（例如 Mail.app 数据库）和功能（例如网络摄像头）不再仅具有 root 权限，但需要额外的权利。 换句话说，权限提升不足以完全破坏 Mac 上的敏感数据。 </span><br></pre></td></tr></table></figure><h1 id="xcdebug"><a href="#xcdebug" class="headerlink" title="xcdebug"></a>xcdebug</h1><p>Start a debugging session in Xcode.</p><h1 id="xcode-select"><a href="#xcode-select" class="headerlink" title="xcode-select"></a>xcode-select</h1><p>Manages the active developer directory for Xcode and BSD tools</p><h1 id="xctrace"><a href="#xctrace" class="headerlink" title="xctrace"></a>xctrace</h1><p>Record, import, export and symbolicate Instruments .trace files.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xctrace list devices</span><br><span class="line">xctrace list instruments</span><br><span class="line">xctrace list templates</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI相关</title>
      <link href="/2023/06/27/ai-note/"/>
      <url>/2023/06/27/ai-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Tencent/ncnn">ncnn</a><br><a href="https://github.com/gcdart/dense-matrix-mult">dense-matrix-mult</a><br><a href="https://github.com/xinntao/Real-ESRGAN-ncnn-vulkan">Real-ESRGAN-ncnn-vulkan</a><br><a href="https://github.com/humanloop/awesome-chatgpt">awesome-chatgpt</a><br><a href="https://github.com/zziz/pwc">pwc</a><br><a href="https://github.com/mldbai/mldb">mldb</a><br><a href="https://github.com/Baiyuetribe/paper2gui">paper2gui</a></p><h2 id="llm"><a href="#llm" class="headerlink" title="llm"></a>llm</h2><p><a href="https://gpt4all.io/">gpt4all</a><br><a href="https://llm.datasette.io/">llm</a><br><a href="https://ollama.ai/">ollama</a><br><a href="https://inference.readthedocs.io/en/latest/models/builtin/index.html">xinference models</a></p><h2 id="ollama"><a href="#ollama" class="headerlink" title="ollama"></a>ollama</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ollama pull orca-mini</span><br><span class="line">ollama serve</span><br><span class="line">ollama list</span><br><span class="line">ollama run orca-mini:3b</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ ollama run  orca-mini:3b</span><br><span class="line">: <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; what is love</span></span><br><span class="line"><span class="string"> Love is a complex emotion and feeling that arises from the way we see and</span></span><br><span class="line"><span class="string">interact with the world around us. It can be defined as a deep connection </span></span><br><span class="line"><span class="string">and affection towards someone or something, often accompanied by feelings </span></span><br><span class="line"><span class="string">of joy, happiness, and satisfaction. Different people and cultures have </span></span><br><span class="line"><span class="string">their own ways of defining and experiencing love, but at its core, it is </span></span><br><span class="line"><span class="string">an intensely personal and subjective experience.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; women in science</span></span><br><span class="line"><span class="string"> Women have made significant contributions to the field of science </span></span><br><span class="line"><span class="string">throughout history, and today they play important roles in many areas of </span></span><br><span class="line"><span class="string">scientific research. However, there remain disparities in representation </span></span><br><span class="line"><span class="string">and pay compared to their male counterparts. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The lack of women in science is a complex issue that has been shaped by </span></span><br><span class="line"><span class="string">various factors such as gender bias, cultural norms, and structural </span></span><br><span class="line"><span class="string">barriers. Initiatives like Women in Science programs and initiatives aim </span></span><br><span class="line"><span class="string">to address these issues and promote the advancement of women in scientific</span></span><br><span class="line"><span class="string">fields. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In recent years, there have been notable successes in increasing the </span></span><br><span class="line"><span class="string">number of women pursuing careers in science, including more female </span></span><br><span class="line"><span class="string">professors, researchers, and scientists at all levels. However, there is </span></span><br><span class="line"><span class="string">still much work to be done to ensure that women are fully represented and </span></span><br><span class="line"><span class="string">valued in science</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/06/27/os-note/"/>
      <url>/2023/06/27/os-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/SerenityOS/serenity">serenity</a><br><a href="https://github.com/mit-pdos/xv6-public">xv6-public</a><br><a href="https://github.com/machyve/xhyve">xhyve</a><br><a href="https://github.com/ravynsoft/ravynos">ravynos</a><br>The Computer History Simulation Project<br><a href="https://github.com/simh/simh">simh</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java相关</title>
      <link href="/2023/06/27/java-note/"/>
      <url>/2023/06/27/java-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/oracle/graal">graal</a><br><a href="https://github.com/openjdk/jdk">jdk</a><br><a href="https://github.com/openjdk/jfx">jfx</a><br><a href="https://github.com/eclipse-vertx/vert.x">vert.x</a><br><a href="https://github.com/elastic/logstash">logstash</a><br><a href="https://github.com/riemann/riemann">riemann</a> -&gt; Clojure<br><a href="https://github.com/dromara/hertzbeat">hertzbeat</a><br><a href="https://github.com/termux/termux-app">termux-app</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书籍记录</title>
      <link href="/2023/06/27/book-note/"/>
      <url>/2023/06/27/book-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/flycrane/kevin">kevin</a><br><a href="https://github.com/qinglee/GEB">GEB</a></p><p><a href="https://weread.qq.com/web/bookDetail/39e32100813ab7120g01631e">5%的改变</a><br><a href="https://weread.qq.com/web/bookDetail/534327605c9efb534d11ee8">恋爱课</a></p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用软件</title>
      <link href="/2023/06/27/tools-note/"/>
      <url>/2023/06/27/tools-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/xushengfeng/eSearch">eSearch</a> 截屏 离线OCR 搜索翻译 以图搜图 贴图 录屏 滚动截屏<br><a href="https://github.com/cboxdoerfer/fsearch">fsearch</a> A fast file search utility for Unix-like systems based on GTK3<br><a href="https://github.com/microsoft/perfview">perfview</a><br><a href="https://github.com/Genymobile/scrcpy">scrcpy</a><br><a href="https://github.com/SourceMonitor/SourceMonitorOS">SourceMonito</a><br><a href="https://github.com/obsproject/obs-studio">obs-studio</a><br><a href="https://github.com/Tencent/lemon-cleaner">lemon-cleaner</a><br><a href="https://github.com/WerWolv/ImHex">ImHex</a><br><a href="https://github.com/osquery/osquery">osquery</a><br><a href="https://github.com/barry-ran/QtScrcpy">QtScrcpy</a><br><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a><br><a href="https://github.com/ekzhang/composing.studio">composing.studio</a><br><a href="https://github.com/aristocratos/btop">btop</a><br><a href="https://github.com/exelban/stats">stats</a><br><a href="https://github.com/mltframework/shotcut">shotcut</a><br><a href="https://github.com/jwise/HoRNDIS">HoRNDIS</a><br><a href="https://github.com/yujitach/MenuMeters">MenuMeters</a><br><a href="https://github.com/fouquet/DictationSwitcher">DictationSwitcher</a><br><a href="https://github.com/mrfreeze/ThreadWatcher">ThreadWatcher</a><br><a href="https://github.com/ArsMasiuk/qvge">qvge</a><br><a href="https://github.com/ziqiangxu/words-picker">words-picker</a><br><a href="https://github.com/flameshot-org/flameshot">flameshot</a><br><a href="https://github.com/zhongyang219/TrafficMonitor">TrafficMonitor</a><br><a href="https://github.com/vnotex/vnote">vnote</a><br><a href="https://github.com/SubtitleEdit/subtitleedit">subtitleedit</a><br><a href="https://github.com/nitroshare/nitroshare-desktop">nitroshare-desktop</a><br><a href="https://github.com/MediaArea/MediaInfo-AllInOne">MediaInfo-AllInOne</a><br><a href="https://github.com/telegramdesktop/tdesktop">tdesktop</a><br><a href="https://github.com/TranslucentTB/TranslucentTB">TranslucentTB</a><br><a href="https://github.com/sqlitebrowser/sqlitebrowser">sqlitebrowser</a><br><a href="https://github.com/rainmeter/rainmeter">rainmeter</a><br><a href="https://github.com/BluePointLilac/ContextMenuManager">ContextMenuManager</a><br><a href="https://github.com/musescore/MuseScore">MuseScore</a><br><a href="https://github.com/Stellarium/stellarium">stellarium</a><br><a href="https://github.com/coolwanglu/pdf2htmlEX">pdf2htmlEX</a><br><a href="https://github.com/derceg/explorerplusplus">explorerplusplus</a><br><a href="https://github.com/ventoy/Ventoy">Ventoy</a><br><a href="https://github.com/2dust/v2rayNG">v2rayNG</a><br><a href="https://github.com/anrichter/qsvn">qsvn</a><br><a href="https://github.com/visualfc/liteide">liteide</a> -&gt; go<br><a href="https://github.com/geogebra/geogebra">geogebra</a><br><a href="https://github.com/liujianping/job">job</a><br><a href="https://github.com/axboe/fio">fio</a></p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p><a href="https://github.com/larsch/w32time">w32time</a><br><a href="https://github.com/Maktm/time">time</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JIT相关</title>
      <link href="/2023/06/27/jit-note/"/>
      <url>/2023/06/27/jit-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wdv4758h/awesome-jit">awesome-jit</a><br><a href="https://github.com/zherczeg/sljit">sljit</a><br><a href="https://github.com/libffi/libffi">libffi</a><br><a href="https://github.com/asmjit/asmjit">asmjit</a><br><a href="https://github.com/vnmakarov/mir">mir</a><br><a href="https://github.com/herumi/xbyak">xbyak</a><br><a href="https://github.com/dibyendumajumdar/nanojit">nanojit</a><br><a href="https://github.com/zyantific/zydis">zydis</a></p><p><a href="https://github.com/netwide-assembler/nasm">nasm</a><br><a href="https://github.com/yasm/yasm">yasm</a></p><p><a href="https://github.com/keystone-engine/keystone">keystone</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux相关</title>
      <link href="/2023/06/27/linux-note/"/>
      <url>/2023/06/27/linux-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/yifengyou/learn-tlpi">learn-tlpi</a><br><a href="https://github.com/heiher/hev-task-system">hev-task-system</a><br><a href="https://github.com/hiking90/binder-linux">binder-linux</a><br><a href="https://github.com/wvengen/segedit">segedit</a><br><a href="https://github.com/jlevy/the-art-of-command-line">the-art-of-command-line</a><br><a href="https://github.com/iovisor/bcc">bcc</a><br><a href="https://github.com/Qv2ray/Qv2ray">Qv2ray</a><br><a href="https://github.com/foxlet/macOS-Simple-KVM">macOS-Simple-KVM</a><br><a href="https://github.com/darlinghq/darling">darling</a><br><a href="https://github.com/iovisor/bpftrace">bpftrace</a><br><a href="https://github.com/MintCN/linux-insides-zh">linux-insides-zh</a><br><a href="https://github.com/sysstat/sysstat">sysstat</a><br><a href="https://github.com/yifengyou/linux-0.12">linux-0.12</a><br><a href="https://github.com/wkz/ply">ply</a><br><a href="https://github.com/eclipse-ecal/fineftp-server">fineftp-server</a><br><a href="https://github.com/yotamr/traces">traces</a><br><a href="https://github.com/gregose/syscall-table">syscall-tabl</a><br><a href="https://github.com/sickcodes/Docker-OSX">Docker-OSX</a><br><a href="https://github.com/kholia/OSX-KVM">OSX-KVM</a><br><a href="https://github.com/coreutils/coreutils">coreutils</a><br><a href="https://github.com/lsof-org/lsof">lsof</a></p><p>关于 root 和 wheel：在 Linux 中创建管理员账号（root 权限）的正确方式<br><a href="https://zhuanlan.zhihu.com/p/355710754">https://zhuanlan.zhihu.com/p/355710754</a></p><p>Linux文件事件监控之Fanotify [一]<br><a href="https://zhuanlan.zhihu.com/p/186027813">https://zhuanlan.zhihu.com/p/186027813</a></p><p>sendfile()，splice()，tee()函数<br><a href="https://blog.csdn.net/qq_36553387/article/details/119759192">https://blog.csdn.net/qq_36553387/article/details/119759192</a></p><p>linux_syscall.md</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__NR_name_to_handle_at</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ptrace 101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_bpf 321</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_userfaultfd 323</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_copy_file_range 326</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_statx 332</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_uring_setup 425</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pidfd_getfd 438</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_landlock_add_rule 445</span></span><br></pre></td></tr></table></figure><p>Bash - get current script directory path<br><a href="https://dirask.com/posts/Bash-get-current-script-directory-path-1X9E8D">https://dirask.com/posts/Bash-get-current-script-directory-path-1X9E8D</a></p><h2 id="文件锁实现"><a href="#文件锁实现" class="headerlink" title="文件锁实现"></a>文件锁实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/tox-dev/py-filelock</span><br><span class="line">win32 locking </span><br><span class="line">https://learn.microsoft.com/zh-cn/cpp/c-runtime-library/reference/locking</span><br><span class="line">unix flock</span><br><span class="line">man flock https://linux.die.net/man/2/flock</span><br><span class="line">soft impl -&gt; open O_EXCL</span><br></pre></td></tr></table></figure><h2 id="用一分钟了解：-fsync这个系统调用！"><a href="#用一分钟了解：-fsync这个系统调用！" class="headerlink" title="用一分钟了解： fsync这个系统调用！"></a>用一分钟了解： fsync这个系统调用！</h2><p><a href="https://blog.51cto.com/u_15015155/2615475">https://blog.51cto.com/u_15015155/2615475</a></p><h2 id="Arch-Linux-已从-SVN-迁移至-GitLab"><a href="#Arch-Linux-已从-SVN-迁移至-GitLab" class="headerlink" title="Arch Linux 已从 SVN 迁移至 GitLab"></a>Arch Linux 已从 SVN 迁移至 GitLab</h2><p><a href="https://www.oschina.net/news/241933/arch-linux-git-svn-migration-over">https://www.oschina.net/news/241933/arch-linux-git-svn-migration-over</a></p><h2 id="负载均衡算法–轮询法-Round-Robin"><a href="#负载均衡算法–轮询法-Round-Robin" class="headerlink" title="负载均衡算法–轮询法(Round Robin)"></a>负载均衡算法–轮询法(Round Robin)</h2><p><a href="https://blog.csdn.net/claram/article/details/90265243">https://blog.csdn.net/claram/article/details/90265243</a></p><p>常见的负载均衡算法包含：<br>1、轮询法（Round Robin）<br>2、加权轮询法（Weight Round Robin）<br>3、随机法（Random）<br>4、加权随机法（Weight Random）<br>5、平滑加权轮询法（Smooth Weight Round Robin）<br>6、源地址哈希法（Hash）<br>7、最小连接数法（Least Connections）</p><h2 id="fio"><a href="#fio" class="headerlink" title="fio"></a>fio</h2><p><a href="https://github.com/axboe/fio">https://github.com/axboe/fio</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># macOS</span></span><br><span class="line">fio --filename=<span class="variable">$HOME</span>/2m-seq-read --direct=1 --rw=<span class="built_in">read</span> --ioengine=posixaio --bs=2m --iodepth=64 --size=10G --numjobs=1 --runtime=1 --time_base=1 --group_reporting --name=test-seq-read</span><br><span class="line"><span class="built_in">rm</span> 2m-seq-read</span><br><span class="line"></span><br><span class="line">fio --filename=<span class="variable">$HOME</span>/seq-write --name=seq-write --size=128M --rw=write</span><br><span class="line"></span><br><span class="line"><span class="comment"># HDD</span></span><br><span class="line">fio --name=seq-read --size=128M --rw=write &amp;&amp; <span class="built_in">rm</span> seq-read.0.0</span><br><span class="line"><span class="comment"># SSD</span></span><br><span class="line">fio --name=seq-read --size=128M --rw=write --bs=1m &amp;&amp; <span class="built_in">rm</span> seq-read.0.0</span><br></pre></td></tr></table></figure><h2 id="linux中whereis、which、find、location的区别和用法"><a href="#linux中whereis、which、find、location的区别和用法" class="headerlink" title="linux中whereis、which、find、location的区别和用法"></a>linux中whereis、which、find、location的区别和用法</h2><p><a href="https://www.cnblogs.com/cjjjj/p/9846374.html">https://www.cnblogs.com/cjjjj/p/9846374.html</a></p><h2 id="Manjaro-HiDPI"><a href="#Manjaro-HiDPI" class="headerlink" title="Manjaro HiDPI"></a>Manjaro HiDPI</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hidpi</span><br><span class="line">窗体管理器</span><br><span class="line">Matcha-sea -&gt; Matcha-sea-hdpi</span><br><span class="line">外观-&gt;设置-&gt;窗口缩放</span><br><span class="line">2x</span><br></pre></td></tr></table></figure><p>xrandr</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xrandr --output Virtual1 --mode 3840x2160</span><br></pre></td></tr></table></figure><h2 id="彻底学会使用epoll-一-——ET模式实现分析"><a href="#彻底学会使用epoll-一-——ET模式实现分析" class="headerlink" title="彻底学会使用epoll(一)——ET模式实现分析"></a>彻底学会使用epoll(一)——ET模式实现分析</h2><p><a href="https://zhuanlan.zhihu.com/p/410285273">https://zhuanlan.zhihu.com/p/410285273</a></p><h2 id="abstract-namespace-unix-socket"><a href="#abstract-namespace-unix-socket" class="headerlink" title="abstract namespace unix socket"></a>abstract namespace unix socket</h2><p><a href="https://cloud.tencent.com/developer/article/1839208">https://cloud.tencent.com/developer/article/1839208</a><br><a href="http://linux.die.net/man/7/unix">http://linux.die.net/man/7/unix</a></p><p>unix socket 有3种：</p><p>基于文件的<br>socketpair 创建的，匿名的<br>abstract namespace 的，Linux特有</p><p>Linux 下， AF_UNIX socket 支持一种特殊的 abstract namespace unix socket 。</p><p>相比 普通的基于文件系统的 unix socket，abstract namespace unix socket ：</p><p>没有磁盘文件<br>进程挂了以后自动删除，无残留文件<br>无需担心与 文件系统上的文件冲突，不需要关心文件系统上的绝对路径是否存在的问题</p><h2 id="C-x2F-C-Linux-异步IO-AIO"><a href="#C-x2F-C-Linux-异步IO-AIO" class="headerlink" title="C&#x2F;C++ Linux 异步IO(AIO)"></a>C&#x2F;C++ Linux 异步IO(AIO)</h2><p><a href="https://zhuanlan.zhihu.com/p/555604045?utm_id=0">https://zhuanlan.zhihu.com/p/555604045?utm_id=0</a></p><p>BSD异步IO -&gt; SIGIO&#x2F;O_ASYNC<br>POSIX异步IO(AIO) -&gt; aio_read</p><p>O_NOATIME标志的设计旨在为索引和备份程序服务。该标志的使用能够显著减少磁盘的活动量。</p><h2 id="文件-I-x2F-O-的两种竞争状态"><a href="#文件-I-x2F-O-的两种竞争状态" class="headerlink" title="文件 I&#x2F;O 的两种竞争状态"></a>文件 I&#x2F;O 的两种竞争状态</h2><h3 id="以独占方式创建一个文件"><a href="#以独占方式创建一个文件" class="headerlink" title="以独占方式创建一个文件"></a>以独占方式创建一个文件</h3><p>当同时指定 O_EXCL 与 O_CREAT 作为 open()的标志位时，如果要打开 的文件已然存在，则 open()将返回一个错误。<br>这提供了一种机制，保证进程是打开文件的创建者。</p><h3 id="向文件尾部追加数据"><a href="#向文件尾部追加数据" class="headerlink" title="向文件尾部追加数据"></a>向文件尾部追加数据</h3><p>多个进程同时向同一个文件(例如，全局日 志文件)尾部添加数据。<br>要规避这一问题，需要将文件偏移量的移动与数据写操作纳入同一原子操作。<br>在打开文 件时加入 O_APPEND 标志就可以保证这一点。</p><h3 id="pread-x2F-pwrite"><a href="#pread-x2F-pwrite" class="headerlink" title="pread&#x2F;pwrite"></a>pread&#x2F;pwrite</h3><p>当调用 pread()或 pwrite()时，多个线程可同时对同一文件描述符执行 I&#x2F;O 操作，且不会因其他线程修 改文件偏移量而受到影响。如果还试图使用 lseek()和 read()(或 write())来代替 pread()(或 pwrite())，那么将引发竞争状态，这类似于 5.1 节讨论 O_APPEND 标志时的描述(当多个进 程的文件描述符指向相同的打开文件句柄时，使用 pread()和 pwrite()系统调用同样能够避免进 程间出现竞争状态)。</p><p>如果需要反复执行 lseek()，并伴之以文件 I&#x2F;O，那么 pread()和 pwrite()系统调用在某些 情况下是具有性能优势的。这是因为执行单个 pread()(或 pwrite())系统调用的成本要低于 执行 lseek()和 read()(或 write())两个系统调用。然而，较之于执行 I&#x2F;O 实际所需的时间， 系统调用的开销就有些相形见绌了。</p><p>Linux 2.6.30 版本新增了两个系统调用:preadv()、pwritev()，将分散输入&#x2F;集中输出和于指<br>定文件偏移量处的 I&#x2F;O 二者集于一身。它们并非标准的系统调用，但获得了现代 BSD 的支持。</p><p>ReadFile -&gt; overlapped<br><a href="https://github.com/aleitner/windows_pread">https://github.com/aleitner/windows_pread</a></p><h2 id="FILE-OFFSET-BITS-宏"><a href="#FILE-OFFSET-BITS-宏" class="headerlink" title="_FILE_OFFSET_BITS 宏"></a>_FILE_OFFSET_BITS 宏</h2><p>显然，使用宏_FILE_OFFSET_BITS 要比采用过渡型的 LFS API 更为简单，但这也要求应 用程序的代码编写必须规范(例如，声明用于放置文件偏移量的变量，应正确地使用 off_t， 而不能使用“原生”的 C 语言整型)。</p><h2 id="glibc-提供的-malloc-调试工具的部分功能"><a href="#glibc-提供的-malloc-调试工具的部分功能" class="headerlink" title="glibc 提供的 malloc 调试工具的部分功能"></a>glibc 提供的 malloc 调试工具的部分功能</h2><p>MALLOC_TRACE -&gt; mtrace&#x2F;muntrace<br>MALLOC_CHECK_ -&gt; mcheck&#x2F;mprobe<br>众多 UNIX 实现提供各种版本的 mallopt()和 mallinfo()。<br>然而，这些函数所提供的接口却 随实现而不同，因而也无法移植。</p><p>由于 realloc()可能会移动内存块，任何指向该内存块内部的指针在调用 realloc()之后都可 能不再可用。</p><h2 id="alloca"><a href="#alloca" class="headerlink" title="alloca"></a>alloca</h2><p>在信号处理程序中调用 longjmp()(6.8 节)或 siglongjmp()(21.2.1 节)以执行非局部跳 转时，alloca()的作用尤其突出。此时，在“起跳”函数和“落地”函数之间的函数中，如果 使用了 malloc()来分配内存，要想避免内存泄漏就极其困难，甚至是不可能的。与之相反， alloca()完全可以避免这一问题，因为堆栈是由这些调用展开的，所以已分配的内存会被自动 释放</p><h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><p>只要访问密码信息的程序采用的是本章稍后描述的函数(getpwnam()、 getpwuid()等)，那么无论是使用 NIS 还是 LDAP，对应用程序来说都是透明的。</p><p>读取密码的程序应立即加密密码，并尽快将密码的明 文从内存中抹去。只有这样，才能基本杜绝如下事件的发生:恶意之徒借程序崩溃之机，读 取内核转储文件以获取密码。</p><h2 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h2><p>可重入(reentrancy) vs. 线程安全(thread-safety)<br><a href="https://zhuanlan.zhihu.com/p/352218464">https://zhuanlan.zhihu.com/p/352218464</a><br>一文理解可重入函数<br><a href="https://zhuanlan.zhihu.com/p/280711576">https://zhuanlan.zhihu.com/p/280711576</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">满足下列条件的函数多数是不可重入的：</span><br><span class="line">函数体内使用了静态(static)/全局(global)的数据结构；</span><br><span class="line">函数体内调用了 malloc() 或者 free() 函数；</span><br><span class="line">函数体内调用了标准 I/O 函数;</span><br></pre></td></tr></table></figure><h2 id="device"><a href="#device" class="headerlink" title="device"></a>device</h2><p>与其他类型的文件一样，设备文件总会出现在文件系统中，通常位于&#x2F;dev 目录下。超级<br>用户可使用 mknod 命令创建设备文件，特权级程序(CAP_MKNOD)执行 mknod()系统调用 亦可完成相同任务。</p><h2 id="FUSE"><a href="#FUSE" class="headerlink" title="FUSE"></a>FUSE</h2><p>Linux 2.6.14中，添加了FUSE(用户空间文件系统)工具。采用这一机制，可为内核 添加挂钩(hook)，以便以用户空间程序来完整实现文件系统，而无需对内核进行修补或重 新编译。详细信息请见 <a href="http://fuse.sourceforge.net/%E3%80%82">http://fuse.sourceforge.net/。</a></p><h2 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h2><p>VFS 的抽象层建模精确仿照传统的 UNIX 文件系统模型。当然，还有一些文件系统，尤其 是非 UNIX 文件系统，并不支持所有的 VFS 操作(。比如，微软的 VFAT 就不支持使用 symlink() 创建的符号链接概念。)对于这种情况，底层文件系统会将错误代码传回 VFS 层，表明不支持 相应操作，而 VFS 随之会将错误代码传递给应用程序。</p><h2 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h2><p>由于不涉及磁盘访问，虚拟文件系统的文件操作速度极快。<br>该文件系统不但使用 RAM，而且在 RAM 耗尽的情况下，还会利用交换空间。<br>(虽然此处描述的 tmpfs 文件系统为 Linux 所专有， 但大多数 UNIX 实现都提供某种形式的基于内存的文件系统。)<br>除了用于用户应用程序以外，tmpfs 文件系统还有以下两个特殊用途。</p><ul><li>由内核内部挂载的隐形 tmpfs 文件系统，用于实现 System V 共享内存(第 48 章)和 共享匿名内存映射(第 49 章)。</li><li>挂载于&#x2F;dev&#x2F;shm的tmpfs文件系统，为glibc用以实现POSIX共享内存和POSIX信号量。</li></ul><blockquote><p>在 macOS 系统上创建、挂载 Ramdisk（aka: RamFS、tmpfs）<br><a href="https://www.cnblogs.com/emitial/p/ramfs-on-mac.html">https://www.cnblogs.com/emitial/p/ramfs-on-mac.html</a></p></blockquote><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><p>虽然大多数 UNIX 系统都不会记录文件的创建时间，但最新的 BSD 系统会使用名为 st_birthtime 的 stat 字段来记录这一时间。[also for macOS]</p><p>可利用系统调用 chown()和 chmod()来更改文件的所有权及权限。系统调用 umask() 则用来设置权限的位掩码，当进程新建文件时，会按位掩码来关闭相应权限位。</p><h2 id="扩展属性-EA"><a href="#扩展属性-EA" class="headerlink" title="扩展属性(EA)"></a>扩展属性(EA)</h2><p>EA 可用于实现访问列表(第 17 章)和文件能力(第 39 章)。但就设计而论，其能力绝 不仅限于此。例如，还可利用 EA 去记录文件的版本号、与文件的 MIME 类型&#x2F;字符集有关的 信息，或是指向图符的指针。<br>SUSv3 并未对 EA 加以规范。但少数其他 UNIX 实现却提供了类似的特性，其中知名的 有现代 BSD(详见 extattr(2))系列和 Solaris 9 及其后续版本(详见 fsattr(5))。<br>EA 需要有底层文件系统来提供支撑，Btrfs、ext2、ext3、ext4、JFS、Reiserfs 以及 XFS 等文件系统都支持 EA。</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>此外，基于上述事实，还可以玩点小技巧:先创 建并打开一个临时文件，随即取消对文件的链接(unlink)，然后在程序中继续使用该文件。(这 正是 5.12 节所述 tmpfile()函数的所作所为。)</p><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p>如果 pathname 是一文件，那么 remove()去调用 unlink();<br>如果 pathname 为一目录，那么 remove()去调用 rmdir()。<br>remove()属于 C 语言标准库函数，广为 UNIX 和非 UNIX 系统所支持。<br>大多数非 UNIX 系统并不支持硬链接，所以将移除文件的函数命名为 unlink()也不合情理。</p><h2 id="readdir-x2F-scandir"><a href="#readdir-x2F-scandir" class="headerlink" title="readdir&#x2F;scandir"></a>readdir&#x2F;scandir</h2><p>readdir()返回时并未对文件名进行排序，而是按照文件在目录中出现的天然次序<br>使用scandir(3)函数可以获得经过排序处理的文件列表，且排列规则可由程序员定义<br>readdir_r可重入。这是因为 readdir_r()对文件条目的返回利用的是由调用者分配的 entry 参数，而 readdir()则 是将信息置于静态分配的结构并返回其指针。</p><h2 id="nftw"><a href="#nftw" class="headerlink" title="nftw"></a>nftw</h2><p>nftw()函数允许程序对整个目录子树进行递归遍历，并为子树中的每个文件执行某些操作<br>(即，调用由程序员定义的函数)。</p><h2 id="openat"><a href="#openat" class="headerlink" title="openat"></a>openat</h2><p>当调用 open()打开位于当前工作目录之外的文件时，可能会发生某些竞态条件。而使 用 openat()就能够避免这一问题。在调用 open()的同时，如果 pathname 目录前缀的某 些部分发生了改变，就可能导致竞争。要想避免这类竞态，可以针对目标目录打开一个文件描述符，然后将该描述符传递给 openat()。</p><h2 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a>chroot</h2><p>有些场合需 要改变一个进程的根目录，而特权级(CAP_SYS_CHROOT)进程通过 chroot()系统调用能够 做到这一点。<br>一些 BSD 衍生系统提供的 jail()系统调用解决了包括上述问题在内的不少问题，其所创 建的监禁区即使针对特权级进程也是安全的。</p><h2 id="SIGTERM"><a href="#SIGTERM" class="headerlink" title="SIGTERM"></a>SIGTERM</h2><p>发送 SIGKILL 信号可以杀掉某个进程，从而绕开了 SIGTERM 信号的处理器程序。因此，总是应该首先尝试使用 SIGTERM 信号来终止进程，而把 SIGKILL 信 号作为最后手段，去对付那些不响应 SIGTERM 信号的失控进程。</p><h2 id="signal-x2F-sigaction"><a href="#signal-x2F-sigaction" class="headerlink" title="signal&#x2F;sigaction"></a>signal&#x2F;sigaction</h2><p>使用 signal()，将无法在不改变信号处置的同时，还能获取到当前的信号处置。要想做 到这一点，必须使用 sigaction()。</p><h2 id="strsignal"><a href="#strsignal" class="headerlink" title="strsignal"></a>strsignal</h2><p>尽管 SUSv3 并未将 psignal()、strsignal()和 sys_siglist 纳入标准，但还是有许多 UNIX 实现 支持它们。(SUSv4 中加入了对 psignal()和 strsignal()的规范。)</p><h2 id="标准的异步信号安全函数"><a href="#标准的异步信号安全函数" class="headerlink" title="标准的异步信号安全函数"></a>标准的异步信号安全函数</h2><p>异步信号安全的函数是指当从信号处理器函数调用时，可以保证其实现是安全的。如 果某一函数是可重入的，又或者信号处理器函数无法将其中断时，就称该函数是异步信号安全的。</p><h2 id="sigsetjmp-x2F-siglongjmp"><a href="#sigsetjmp-x2F-siglongjmp" class="headerlink" title="sigsetjmp&#x2F;siglongjmp"></a>sigsetjmp&#x2F;siglongjmp</h2><p>鉴于两大 UNIX 流派之间的差异，POSIX.1-1990 选择不对 setjmp()和 longjmp()的信号掩 码处理进行规范，而是定义了一对新函数:sigsetjmp()和 siglongjmp()，针对执行非本地跳转 时的信号掩码进行显式控制。</p><h2 id="SA-RESTART"><a href="#SA-RESTART" class="headerlink" title="SA_RESTART"></a>SA_RESTART</h2><p>即使采用了类似 NO_EINTR()这样的宏，让信号处理器来中断系统调用还是颇为不便，因 为只要有意重启阻塞的调用，就需要为每个阻塞的系统调用添加代码。反之，可以调用指定 了 SA_RESTART 标志的 sigaction()来创建信号处理器函数，从而令内核代表进程自动重启系 统调用，还无需处理系统调用可能返回的 EINTR 错误。<br>不幸的是，并非所有的系统调用都可以通过指定 SA_RESTART 来达到自动重启的目的。 究其原因，有部分历史因素。</p><h2 id="zombie"><a href="#zombie" class="headerlink" title="zombie"></a>zombie</h2><p>在设计长生命周期的父进程(例如:会创建众多子进程的网络服务器和 Shell)时，这些 语义具有重要意义。换句话说，在此类应用中，父进程应执行 wait()方法，以确保系统总是能够 清理那些死去的子进程，避免使其成为长寿僵尸。如 26.3.1 节所述，父进程在处理 SIGCHLD 信 号时，对 wait()的调用既可同步，也可异步。</p><h2 id="异步取消"><a href="#异步取消" class="headerlink" title="异步取消"></a>异步取消</h2><p>如果设定线程为可异步取消时(取消性类型为 PTHREAD_CANCEL_ASYNCHRONOUS)，可 以在任何时点将其取消(亦即，执行任何机器指令时)，取消动作不会拖延到下一个取消点才执行。<br>作为一般性原则，可异步取消的线程不应该分配任何资源，也不能获取互斥量或锁。这 导致大量库函数无法使用，其中就包括 Pthreads 函数的大部分。(SUSv3 中有 3 处例外 pthread_cancel()、pthread_setcancelstate()以及 pthread_setcanceltype()，规范明确要求将它们实 现为“异步取消安全(async-cancel-safe)”，亦即，实现必须确保在可异步取消的线程中可以 安全调用它们。)<br>换言之，异步取消功能鲜有应用场景，其中之一就是:取消在执行计算密集型循环的线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread::enableAsynchronousCancel</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Qalculate/libqalculate/blob/master/libqalculate/util.cc#L1070">https://github.com/Qalculate/libqalculate/blob/master/libqalculate/util.cc#L1070</a></p><h2 id="假唤醒"><a href="#假唤醒" class="headerlink" title="假唤醒"></a>假唤醒</h2><p>如果一个信号处理函数中断了对 pthread_cond_wait()的调用，则该调用要么自 动重新开始(Linux 就是如此)，要么返回 0，表示遭遇了假唤醒(如 30.2.3 节所述， 此时，设计良好的应用程序会重新检查相应的判断条件并重新发起调用)。</p><h2 id="nohup、setsid-与-disown-的不同之处"><a href="#nohup、setsid-与-disown-的不同之处" class="headerlink" title="nohup、setsid 与 disown 的不同之处"></a>nohup、setsid 与 disown 的不同之处</h2><p><a href="https://baijiahao.baidu.com/s?id=1759038604359417311">https://baijiahao.baidu.com/s?id=1759038604359417311</a><br>nohup(1)命令可以用来使一个命令对 SIGHUP 信号免疫——即执行命令时将 SIGHUP 信号 的处理设置为 SIG_IGN。bash 内置的命令 disown 提供了类似的功能，它从 shell 的任务列表中 删除一个任务，这样在 shell 终止时就不会向该任务发送 SIGHUP 信号了。</p><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p>要强制使用库的 静态版本则可以完成下列之一。<br>在 gcc 命令行中指定静态库的路径名(包括.a 扩展)。<br>在 gcc 命令行中指定-static 选项。<br>使用–Wl,–Bstatic 和–Wl,–Bdynamic gcc 选项来显式地指定链接器选择共享库还是静态<br>库。在 gcc 命令行中可以使用-l 选项来混合这些选项。链接器会按照选项被指定时的 顺序来处理这些选项。</p><h2 id="IPC持久性"><a href="#IPC持久性" class="headerlink" title="IPC持久性"></a>IPC持久性</h2><p>进程持久性<br>管道、FIFO 以及 socket 是进程持久的 IPC 工具<br>内核持久性<br>具备内核持久性的工具包括 System V IPC 和 POSIX IPC<br>文件系统持久性<br>唯一一种具备文件系统持久性的IPC对象 是基于内存映射文件的共享内存</p><h2 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h2><p>这种便捷性所牺牲的是效率，因为至少 需要创建两个额外的进程:一种用于 shell，一个或多个用于 shell 执行的命令。与 system()一样，在特权进程中永远都不应该使用 popen()</p><h2 id="System-V-消息队列"><a href="#System-V-消息队列" class="headerlink" title="System V 消息队列"></a>System V 消息队列</h2><p>之所以得出其他 IPC 机制通常要优于 System V 消息队列的结论是因为几个因素，其中最 主要的一个是引用消息队列不会用到文件描述符。这意味着在消息队列上无法使用另一种 I&#x2F;O模型，特别是同时监控消息队列和文件描述符以查看是否可进行 I&#x2F;O 将变得复杂。此外，消息 队列无连接(即不进行引用计数)这个事实使得应用程序难以知道何时能够安全地删除一个 队列。</p><h2 id="System-V-信号量"><a href="#System-V-信号量" class="headerlink" title="System V 信号量"></a>System V 信号量</h2><p>不管怎样，与消息队列所面临的情况不同，替代 System V 信号量的方案不多，其结果是 在很多情况下都必须要用到它们。信号量的一个替代方案是记录锁，在第 55 章中将会对此予 以介绍。此外，从内核 2.6 以及之后的版本开始，Linux 支持使用 POSIX 信号量来进行进程同步。第 53 章将会介绍 POSIX 信号量。</p><h2 id="POSIX-IPC"><a href="#POSIX-IPC" class="headerlink" title="POSIX IPC"></a>POSIX IPC</h2><p>POSIX IPC 接口与传统的 UNIX 文件模型更加一致。IPC 对象是通过名字来标识的，并使 用 open、close 以及 unlink 等操作方式与相应的文件相关的系统调用类似的调用来管理。</p><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>在套接字上调用 close()会将双向通信通道的两端都关闭。有时候，只关闭连接的一端也 是有用处的，这样数据只能在一个方向上通过套接字传输。系统调用 shutdown()提供了这种 功能。</p><h2 id="select-x2F-poll"><a href="#select-x2F-poll" class="headerlink" title="select&#x2F;poll"></a>select&#x2F;poll</h2><p>select()和 poll()糟糕的性能延展性源自这些 API 的局限性:通常，程序重复调用这些系统 调用所检查的文件描述符集合都是相同的，可是内核并不会在每次调用成功后就记录下它们。<br>我们接下来要讨论的信号驱动 I&#x2F;O 以及 epoll 都可以使内核记录下进程中感兴趣的文件描 述符，通过这种机制消除了 select()和 poll()的性能延展问题。这种解决方案可根据发生的 I&#x2F;O 事件来延展，而与被检查的文件描述符个数无关。结果就是，当需要检查大量的文件描述符 时，信号驱动 I&#x2F;O 和 epoll 能提供更好的性能表现。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust记录</title>
      <link href="/2023/06/26/rust-note/"/>
      <url>/2023/06/26/rust-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/rome/tools">tools</a><br><a href="https://github.com/tokio-rs/tokio">tokio</a><br><a href="https://github.com/typst/typst">typst</a><br><a href="https://github.com/sunface/rust-course">rust-course</a><br><a href="https://github.com/emilk/egui">egui</a><br><a href="https://github.com/Wilfred/difftastic">difftastic</a><br><a href="https://github.com/uutils/coreutils">coreutils</a><br><a href="https://github.com/tree-sitter/tree-sitter">tree-sitter</a><br><a href="https://github.com/lsd-rs/lsd">lsd</a><br><a href="https://github.com/slint-ui/slint">slint</a><br><a href="https://github.com/seanmonstar/warp">warp</a><br><a href="https://github.com/gfx-rs/wgpu">wgpu</a><br><a href="https://github.com/GyulyVGC/sniffnet">sniffnet</a><br><a href="https://github.com/neon-bindings/neon">neon</a><br><a href="https://github.com/crossbeam-rs/crossbeam">crossbeam</a><br><a href="https://github.com/Byron/gitoxide">gitoxide</a><br><a href="https://github.com/EmbarkStudios/rust-gpu">rust-gpu</a><br><a href="https://github.com/svenstaro/miniserve">miniserve</a><br><a href="https://github.com/Orange-OpenSource/hurl">hurl</a><br><a href="https://github.com/flxzt/rnote">rnote</a><br><a href="https://github.com/facebook/buck2">buck2</a><br><a href="https://github.com/vadimcn/codelldb">codelldb</a><br><a href="https://github.com/solidiquis/erdtree">erdtree</a><br><a href="https://github.com/m4b/bingrep">bingrep</a><br><a href="https://github.com/mikong/mori">mori</a><br>Provides a very thin abstraction over instrumented profiling crates like puffin, optick, tracy, and superluminal-perf.<br><a href="https://github.com/aclysma/profiling">profiling</a><br><a href="https://github.com/rust-pcap/pcap">pcap</a><br><a href="https://github.com/smol-rs/concurrent-queue">concurrent-queue</a><br><a href="https://github.com/pravic/winapi-kmd-rs">winapi-kmd-rs</a><br><a href="https://github.com/AccessKit/accesskit">accesskit</a><br><a href="https://github.com/linebender/glazier">glazier</a><br><a href="https://github.com/fereidani/kanal">kanal</a><br><a href="https://github.com/demfabris/rmx">rmx</a><br><a href="https://github.com/pitdicker/valet_parking">valet_parking</a><br><a href="https://github.com/konradsz/igrep">igrep</a><br><a href="https://github.com/eclipse-zenoh/zenoh">zenoh</a><br><a href="https://github.com/chipsenkbeil/service-manager-rs">service-manager-rs</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程语言</title>
      <link href="/2023/06/26/lang-note/"/>
      <url>/2023/06/26/lang-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/llvm/llvm-project">llvm-project</a><br><a href="https://github.com/HaxeFoundation/haxe">haxe</a><br><a href="https://github.com/adrian-thurston/ragel">ragel</a><br><a href="https://github.com/cisco/ChezScheme">ChezScheme</a><br><a href="https://github.com/jerryscript-project/jerryscript">jerryscript</a><br><a href="https://github.com/pikelang/Pike">Pike</a><br><a href="https://github.com/dbohdan/embedded-scripting-languages">embedded-scripting-languages</a><br><a href="https://github.com/GaijinEntertainment/daScript">daScript</a><br><a href="https://github.com/antlr/antlr4">antlr4</a><br><a href="https://github.com/foonathan/lexy">lexy</a><br><a href="https://github.com/BenHanson/lexertl14">lexertl14</a><br><a href="https://github.com/dbohdan/compilers-targeting-c">compilers-targeting-c</a><br><a href="https://github.com/timruffles/js-to-c">js-to-c</a><br><a href="https://github.com/Ratstail91/Toy">Toy</a><br><a href="https://github.com/ovr/StaticScript">StaticScript</a><br><a href="https://github.com/leanprover/lean4">lean4</a><br><a href="https://github.com/egel-lang/egel">egel</a><br><a href="https://github.com/EarlGray/c4">c4</a><br><a href="https://github.com/c2lang/c2compiler">c2compiler</a><br><a href="https://github.com/gfwilliams/tiny-js">tiny-js</a><br><a href="https://github.com/archo5/sgscript">sgscript</a><br><a href="https://github.com/svaarala/duktape">duktape</a><br><a href="https://github.com/albertodemichelis/squirrel">squirrel</a></p><p><a href="https://github.com/hsutter/cppfront">cppfront</a><br><a href="https://github.com/ponylang/ponyc">ponyc</a> -&gt; actor<br><a href="https://github.com/orangeduck/Cello">Cello</a><br><a href="https://github.com/root-project/cling">cling</a><br><a href="https://github.com/ccxvii/mujs">mujs</a><br><a href="https://github.com/root-project/root">root</a><br><a href="https://github.com/zenglong/zengl_language">zengl_language</a><br><a href="https://github.com/NerdLang/nerd">nerd</a> JavaScript native compiler</p><h1 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h1><p><a href="https://github.com/wch/r-source">R</a><br><a href="https://github.com/wch/r-source/blob/trunk/src/main/gram.y">语法定义</a></p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p><a href="https://github.com/onetrueawk/awk">awk</a><br><a href="https://github.com/wuzhouhui/awk">awk</a> AWK 程序设计语言</p><h2 id="vm-x2F-gc"><a href="#vm-x2F-gc" class="headerlink" title="vm&#x2F;gc"></a>vm&#x2F;gc</h2><p><a href="https://github.com/jakogut/tinyvm">tinyvm</a><br><a href="https://github.com/ivmai/bdwgc">bdwgc</a></p><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><p><a href="https://github.com/smallbasic/SmallBASIC">SmallBASIC</a><br><a href="https://github.com/n00b87/RCBASIC3">RCBASIC3</a><br><a href="https://github.com/JohnBlood/awesome-basic">awesome-basic</a><br><a href="https://github.com/mist64/cbmbasic">cbmbasic</a><br><a href="https://github.com/ppiecuch/Q7Basic">Q7Basic</a><br><a href="https://github.com/rtrussell/BBCSDL">BBCSDL</a></p><h2 id="book"><a href="#book" class="headerlink" title="book"></a>book</h2><p><a href="https://github.com/Macaulish64/Lex-and-Yacc">Lex-and-Yacc</a><br><a href="https://github.com/IammyselfYBX/Lex-Yacc">Lex-Yacc</a></p><p>language_note.md</p><p>berry jancy luna wren Pocketlang<br>picoc -&gt; small c interpter<br>ring -&gt; no gil<br>janet sdscript</p><p>mujs 5cdcc209367f3497006fe43a51e187f6ae7d2e86 Simplistic REPL.</p><p>NUM<br>ARTH<br>BRACKET</p><p>2m54s<br>thread<br>Egel <a href="https://egel-lang.github.io/">https://egel-lang.github.io/</a><br>FreeBasic -&gt; libffi<br>Julia @async</p><p><a href="https://blog.openresty.com/en/luajit-gc64-mode/">https://blog.openresty.com/en/luajit-gc64-mode/</a><br><a href="https://github.com/Yu2erer/LuaJIT-5.3.6">https://github.com/Yu2erer/LuaJIT-5.3.6</a><br>Lua 5.3.6 JIT &amp;&amp; 多线程 垃圾回收<br>luau <a href="https://luau-lang.org/">https://luau-lang.org/</a></p><p><a href="https://springrts.com/wiki/Lua_Performance">https://springrts.com/wiki/Lua_Performance</a></p><p><a href="https://github.com/edubart/nelua-benchmarks">https://github.com/edubart/nelua-benchmarks</a></p><p>nelua <a href="https://nelua.io/">https://nelua.io/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> lang </tag>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python相关</title>
      <link href="/2023/06/26/python-note/"/>
      <url>/2023/06/26/python-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/python/cpython">cpython</a><br><a href="https://github.com/micropython/micropython">micropython</a><br><a href="https://github.com/berry-lang/berry">berry</a></p><p><a href="https://github.com/vinta/awesome-python">awesome-python</a><br><a href="https://github.com/faif/python-patterns">python-patterns</a><br><a href="https://github.com/apache/airflow">airflow</a><br><a href="https://github.com/nicolargo/glances">glances</a><br><a href="https://github.com/celery/celery">celery</a><br><a href="https://github.com/matplotlib/matplotlib">matplotlib</a><br><a href="https://github.com/pyecharts/pyecharts">pyecharts</a><br><a href="https://github.com/pybind/pybind11">pybind11</a><br><a href="https://github.com/exaloop/codon">codon</a><br><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a><br><a href="https://github.com/Zulko/moviepy">moviepy</a><br><a href="https://github.com/pyinstaller/pyinstaller">pyinstaller</a><br><a href="https://github.com/secdev/scapy">scapy</a><br><a href="https://github.com/httpie/http-prompt">http-prompt</a><br><a href="https://github.com/fluentpython/example-code">example-code</a> -&gt; Fluent Python<br><a href="https://github.com/python-trio/trio">trio</a><br><a href="https://github.com/aidlearning/AidLearning-FrameWork">AidLearning-FrameWork</a><br><a href="https://github.com/indygreg/PyOxidizer">PyOxidizer</a><br><a href="https://github.com/nonebot/nonebot2">nonebot2</a><br><a href="https://github.com/python-websockets/websockets">websockets</a><br><a href="https://github.com/mhammond/pywin32">pywin32</a><br><a href="https://github.com/lark-parser/lark">lark</a><br><a href="https://github.com/renpy/renpy">renpy</a><br><a href="https://github.com/spack/spack">spack</a><br><a href="https://github.com/jrfonseca/gprof2dot">gprof2dot</a><br><a href="https://github.com/dabeaz/ply">ply</a><br><a href="https://github.com/namhyung/uftrace">uftrace</a><br><a href="https://github.com/pyvista/pyvista">pyvista</a><br><a href="https://github.com/marcomusy/vedo">vedo</a><br><a href="https://github.com/laixintao/python-parallel-programming-cookbook-cn">python-parallel-programming-cookbook-cn</a><br><a href="https://github.com/imageio/imageio">imageio</a><br><a href="https://github.com/mpi4py/mpi4py">mpi4py</a><br><a href="https://github.com/LenKiMo/byte-of-python">byte-of-python</a><br><a href="https://github.com/tox-dev/py-filelock">py-filelock</a><br><a href="https://github.com/YueChen-C/py-ios-device">py-ios-device</a><br><a href="https://github.com/prideout/snowy">snowy</a><br><a href="https://github.com/doronz88/pymobiledevice3">pymobiledevice3</a><br><a href="https://github.com/pygfx/wgpu-py">wgpu-py</a><br><a href="https://github.com/iOSForensics/pymobiledevice">pymobiledevice</a><br><a href="https://github.com/pygfx/pygfx">pygfx</a><br><a href="https://github.com/hplgit/scipro-primer">scipro-primer</a><br><a href="https://github.com/PacktPublishing/Modern-Python-Cookbook">Modern-Python-Cookbook</a><br><a href="https://github.com/cycleuser/ThinkPython-en-cn">ThinkPython-en-cn</a><br><a href="https://github.com/phoemur/aioget">aioget</a><br><a href="https://github.com/thanhit95/multi-threading">multi-threading</a><br><a href="https://github.com/highperformancecoder/scidavis-old">scidavis-old</a><br><a href="https://github.com/walkerje/C-Turtle">C-Turtle</a><br><a href="https://github.com/Elizafox/cld3">cld3</a><br><a href="https://github.com/scottfrazer/hermes">hermes</a><br><a href="https://github.com/practical-tutorials/project-based-learning">project-based-learning</a><br><a href="https://github.com/hpcaitech/ColossalAI">ColossalAI</a><br><a href="https://github.com/xinntao/Real-ESRGAN">Real-ESRGAN</a><br><a href="https://github.com/apple/ml-stable-diffusion">ml-stable-diffusion</a><br><a href="https://github.com/zhm-real/PathPlanning">PathPlanning</a><br><a href="https://github.com/microsoft/DirectML">DirectML</a><br><a href="https://github.com/ozmartian/vidcutter">vidcutter</a><br><a href="https://github.com/encode/requests-async">requests-async</a><br><a href="https://github.com/merrychap/shellen">shellen</a><br><a href="https://github.com/floooh/fips">fips</a><br><a href="https://github.com/Gaoyongxian666/OpenSearcher">OpenSearcher</a><br>A better c++filt and a better undname.exe, in one binary.<br><a href="https://github.com/nico/demumble">demumble</a><br><a href="https://github.com/Lekensteyn/qt5printers">qt5printers</a><br><a href="https://github.com/sdonegan/Qt5DataFormatters">Qt5DataFormatters</a><br><a href="https://github.com/arl/macdeployqtfix">macdeployqtfix</a><br><a href="https://github.com/matrix1001/nadbg">nadbg</a><br><a href="https://github.com/matan1008/pykdebugparser">pykdebugparser</a><br><a href="https://github.com/niklak/aiohttp_spider">aiohttp_spider</a><br><a href="https://github.com/priyanallan/image-tools">image-tools</a><br><a href="https://github.com/geometrian/ImplicitGrapher">ImplicitGrapher</a><br><a href="https://github.com/paulocoutinhox/pdfium-lib">pdfium-lib</a><br><a href="https://github.com/donnemartin/system-design-primer">system-design-primer</a><br><a href="https://github.com/fredboudon/PyQGLViewer">PyQGLViewer</a></p><h2 id="pypi"><a href="#pypi" class="headerlink" title="pypi"></a>pypi</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.doubanio.com/simple/</span><br></pre></td></tr></table></figure><h2 id="mayavi2"><a href="#mayavi2" class="headerlink" title="mayavi2"></a>mayavi2</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install vtk wxpython</span><br><span class="line">pip install git+https://github.com/enthought/mayavi.git</span><br></pre></td></tr></table></figure><p>笨办法学Python3<br><a href="https://www.zybuluo.com/Standalone/note/1677177">https://www.zybuluo.com/Standalone/note/1677177</a></p><p>Think Python<br><a href="https://think-py.apachecn.org/#/">https://think-py.apachecn.org/#/</a><br><a href="https://github.com/Kivy-CN/ThinkPython-CN">https://github.com/Kivy-CN/ThinkPython-CN</a><br><a href="https://github.com/apachecn/think-py-2e-zh">https://github.com/apachecn/think-py-2e-zh</a></p><p>A Byte of Python<br><a href="https://github.com/LenKiMo/byte-of-python">https://github.com/LenKiMo/byte-of-python</a></p><p>pip-review -&gt; pipx<br>setup.py -&gt; poetry</p><p>Python<br>turtle -&gt; cpp<br>str 不可变 -&gt; StringIO [like StringBuffer(thread safe)&#x2F;StringBuilder]</p><p>Python 3 标准库实例教程<br><a href="https://learnku.com/docs/pymotw">https://learnku.com/docs/pymotw</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lua相关</title>
      <link href="/2023/06/26/lua-note/"/>
      <url>/2023/06/26/lua-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/lua/lua">lua</a><br><a href="https://github.com/ThePhD/sol2">sol2</a> a C++ &lt;-&gt; Lua API wrapper<br><a href="https://github.com/lunarmodules/luasocket">luasocket</a><br><a href="https://github.com/edubart/nelua-lang">nelua-lang</a><br><a href="https://github.com/starwing/lua-protobuf">lua-protobuf</a><br><a href="https://github.com/kikito/inspect.lua">inspect.lua</a><br><a href="https://github.com/khvzak/mlua">mlua</a><br><a href="https://github.com/franko/luajit-lang-toolkit">luajit-lang-toolkit</a><br><a href="https://github.com/frol/completely-unscientific-benchmarks">completely-unscientific-benchmarks</a><br><a href="https://github.com/deplinenoise/tundra">tundra</a><br><a href="https://github.com/kingluo/luajit.io">luajit.io</a><br><a href="https://github.com/can1357/NtLua">NtLua</a><br><a href="https://github.com/Yu2erer/LuaJIT-5.3.6">LuaJIT-5.3.6</a><br><a href="https://github.com/geoffleyland/luatrace">luatrace</a><br><a href="https://github.com/hsiaosiyuan0/jlua">jlua</a> Yet another Lua implementation in pure JavaScript.<br><a href="https://github.com/Neopallium/lua-llthreads">lua-llthreads</a><br><a href="https://github.com/stetre/moongl">moongl</a> Lua bindings for OpenGL<br><a href="https://github.com/Neopallium/slua">slua</a> Static lua compiler - Compile Lua code into C code.<br><a href="https://github.com/edubart/lunray">lunray</a><br><a href="https://github.com/edubart/nelua-benchmarks">nelua-benchmarks</a><br>a small c++ direct ui library, support xml lua and css(only similar to html css)<br><a href="https://github.com/bonescreater/bones">bones</a><br><a href="https://github.com/creationix/weblit">weblit</a><br><a href="https://github.com/franko/gsl-shell">gsl-shell</a><br><a href="https://github.com/virgo-agent-toolkit/virgo-base-agent">virgo-base-agent</a><br><a href="https://github.com/xmake-io/xmake-repo">xmake-repo</a></p><h2 id="source-read"><a href="#source-read" class="headerlink" title="source read"></a>source read</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">e78c1c54aacdd581f729214b199b2eb750a349ac 3.0-alpha</span><br><span class="line"></span><br><span class="line">7e59a8901d063dbea4eb0693c9c2d85bda1fc5f6 NEW LL(1) PARSER 重点看一下</span><br><span class="line"></span><br><span class="line">01772cefa5217a7840254d1e7ec340dea8f0747a new library <span class="keyword">for</span> debbuging</span><br><span class="line"></span><br><span class="line">29ede6aa13144ff7b69c57a87be1ee93f57ae896 first implementation of multiple states (reentrant code).</span><br><span class="line"></span><br><span class="line">2877bad4c260d11c22c3b12e633d6b1ca3415789 new debug API (first version) [near 4.0 at 2000]</span><br><span class="line"></span><br><span class="line">f9cf402fbd1ba2ab00f5aa5f7d0ff5c9c0580dd5 first implementation of FOR</span><br><span class="line"></span><br><span class="line">1de5587184eb2d8d9f379c661f77f7e450764894 <span class="string">&#x27;lua.h&#x27;</span> is included before any other Lua header file</span><br><span class="line"></span><br><span class="line">e238efc5367a8d88757dd84df0683e1d8d9f9211 default now is multi-state [LUA_SINGLESTATE]</span><br><span class="line"></span><br><span class="line">a53d9b66ca6247818acaf41e28cdf123082a272b first implementation <span class="keyword">for</span> <span class="built_in">type</span> names</span><br><span class="line"></span><br><span class="line">39b79783297bee79db9853b63d199e120a009a8f first (big) step to support wide chars  [2001]</span><br><span class="line"></span><br><span class="line">0e0e4a480e6d9b0125a96ca982a3e9571578a037 first implementation <span class="keyword">for</span> weak tables</span><br><span class="line"></span><br><span class="line">762d059a13d83eb367238a6115bbb4f5f13fcb49 new implementation <span class="keyword">for</span> the Virtual Machine</span><br><span class="line"></span><br><span class="line">fd40af92e46dcd8b7638c4108aacb1f525e8578e the parser is not LL(1) [2001.8.11]</span><br><span class="line"></span><br><span class="line">1e81da51bab87148981486a84b846399050f4ef2 new API <span class="keyword">for</span> registry and C upvalues + new implementation <span class="keyword">for</span> references</span><br><span class="line"></span><br><span class="line">72659a06050632da1a9b4c492302be46ac283f6b no more explicit support <span class="keyword">for</span> wide-chars; too much troble...</span><br><span class="line"></span><br><span class="line">592a309177edc52847b1196969ad6d49ba21f4fb tag system replaced by event tables</span><br><span class="line"></span><br><span class="line">e04f7ed4509af1577c10ead8e5d7d55c65754bf8 first version of Lua <span class="string">&quot;stackless&quot;</span> [2001.12.9]</span><br><span class="line"></span><br><span class="line">f083812c020186d0d919833100c1a0b6eda8c2c0 first implementation of coroutines</span><br><span class="line"></span><br><span class="line">d6fd33e76fdeb919fd91860aa9d0f9524e6d415a <span class="string">&#x27;eventtable&#x27;</span> renamed to <span class="string">&#x27;metatable&#x27;</span></span><br><span class="line"></span><br><span class="line">f1c43bbe19026b80b5185cbdd6dec6230028a999 new <span class="keyword">function</span> <span class="string">&#x27;xpcall&#x27;</span> (at least <span class="keyword">for</span> now...) [2002.6.6]</span><br><span class="line"></span><br><span class="line">6b8cdc9cdd545508af85d1de2013ea0fc64792b0 Lua now uses only <span class="string">&#x27;realloc&#x27;</span> <span class="keyword">for</span> all its memory management</span><br><span class="line"></span><br><span class="line">eb3de8768a6b614597f7e5f018fc31a9f52441df <span class="string">&#x27;rawcall&#x27;</span> -&gt; <span class="string">&#x27;upcall&#x27;</span> (unprotected call)</span><br><span class="line"></span><br><span class="line">35707e94f343b3f02cd642602aad00337846b9c7 <span class="string">&#x27;__weakmode&#x27;</span> -&gt; <span class="string">&#x27;__mode&#x27;</span></span><br><span class="line"></span><br><span class="line">39b2d58c39fd0cd554b27ed071926bc439338964 new interface <span class="keyword">for</span> debug hooks</span><br><span class="line"></span><br><span class="line">b0c40e240585b67902bece4569ee683296e475f4 first version of <span class="string">&#x27;loadlib&#x27;</span> [near 5.0 2003.5.17]</span><br><span class="line"></span><br><span class="line">762c7370376dbd13cd8aeb4d8c8da0bb153269c3 last changes by lhf [5.0 2003.4.11]</span><br><span class="line"></span><br><span class="line">df429f163ada6581d921e7f51b016f1abfeefddd First version of incremental GC [2003.12.10]</span><br><span class="line"></span><br><span class="line">32d4f304db365599a54b3eb30377ac6e20846749 first implementation of generational GC [2004.8.25]</span><br><span class="line"></span><br><span class="line">7dd10a1d7e0b6fa44c03060c6ce2d4de64830339 new macro LUA_USE_POSIX to control POSIX-related macros</span><br><span class="line"></span><br><span class="line">03b556b963e0d657dc455c07515cd5da3a4c4312 corrected copyright notice to 2010 [2010.1.12]</span><br><span class="line"></span><br><span class="line">7cc0e63d8a5bd45eabd328c398f02a933e07746d first implementation of <span class="string">&#x27;goto&#x27;</span> [2011.2.5]</span><br><span class="line"></span><br><span class="line">e2fc2ce8dfe107d1e2742b459c2aaf137227bbc1 new way to handle -E option (write a mark <span class="keyword">in</span> the registry to avoid [5.2.0 2011.12.13]</span><br><span class="line"></span><br><span class="line">a14992992adcaa4c60e275cb011e7832e6e796ae new version (5.3) [2013.6.8]</span><br><span class="line"></span><br><span class="line">6ccf1500396efffeb38ed54ac78d2f2d41a9b762 new library: utf8 [2014.2.7]</span><br><span class="line"></span><br><span class="line">3c55790ebee7148281cd00f44aa293e456b4da6d <span class="string">&#x27;setkey&#x27;</span> -&gt; <span class="string">&#x27;setnodekey&#x27;</span> (to avoid conflicts with POSIX) [tag 5.3.0]</span><br><span class="line"></span><br><span class="line">c25d59a6bdbc6f587310159a1975b399ad8dd079 format <span class="string">&quot;%s&quot;</span> <span class="keyword">in</span> <span class="string">&#x27;string.format&#x27;</span> accepts embedded zeros when it [tag 5.3.2 2015.11.26]</span><br><span class="line"></span><br><span class="line">08199ade4ace6addd63148df4c596d6b61def8cd release 5.3.4 (year 2017)</span><br><span class="line"></span><br><span class="line">11769b203f052f7423575c1a66901cb9eb277206 new version (5.4) [2017.7.27]</span><br><span class="line"></span><br><span class="line">9243c414d92c253edd908f438caa31e2aa16f3f4 first version of empty entries <span class="keyword">in</span> tables</span><br><span class="line"></span><br><span class="line">b6888a158b43c7391e2e4837cf4ae91e8c5e8371 New release number (5.4.1) [2020.9.16]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="/2023/06/26/algorithm-note/"/>
      <url>/2023/06/26/algorithm-note/</url>
      
        <content type="html"><![CDATA[<h2 id="resource"><a href="#resource" class="headerlink" title="resource"></a>resource</h2><p><a href="https://oi-wiki.org/">OI Wiki</a><br>OI Wiki 致力于成为一个免费开放且持续更新的 编程竞赛 (competitive programming) 知识整合站点。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除重复元素</span></span><br><span class="line"><span class="function">ListNode* <span class="title">method</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode* res = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    res-&gt;next = head;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> val = cur-&gt;next-&gt;val;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next-&gt;val)</span><br><span class="line">                cur-&gt;next =  cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重复元素 保留一个</span></span><br><span class="line"><span class="function">ListNode* <span class="title">method</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur &amp;&amp; cur-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;val == cur-&gt;next-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// binarysearch</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> r =  nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> m = (l+r)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (nums[m] == target)</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        <span class="keyword">if</span> (nums[m] &lt; target)</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// level order</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            cur.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之字打印</span></span><br><span class="line"><span class="comment">// level order</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="type">int</span> level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            cur.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (level % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">reverse</span>(cur.<span class="built_in">begin</span>(), cur.<span class="built_in">end</span>());</span><br><span class="line">        res.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        level++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// isValidBst</span></span><br><span class="line"><span class="type">int</span> pre = INT_MIN;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValidBst</span><span class="params">(TreeNode* root)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isValidBst</span>(root-&gt;left)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;val &lt;= pre) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    pre = root-&gt;val;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isValidBst</span>(root-&gt;right)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bubblesort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubblesort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                std::<span class="built_in">swap</span>(arr[j], arr[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// selectsort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectsort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">                min = j</span><br><span class="line">        std::<span class="built_in">swap</span>(arr[i], arr[min]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertsort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertsort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key = arr[i];</span><br><span class="line">        <span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>((j&gt;<span class="number">0</span>) &amp;&amp; (key&lt; arr[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// quicksort</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">part</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = A[low];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; A[high] &gt;= pivot) --high;</span><br><span class="line">        A[low] = A[high];</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; A[low] &lt;= pivot) ++low;</span><br><span class="line">        A[high] = A[low];</span><br><span class="line">    &#125;</span><br><span class="line">    A[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> pivot = <span class="built_in">part</span>(A, low, high);</span><br><span class="line"><span class="built_in">quicksort</span>(A, low, pivot - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">quicksort</span>(A, pivot + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// quicksort all in one</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> i=low, j=high, index = arr[i];</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt;= index)--j;</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line"><span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i] &lt;= index)++i;</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = index;</span><br><span class="line"><span class="built_in">quicksort</span>(arr, low, i<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">quicksort</span>(arr, i+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">quicksort</span>(arr, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ele:arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// merge sort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;= low &amp;&amp; j &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i]&lt;=nums[j]) arr[index++] = nums[i++];</span><br><span class="line">        <span class="keyword">else</span> arr[index++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=low) arr[index++] = nums[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high) arr[index++] = nums[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nums[low] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left&gt;=right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">mergesort</span>(nums, left, mid);</span><br><span class="line">    <span class="built_in">mergesort</span>(nums, mid+<span class="number">1</span>, right);</span><br><span class="line">    <span class="built_in">merge</span>(nums, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// heapsort</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> dad = start;</span><br><span class="line">    <span class="type">int</span> son = dad*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(son &lt;= end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (son+<span class="number">1</span>&lt;=end&amp;&amp; arr[son] &lt; arr[son+<span class="number">1</span>]) son++;</span><br><span class="line">        <span class="keyword">if</span> (arr[dad] &gt; arr[son]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[dad], arr[son]);</span><br><span class="line">            dad = son;</span><br><span class="line">            son = dad*<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapsort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span><span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">heap</span>(arr, i, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len<span class="number">-1</span>; i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);</span><br><span class="line">        <span class="built_in">heap</span>(arr, <span class="number">0</span>, i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tree height / depth</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">depth</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">depth</span>(root-&gt;left), <span class="built_in">detph</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// big add</span></span><br><span class="line"><span class="function">string <span class="title">add</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> an = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> bn = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">max</span>(an, bn);</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;an) d += a[an<span class="number">-1</span>-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;bn) d + b[bn<span class="number">-1</span>-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ans += d%<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        d/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d) ans += d + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>())</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// big sub</span></span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> an =  a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> bn =  b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> l =  <span class="built_in">max</span>(an, bn);</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="type">int</span> borrow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> d = a[an<span class="number">-1</span>-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        d -= borrow;</span><br><span class="line">        borrow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; bn)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = b[bn<span class="number">-1</span>-i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (d&lt;s) borrow=<span class="number">1</span>, d+=<span class="number">10</span>;</span><br><span class="line">            d -= s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d&lt;<span class="number">0</span>) borrow=<span class="number">1</span>, d+=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (d&gt;=<span class="number">0</span>) ans += d + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ans.<span class="built_in">back</span>() == <span class="string">&#x27;0&#x27;</span>) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">substring</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">sub</span>(a,b);</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="string">&quot;-&quot;</span> + <span class="built_in">sub</span>(b,a);</span><br><span class="line">    <span class="keyword">if</span> (a&gt;b) <span class="keyword">return</span> <span class="built_in">sub</span>(a,b);</span><br><span class="line">    <span class="keyword">if</span> (a&lt;b) <span class="keyword">return</span> <span class="string">&quot;-&quot;</span> + <span class="built_in">sub</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// quickselect / findK</span></span><br><span class="line"><span class="comment">// 改进 BFPRT算法 -&gt; https://www.cnblogs.com/ldy-miss/p/12031077.html</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">part</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = arr[l];</span><br><span class="line">    <span class="keyword">while</span>(l&lt;h)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;h &amp;&amp; a[h]&gt;=p) --h;</span><br><span class="line">        a[l]=a[h];</span><br><span class="line">        <span class="keyword">while</span>(l&lt;h &amp;&amp; a[l]&lt;=p) ++l;</span><br><span class="line">        a[h]=a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l]=p;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickselect</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right, k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k = n - k;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) <span class="keyword">return</span> arr[k];</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">part</span>(arr, left, right);</span><br><span class="line">        <span class="keyword">if</span> (k==p) <span class="keyword">return</span> arr[k];</span><br><span class="line">        <span class="keyword">if</span> (k&lt;p) right = p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findk</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">quickselect</span>(arr, n<span class="number">-1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// perm</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string num, <span class="type">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(idx == num.<span class="built_in">size</span>() - <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; end;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=idx;i&lt;num.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(num[i], num[idx]);</span><br><span class="line">        <span class="built_in">dfs</span>(num, idx + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(num[i], num[idx]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">perm</span><span class="params">(string num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(num, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iter remove</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remote_iter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::list&lt;<span class="type">int</span>&gt; l = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s = l.<span class="built_in">begin</span>();s!=l.<span class="built_in">end</span>();s++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">3</span>==*s) s=l.<span class="built_in">erase</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ele:l) cout &lt;&lt; ele &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>topsort</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">dp</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">d</span>(n + <span class="number">1</span>);</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp1, tmp2;</span><br><span class="line">        cin &gt;&gt; tmp1;</span><br><span class="line">        cin &gt;&gt; tmp2;</span><br><span class="line">        dp[tmp1].<span class="built_in">push_back</span>(tmp2);</span><br><span class="line">        d[tmp2]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d[i] == <span class="number">0</span>) </span><br><span class="line">            que.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">        res.<span class="built_in">push_back</span>(u);</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i:dp[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--d[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt != n) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; res[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序——数组and链表实现<br><a href="https://juejin.cn/post/6982814314725900325">https://juejin.cn/post/6982814314725900325</a></p><p>归并排序——数组和链表实现<br><a href="https://juejin.cn/post/6982810879930679310">https://juejin.cn/post/6982810879930679310</a></p><p>链表排序（冒泡、选择、插入、快排、归并、希尔、堆排序）<br><a href="https://www.cnblogs.com/TenosDoIt/p/3666585.html">https://www.cnblogs.com/TenosDoIt/p/3666585.html</a></p><p>优先队列priority_queue的排序<br><a href="https://www.cnblogs.com/chaichengxun/p/15622141.html">https://www.cnblogs.com/chaichengxun/p/15622141.html</a></p><h2 id="二叉树和哈希表的优缺点对比与选择"><a href="#二叉树和哈希表的优缺点对比与选择" class="headerlink" title="二叉树和哈希表的优缺点对比与选择"></a>二叉树和哈希表的优缺点对比与选择</h2><p><a href="https://www.jianshu.com/p/a0fe9601a565">https://www.jianshu.com/p/a0fe9601a565</a></p><p><a href="https://github.com/PetarV-/Algorithms">Algorithms</a></p><h2 id="optim"><a href="#optim" class="headerlink" title="optim"></a>optim</h2><p><a href="https://github.com/esa/pagmo2">pagmo2</a><br><a href="https://github.com/esa/pygmo2">pygmo2</a><br><a href="https://github.com/coin-or/Ipopt">Ipopt</a></p><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p><a href="https://github.com/d-michail/jheaps">jheaps</a></p><h2 id="crdt"><a href="#crdt" class="headerlink" title="crdt"></a>crdt</h2><p><a href="https://github.com/josephg/diamond-types">diamond-types</a><br><a href="https://github.com/y-crdt/y-crdt">y-crd</a><br><a href="https://github.com/yjs/yjs">yjs</a></p><h2 id="raft"><a href="#raft" class="headerlink" title="raft"></a>raft</h2><p><a href="https://github.com/eBay/NuRaft">NuRaft</a><br><a href="https://github.com/RaftLib/RaftLib">RaftLib</a></p><p><a href="https://github.com/strasdat/Sophus">Sophus</a><br><a href="https://github.com/IlyaGrebnov/libsais">libsais</a> -&gt; suffix array<br><a href="https://github.com/Rookfighter/least-squares-cpp">least-squares-cpp</a><br><a href="https://github.com/benwr/bromberg_sl2">bromberg_sl2</a><br><a href="https://github.com/jhasse/poly2tri">poly2tri</a> 2D constrained Delaunay triangulation library </p><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p><a href="https://github.com/scandum/fluxsort">fluxsort</a><br>Rapid fuzzy string matching in C++ using the Levenshtein Distance<br><a href="https://github.com/maxbachmann/rapidfuzz-cpp">rapidfuzz-cpp</a><br><a href="https://github.com/timsort/cpp-TimSort">cpp-TimSort</a></p><h2 id="AlphaGo-Zero"><a href="#AlphaGo-Zero" class="headerlink" title="AlphaGo Zero"></a>AlphaGo Zero</h2><p><a href="https://github.com/tensorflow/minigo">minigo</a></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/fragglet/c-algorithms">c-algorithms</a><br><a href="https://github.com/begeekmyfriend/skiplist">skiplist</a><br><a href="https://github.com/kroitor/gjk.c">gjk.c</a><br><a href="https://github.com/begeekmyfriend/bplustree">bplustree</a><br><a href="https://github.com/vicky002/AlgoWiki">AlgoWiki</a><br><a href="https://github.com/Wizmann/ACM-ICPC">ACM-ICPC</a></p><p>精度计算整理<br><a href="https://www.jianshu.com/p/6af40b0c9b5e">https://www.jianshu.com/p/6af40b0c9b5e</a></p><p><a href="https://www.cnblogs.com/baiqiantao/p/15049604.html">https://www.cnblogs.com/baiqiantao/p/15049604.html</a><br><a href="https://github.com/wangzheng0822/algo">https://github.com/wangzheng0822/algo</a><br><a href="https://github.com/gl-lei/algorithm">https://github.com/gl-lei/algorithm</a></p><p>g^n &#x3D;&#x3D; g mod n<br>(g^n-g)&#x2F;n&#x3D;(g^(n-1)-1)g&#x2F;n<br>g^(2^k) &#x3D;&#x3D; 1 mod </p><p>大素数判断算法<br><a href="https://www.cnblogs.com/luo2413669045/p/13412143.html">https://www.cnblogs.com/luo2413669045/p/13412143.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> algo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>曲面细分</title>
      <link href="/2023/06/26/subdivision-note/"/>
      <url>/2023/06/26/subdivision-note/</url>
      
        <content type="html"><![CDATA[<p>曲面细分（Loop细分、Catmull-Clark细分）、曲面简化（边坍缩、二次度量误差）、曲面正则化<br><a href="https://blog.csdn.net/weixin_43399489/article/details/121440975">https://blog.csdn.net/weixin_43399489/article/details/121440975</a><br>Doo-Sabin、Catmull-Clark 和 Loop细分曲面展示<br><a href="https://www.bilibili.com/video/av246900191/">https://www.bilibili.com/video/av246900191/</a><br>三维网格细分算法（Catmull-Clark subdivision &amp; Loop subdivision）附源码<br><a href="https://www.cnblogs.com/shushen/p/5251070.html">https://www.cnblogs.com/shushen/p/5251070.html</a><br>Doo-Sabin细分算法<br><a href="https://blog.csdn.net/lafengxiaoyu/article/details/77103134">https://blog.csdn.net/lafengxiaoyu/article/details/77103134</a></p><p><a href="https://rosettacode.org/wiki/Catmull%E2%80%93Clark_subdivision_surface">https://rosettacode.org/wiki/Catmull%E2%80%93Clark_subdivision_surface</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络相关</title>
      <link href="/2023/06/26/network-note/"/>
      <url>/2023/06/26/network-note/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -np tcp</span><br><span class="line">netstat -np udp</span><br><span class="line"></span><br><span class="line">sudo nmap -sV -p T:22 --host-timeout 30 127.0.0.1</span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/xquic">xquic</a><br><a href="https://github.com/martinus/unordered_dense">unordered_dense</a><br><a href="https://github.com/nmap/nmap">nmap</a><br><a href="https://github.com/zmap/zmap">zmap</a><br><a href="https://github.com/jo-lund/monitor">monitor</a><br><a href="https://github.com/robertdavidgraham/sockdoc">sockdoc</a></p><h2 id="capture-x2F-filter"><a href="#capture-x2F-filter" class="headerlink" title="capture&#x2F;filter"></a>capture&#x2F;filter</h2><p><a href="https://github.com/seladb/PcapPlusPlus">PcapPlusPlus</a><br><a href="https://github.com/the-tcpdump-group/libpcap">libpcap</a><br><a href="https://github.com/nmap/npcap">npcap</a></p><h2 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h2><p><a href="https://github.com/ntp-project/ntp">ntp</a><br><a href="https://github.com/aljazceru/awesome-nostr">awesome-nostr</a><br><a href="https://github.com/Haivision/srt">src</a><br><a href="https://github.com/juj/kNet">kNet</a> -&gt; udp<br><a href="https://github.com/msgpack/msgpack-c">msgpack-c</a></p><p><a href="https://github.com/BruceDone/awesome-crawler">awesome-crawler</a><br><a href="https://github.com/TechEmpower/FrameworkBenchmarks">FrameworkBenchmarks</a><br><a href="https://github.com/robertdavidgraham/robdns">robdns</a><br><a href="https://github.com/neutrinolabs/xrdp">xrdp</a><br><a href="https://github.com/dpohanlon/Transfer">Transfer</a></p><h2 id="双网卡"><a href="#双网卡" class="headerlink" title="双网卡"></a>双网卡</h2><p><a href="https://www.cnblogs.com/xuyaowen/p/ping_specify_interface.html">https://www.cnblogs.com/xuyaowen/p/ping_specify_interface.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping -S 10.106.33.215  www.google.com</span><br><span class="line"><span class="comment"># -S 指定源地址 (macOS/Windows)</span></span><br><span class="line"><span class="comment"># -I interface (Linux)</span></span><br></pre></td></tr></table></figure><p><a href="https://djangocas.dev/blog/linux/linux-SO_BINDTODEVICE-and-mac-IP_BOUND_IF-to-bind-socket-to-a-network-interface/">https://djangocas.dev/blog/linux/linux-SO_BINDTODEVICE-and-mac-IP_BOUND_IF-to-bind-socket-to-a-network-interface/</a></p><h2 id="网速和带宽测试"><a href="#网速和带宽测试" class="headerlink" title="网速和带宽测试"></a>网速和带宽测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iperf https://sourceforge.net/projects/iperf2/</span><br><span class="line">iperf3 https://github.com/esnet/iperf</span><br><span class="line"></span><br><span class="line">dperf https://github.com/baidu/dperf</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p3389 10.106.19.1/24 | grep -A1 -B4 open</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3个过程全部完成叫全开扫描，最后一步不做，叫半开扫描。在实际过程中，半开扫描应用的最多，半开扫描不容易被目标电脑日志记录。半开扫描需要加参数-sS，全开扫描需要加参数-sT。</span><br><span class="line">半开扫描：nmap -sS 192.168.152.130</span><br><span class="line">全开扫描：nmap -sT 192.168.152.130</span><br><span class="line"></span><br><span class="line">仅使用Ping协议进行主机发现</span><br><span class="line">nmap -sP nmap -PN 10.106.19.75/24</span><br><span class="line">跳过Ping扫描阶段（无ping扫描）</span><br><span class="line">nmap -PN 10.106.19.75/24</span><br><span class="line">ARP协议扫描只适用于局域网内，使用ARP，不仅速度快，而且结果也会更加准确。</span><br><span class="line">nmap -PR 10.106.19.75/24</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">nmap_service</span><span class="params">(protocal, port, time_out)</span></span></span><br><span class="line">    <span class="keyword">local</span> args = <span class="string">&quot;nmap -sV&quot;</span></span><br><span class="line">    <span class="keyword">local</span> tail = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> protocal == <span class="string">&quot;tcp&quot;</span> <span class="keyword">then</span></span><br><span class="line">        tail = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">        args = args .. <span class="string">&quot; -p &quot;</span> .. <span class="string">&quot;T:&quot;</span> .. <span class="built_in">tostring</span>(port)</span><br><span class="line">    <span class="keyword">elseif</span> protocal == <span class="string">&quot;udp&quot;</span> <span class="keyword">then</span></span><br><span class="line">        tail = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">        args = args .. <span class="string">&quot; -sU -p &quot;</span> .. <span class="string">&quot;U:&quot;</span> .. <span class="built_in">tostring</span>(port)</span><br><span class="line">    <span class="keyword">elseif</span> protocal == <span class="string">&quot;tcp6&quot;</span> <span class="keyword">then</span></span><br><span class="line">        tail = <span class="string">&quot;-6 ::1&quot;</span></span><br><span class="line">        args = args .. <span class="string">&quot; -p &quot;</span> .. <span class="string">&quot;T:&quot;</span> .. <span class="built_in">tostring</span>(port)</span><br><span class="line">    <span class="keyword">elseif</span> protocal == <span class="string">&quot;udp6&quot;</span> <span class="keyword">then</span></span><br><span class="line">        tail = <span class="string">&quot;-6 ::1&quot;</span></span><br><span class="line">        args = args .. <span class="string">&quot; -sU -p &quot;</span> .. <span class="string">&quot;U:&quot;</span> .. <span class="built_in">tostring</span>(port)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(time_out) ~= <span class="string">&quot;number&quot;</span> <span class="keyword">then</span></span><br><span class="line">        time_out = <span class="number">30</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- set timeout</span></span><br><span class="line">    args = args .. <span class="string">&quot; --host-timeout &quot;</span> .. <span class="built_in">tostring</span>(time_out)</span><br><span class="line">    args = args .. <span class="string">&quot; &quot;</span> .. tail</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> nmap = agent.<span class="built_in">require</span> <span class="string">&quot;nmap&quot;</span></span><br><span class="line">    <span class="keyword">local</span> ret, nmap_output = nmap.exec(args)</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> ret, cjson.decode(nmap_output)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        agent.error_log(<span class="string">&quot;nmap exec failed! args=&quot;</span> ..</span><br><span class="line">        <span class="built_in">tostring</span>(args) .. <span class="string">&quot; ret=&quot;</span> .. <span class="built_in">tostring</span>(ret) .. <span class="string">&quot; agent.nmap: &quot;</span> .. nmap_output)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> ret, msg = nmap_service(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(ret, msg)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号槽记录</title>
      <link href="/2023/06/26/signal-and-slot/"/>
      <url>/2023/06/26/signal-and-slot/</url>
      
        <content type="html"><![CDATA[<p>signal_and_slot.md<br><a href="http://quinnftw.com/c++-signals-and-slots/">http://quinnftw.com/c++-signals-and-slots/</a><br><a href="https://theboostcpplibraries.com/boost.signals2">https://theboostcpplibraries.com/boost.signals2</a><br><a href="https://www.boost.org/doc/libs/1_80_0/doc/html/signals2.html">https://www.boost.org/doc/libs/1_80_0/doc/html/signals2.html</a><br><a href="http://t.zoukankan.com/Glucklichste-p-11488746.html">http://t.zoukankan.com/Glucklichste-p-11488746.html</a></p><p><a href="https://github.com/fr00b0/nod">https://github.com/fr00b0/nod</a></p><p><a href="https://blog.csdn.net/mystyle_/article/details/107642564">https://blog.csdn.net/mystyle_/article/details/107642564</a> std::bind class member</p><p><a href="https://github.com/Montellese/cpp-signal">https://github.com/Montellese/cpp-signal</a><br><a href="https://github.com/Montellese/cpp-signal#performance">https://github.com/Montellese/cpp-signal#performance</a></p><p><a href="https://github.com/NoAvailableAlias/signal-slot-benchmarks">https://github.com/NoAvailableAlias/signal-slot-benchmarks</a><br><a href="https://github.com/palacaze/sigslot">https://github.com/palacaze/sigslot</a></p><p>observer pattern<br>publish&#x2F;subscribe<br><a href="https://zhuanlan.zhihu.com/p/51357583">https://zhuanlan.zhihu.com/p/51357583</a><br>发布订阅模式里，发布者和订阅者，不是松耦合，而是完全解耦的 broker<br>channel<br>actor</p>]]></content>
      
      
      
        <tags>
            
            <tag> signal </tag>
            
            <tag> slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RayTrace记录</title>
      <link href="/2023/06/26/raytrace-note/"/>
      <url>/2023/06/26/raytrace-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/miloyip/archive/2010/07/07/languages_brawl_GI.html">https://www.cnblogs.com/miloyip/archive/2010/07/07/languages_brawl_GI.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">brew install libomp</span><br><span class="line">gcc -Xpreprocessor -fopenmp -lomp</span><br><span class="line">g++ -O3 -Xpreprocessor -fopenmp -lomp smallpt.cpp -o smallpt</span><br><span class="line">openmp</span><br><span class="line">Rendering (100 spp) 35.29%%</span><br><span class="line">8.384659 sec</span><br><span class="line"></span><br><span class="line">real0m1.559s</span><br><span class="line">user0m8.330s</span><br><span class="line">sys0m0.133s</span><br><span class="line"></span><br><span class="line">1.559s M1 8核 预计普通模式8s以上 单核</span><br><span class="line"></span><br><span class="line">无openmp</span><br><span class="line">Rendering (100 spp) 100.00%</span><br><span class="line">5.823110 sec</span><br><span class="line"></span><br><span class="line">real0m6.874s</span><br><span class="line">user0m5.831s</span><br><span class="line">sys0m0.007s</span><br><span class="line"></span><br><span class="line">-O0 24.939928 sec</span><br><span class="line">-O1 13.468371 sec</span><br><span class="line">-O2 5.418199 sec</span><br><span class="line">-Os 5.406158 sec</span><br><span class="line">-O3 5.815363 sec</span><br><span class="line"></span><br><span class="line">单核</span><br><span class="line"></span><br><span class="line">java openjdk 17.0.2</span><br><span class="line">Rendering (100 spp) 100.00%</span><br><span class="line">7.595000 sec</span><br><span class="line">real0m7.731s</span><br><span class="line">user0m8.040s</span><br><span class="line">sys0m0.159s</span><br><span class="line"></span><br><span class="line">单核</span><br><span class="line"></span><br><span class="line">5.406158/7.595=7118 70%的性能</span><br><span class="line"></span><br><span class="line">c<span class="comment">#</span></span><br><span class="line"><span class="comment"># dotnet /opt/homebrew/opt/dotnet/libexec/sdk/6.0.103/Roslyn/bincore/csc.dll /r:/opt/homebrew/Cellar/dotnet/6.0.103/libexec/sdk/6.0.103/ref/netstandard.dll smallpt.cs</span></span><br><span class="line"></span><br><span class="line">time dotnet run -c Release <span class="comment">#for smallpt_ref.cs</span></span><br><span class="line"></span><br><span class="line">Rendering (100 spp) 100.00%</span><br><span class="line">7.923316 sec</span><br><span class="line"></span><br><span class="line">real0m9.841s</span><br><span class="line">user0m10.294s</span><br><span class="line">sys0m0.322s</span><br><span class="line"></span><br><span class="line">至少在M1上 c<span class="comment"># (dotnet 6.0) 不比 java (openjdk 17.0.2占据优势)</span></span><br><span class="line"></span><br><span class="line">luajit</span><br><span class="line">Rendering (100 spp) 100.00%</span><br><span class="line">149.366208 sec</span><br><span class="line"></span><br><span class="line">real2m29.987s</span><br><span class="line">user2m29.046s</span><br><span class="line">sys0m0.356s</span><br><span class="line"></span><br><span class="line">149.366s M1 1核</span><br><span class="line"></span><br><span class="line">32x32 1.833572 sec</span><br><span class="line"></span><br><span class="line">lua 改为32x32 难度降为1/64</span><br><span class="line">Rendering (100 spp) 100.00%</span><br><span class="line">7.425509 sec</span><br><span class="line"></span><br><span class="line">real0m7.928s</span><br><span class="line">user0m7.428s</span><br><span class="line">sys0m0.009s</span><br><span class="line"></span><br><span class="line">7.43s M1 1核</span><br><span class="line">预计原本耗时7.43*64=</span><br><span class="line">python 太慢 改为32x32 难度降为1/64</span><br><span class="line">Rendering (100 spp) 100.00%</span><br><span class="line">63.590930291999996 sec</span><br><span class="line">real1m3.654s</span><br><span class="line">user1m3.581s</span><br><span class="line">sys0m0.034s</span><br><span class="line"></span><br><span class="line">预计原本耗时63.59*64=4069.76</span><br><span class="line"></span><br><span class="line">ruby2 改为32x32 难度降为1/64</span><br><span class="line">Rendering (4 spp) 100.00%</span><br><span class="line">4.593397 sec</span><br><span class="line">real0m4.682s</span><br><span class="line">user0m4.643s</span><br><span class="line">sys0m0.025s</span><br><span class="line"></span><br><span class="line">预计原本耗时4.59*64=293.76</span><br><span class="line">实际</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/homebrew/opt/ruby/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">ruby3 改为32x32 难度降为1/64</span><br><span class="line">Rendering (4 spp) 100.00%</span><br><span class="line">3.897925 sec</span><br><span class="line">real0m3.971s</span><br><span class="line">user0m3.943s</span><br><span class="line">sys0m0.023s</span><br><span class="line">预计原本耗时3.897925*64=249.4672</span><br><span class="line">实际258.469646 sec</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">firefox 62.16s 1core</span><br><span class="line">chrome 37.548s 1core</span><br><span class="line">safari 41.979s 1core</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 单层循环差异预计</span><br><span class="line">C 1 Java 0.85 Js 0.45 LuaJit 0.18 Ruby3 0.16 Ruby2 0.13 Lua 0.1 Python 0.03</span><br></pre></td></tr></table></figure><p><a href="https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling">https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling</a><br><a href="https://zhuanlan.zhihu.com/p/44671434">https://zhuanlan.zhihu.com/p/44671434</a><br><a href="http://www.kevinbeason.com/smallpt/">http://www.kevinbeason.com/smallpt/</a></p><p><a href="https://www.shadertoy.com/view/MlcczX">https://www.shadertoy.com/view/MlcczX</a> CosineWeightedSampleOnHemisphere<br><a href="https://zhuanlan.zhihu.com/p/360420413">https://zhuanlan.zhihu.com/p/360420413</a> 多重重要性采样&#x2F;低差异序列</p><p><a href="https://raytracing.github.io/books/RayTracingInOneWeekend.html">https://raytracing.github.io/books/RayTracingInOneWeekend.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> raytrace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS镜像</title>
      <link href="/2023/06/26/macos-image/"/>
      <url>/2023/06/26/macos-image/</url>
      
        <content type="html"><![CDATA[<p>macOS_image_note.md </p><p><a href="https://bbs.pcbeta.com/viewthread-1936045-1-1.html">https://bbs.pcbeta.com/viewthread-1936045-1-1.html</a><br>[其它] 【下载】macOS Ventura 13 可引导DMG &#x2F; ISO虚拟机 &#x2F;PKG安装包 - 全版本镜</p><p>xar -xf &#x2F;Volumes&#x2F;Install\ macOS&#x2F;InstallOS.pkg<br>cd InstallOS.pkg<br>tar xvzf Payload<br>mv InstallESD.dmg Install\ macOS\ Sierra.app&#x2F;Contents&#x2F;SharedSupport&#x2F;<br>mv Install\ macOS\ Sierra.app &#x2F;Applications</p><p><a href="https://dortania-github-io.thrrip.space/OpenCore-Install-Guide/installer-guide/mac-install-pkg.html">https://dortania-github-io.thrrip.space/OpenCore-Install-Guide/installer-guide/mac-install-pkg.html</a></p><p><a href="https://support.apple.com/zh-cn/HT201372">https://support.apple.com/zh-cn/HT201372</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./createinstalliso  --applicationpath /Applications/Install\ macOS\ Sierra.app --isodirectory .</span><br><span class="line"></span><br><span class="line">hdiutil create -o /tmp/Sierra -size 16g -volname Sierra -layout SPUD -fs HFS+J</span><br><span class="line">hdiutil attach /tmp/Sierra.dmg -noverify -mountpoint /Volumes/Sierra</span><br><span class="line">sudo /Applications/Install\ macOS\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --nointeraction --applicationpath <span class="string">&quot;/Applications/Install macOS Sierra.app&quot;</span></span><br><span class="line">hdiutil detach /volumes/Install\ macOS\ Sierra</span><br><span class="line">hdiutil convert /tmp/Sierra.dmg -format UDTO -o ~/Desktop/Sierra.cdr</span><br><span class="line"><span class="built_in">mv</span> ~/Desktop/Sierra.cdr ~/Desktop/Sierra.iso</span><br></pre></td></tr></table></figure><p><a href="https://dortania-github-io.thrrip.space/OpenCore-Install-Guide/">https://dortania-github-io.thrrip.space/OpenCore-Install-Guide/</a></p><p><a href="https://zhangsubo.cn/zai-mac-shang-an-zhuang-macos-high-sierra-zhi-jie/">https://zhangsubo.cn/zai-mac-shang-an-zhuang-macos-high-sierra-zhi-jie/</a></p><p><a href="https://eshop.macsales.com/blog/72081-utm-virtual-machine-on-m1-mac/">https://eshop.macsales.com/blog/72081-utm-virtual-machine-on-m1-mac/</a></p><p><a href="https://support.apple.com/en-us/HT211683">https://support.apple.com/en-us/HT211683</a></p><p><a href="https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/macrecovery/boards.json">https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/macrecovery/boards.json</a></p><p><a href="https://github.com/utmapp/UTM">https://github.com/utmapp/UTM</a></p><p><a href="https://tinyapps.org/blog/202105220715_m1_mac_emulate_x86.html">https://tinyapps.org/blog/202105220715_m1_mac_emulate_x86.html</a></p><p><a href="https://macx.top/5673.html">https://macx.top/5673.html</a></p><p><a href="https://macoshome.com/macos/8531.html">https://macoshome.com/macos/8531.html</a></p><p><a href="https://www.yrxitong.com/h-nd-200.html">https://www.yrxitong.com/h-nd-200.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Users/wurui/Documents/GitHub/createinstalliso/createinstalliso --applicationpath /Users/wurui/Downloads/Install\ macOS\ Monterey.app  --isodirectory ~/Downloads/</span><br></pre></td></tr></table></figure><p>10.12 默认配置2g不够 改为4G</p><p>同时配置10.12 10.14<br>开始时间14:27<br>10.12开机进入16:00<br>10.12开机一次2分钟</p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> image </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试笔记</title>
      <link href="/2023/06/26/debug-note/"/>
      <url>/2023/06/26/debug-note/</url>
      
        <content type="html"><![CDATA[<p>调试九法 -&gt; 规则和小故事<br>软件调试实战<br><a href="https://www.debugging-guide.com/tools">https://www.debugging-guide.com/tools</a></p><p>Memory error checking in C and C++: Comparing Sanitizers and Valgrind<br><a href="https://developers.redhat.com/blog/2021/05/05/memory-error-checking-in-c-and-c-comparing-sanitizers-and-valgrind">https://developers.redhat.com/blog/2021/05/05/memory-error-checking-in-c-and-c-comparing-sanitizers-and-valgrind</a></p><p>debug_note.md<br><a href="https://www.sourceware.org/gdb/documentation/">https://www.sourceware.org/gdb/documentation/</a><br><a href="https://lldb.llvm.org/">https://lldb.llvm.org/</a><br><a href="https://lldb.llvm.org/use/map.html">https://lldb.llvm.org/use/map.html</a></p><p>-static-libstdc++会导致gdb的-enable-pretty-printing失效<br><a href="https://codeyarns.com/tech/2014-07-17-how-to-enable-pretty-printing-for-stl-in-gdb.html">https://codeyarns.com/tech/2014-07-17-how-to-enable-pretty-printing-for-stl-in-gdb.html</a></p><p><a href="https://9to5answer.com/how-to-pretty-print-stl-containers-in-gdb">https://9to5answer.com/how-to-pretty-print-stl-containers-in-gdb</a></p><p>Break on all retq of current function<br><a href="https://stackoverflow.com/questions/3649468/how-to-set-a-breakpoint-in-gdb-where-the-function-returns">https://stackoverflow.com/questions/3649468/how-to-set-a-breakpoint-in-gdb-where-the-function-returns</a></p><figure class="highlight cpp"><figcaption><span>test.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    std::map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">    m.<span class="built_in">insert</span>(std::<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(std::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">    m.<span class="built_in">insert</span>(std::<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">-2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>gdb.in</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file main.out</span><br><span class="line">b test.cpp:14</span><br><span class="line">r</span><br><span class="line">p v</span><br><span class="line">p m</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>shell</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c++ test.cpp -g -o main.out</span><br><span class="line">gdb -q -x gdb.in</span><br><span class="line">lldb -s gdb.in</span><br></pre></td></tr></table></figure><p><a href="https://github.com/DamZiobro/gdb-automatic-deadlock-detector">https://github.com/DamZiobro/gdb-automatic-deadlock-detector</a></p><p>show breakpoint</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gdb</span></span><br><span class="line">info <span class="built_in">break</span></span><br><span class="line">i b</span><br><span class="line"><span class="comment">#lldb</span></span><br><span class="line">breakpoint</span><br><span class="line">b</span><br></pre></td></tr></table></figure><p><a href="http://labmain.com/2016/11/02/LLDB_debugging_skills/">http://labmain.com/2016/11/02/LLDB_debugging_skills/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e int <span class="variable">$c</span>=3</span><br><span class="line">p <span class="variable">$c</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zl1991/p/7344707.html">https://www.cnblogs.com/zl1991/p/7344707.html</a></p><figure class="highlight sh"><figcaption><span>gdb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> exec-wrapper <span class="built_in">env</span> ’LD_PRELOAD=libtest.so’</span><br><span class="line"><span class="built_in">set</span> disable-randomization on</span><br><span class="line"><span class="comment"># Debugging Forks GNU/Linux kernel version 2.5.46 and later</span></span><br><span class="line">checkpoint</span><br><span class="line">restart 1</span><br><span class="line"><span class="comment"># https://www.lmlphp.com/user/13608/article/item/435073/</span></span><br><span class="line">watchpoint <span class="comment"># This is sometimes called data breakpoints.</span></span><br><span class="line">catchpoint <span class="comment"># A catchpoint is another special breakpoint that stops your program when a certain kind</span></span><br><span class="line"><span class="comment"># of event occurs, such as the throwing of a C++ exception or the loading of a librar</span></span><br><span class="line"><span class="built_in">help</span> catch</span><br><span class="line">reverse-continue <span class="comment"># Running programs backward</span></span><br><span class="line"><span class="built_in">set</span> args 1 2 3</span><br><span class="line">p *argv@argc</span><br><span class="line">show values</span><br><span class="line">show convenience</span><br><span class="line">p <span class="variable">$_thread</span></span><br><span class="line">p <span class="variable">$_gthread</span></span><br><span class="line">start</span><br><span class="line">x/i <span class="variable">$pc</span></span><br><span class="line">p/s <span class="variable">$pc</span></span><br><span class="line"><span class="built_in">print</span> <span class="variable">$xmm1</span> <span class="comment"># x86</span></span><br><span class="line">info <span class="built_in">float</span></span><br><span class="line">info vector</span><br><span class="line">info auxv</span><br><span class="line">whatis FILE</span><br><span class="line"><span class="built_in">return</span>/finish</span><br><span class="line">p (char *) getenv (<span class="string">&quot;PATH&quot;</span>)</span><br><span class="line">info proc <span class="built_in">stat</span></span><br><span class="line">show osabi</span><br><span class="line">show cp-abi</span><br><span class="line">pi gdb.breakpoints()[0].location</span><br><span class="line">gu (+ 20 3)</span><br><span class="line">gu (display (+ 20 3)) (newline)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/WelliSolutions/DebuggingRepository">DebuggingRepository</a><br><a href="https://github.com/x64dbg/x64dbg">x64dbg</a><br><a href="https://github.com/x64dbg/TitanEngine">TitanEngine</a><br><a href="https://github.com/DerekSelander/LLDB">LLDB</a><br><a href="https://github.com/scottt/debugbreak">debugbreak</a><br><a href="https://github.com/yanqi27/core_analyzer">core_analyzer</a><br><a href="https://github.com/foonathan/debug_assert">debug_assert</a><br><a href="https://github.com/DynamoRIO/drmemory">drmemory</a><br><a href="https://github.com/DynamoRIO/dynamorio">dynamorio</a><br><a href="https://github.com/mikael-s-persson/templight">templight</a><br><a href="https://github.com/winsiderss/systeminformer">systeminformer</a><br><a href="https://github.com/sharkdp/dbg-macro">dbg-macro</a><br><a href="https://github.com/google/sanitizers">sanitizers</a><br><a href="https://github.com/hrydgard/minitrace">minitrace</a><br><a href="https://github.com/lldb-tools/lldb-mi">lldb-mi</a></p><h2 id="调试器实现挂起"><a href="#调试器实现挂起" class="headerlink" title="调试器实现挂起"></a>调试器实现挂起</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb</span><br><span class="line">linux sigsuspend</span><br><span class="line">mac thread_suspend/task_resume</span><br><span class="line">windows SuspendThread</span><br><span class="line">lldb</span><br><span class="line">linux PTRACE_SINGLESTEP/PTRACE_CONT</span><br></pre></td></tr></table></figure><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>所以，对于前面两个问题的答案是:</p><ol><li>优秀的开发人员总会留下一条排错的捷径。比如 log 或者是 debug 版本。</li><li>遇上愚蠢的开发人员，从不给程序的排错留后路，是一个严重的问题。<br>为了方便调试，优秀的开发人员至少会做到：</li><li>多使用 assert, trace</li><li>适当合理地添加 log</li><li>每次编译发布后，都把 PDB 文件分不同的版本当宝贝一样保存在安全的地方。</li><li>总是编译一个 release 版本，一个 debug 版本<br>有了上面的准备，无论问题多么神秘，下面两招总是有用的:</li><li>部署 debug 版本</li><li>收集程序的 log<br>最高的调试技巧是开发人员通盘的考虑跟合理的设计，让任何潜在的问题都可以水道渠成地<br>解决。</li></ol><p>LdrpInitialize</p><p>at -&gt; schtasks</p><p>gflags -i iexplore.exe +ust<br>set _NT_SYMBOL_PATH&#x3D;SRV<em>D:\websymbols</em><a href="http://msdl.microsoft.com/dow">http://msdl.microsoft.com/dow</a><br>nload&#x2F;symbols<br>umdh -p:5728 -f:ie1.log<br>umdh -p:5728 -f:ie2.log<br>umdh -p:5728 -f:ie3.log<br>umdh ie2.log ie3.log &gt; cmp23.txt</p><p>前面介绍的第三种方法就使用 API Hook 监视内存操作。IIS Diagnostics 就是使用这种技术的<br>现成工具</p><p>EVENT FileSystemControl<br>IRP_MJ_FILE_SYSTEM_CONTROL</p><p>dt ntdll!_*</p><p><a href="https://gjbex.github.io/Defensive_programming_and_debugging/">https://gjbex.github.io/Defensive_programming_and_debugging/</a><br><a href="https://xinqiu.gitbooks.io/linux-insides-cn/content/Booting/linux-bootstrap-1.html">https://xinqiu.gitbooks.io/linux-insides-cn/content/Booting/linux-bootstrap-1.html</a></p><h2 id="Debug-Books"><a href="#Debug-Books" class="headerlink" title="Debug Books"></a>Debug Books</h2><p>Windows高级调试<br><a href="https://book.douban.com/subject/3781532/">https://book.douban.com/subject/3781532/</a><br>调试九法<br><a href="https://book.douban.com/subject/5376270/">https://book.douban.com/subject/5376270/</a><br>软件调试的艺术<br><a href="https://book.douban.com/subject/4111413/">https://book.douban.com/subject/4111413/</a><br>软件调试修炼之道<br><a href="https://book.douban.com/subject/6398127/">https://book.douban.com/subject/6398127/</a><br>Debug Hacks中文版[linux]<br><a href="https://book.douban.com/subject/6799412/">https://book.douban.com/subject/6799412/</a><br>Effective Debugging<br><a href="https://book.douban.com/subject/26903324/">https://book.douban.com/subject/26903324/</a><br><a href="https://weread.qq.com/web/bookDetail/e4d325f0718f6373e4dca29">https://weread.qq.com/web/bookDetail/e4d325f0718f6373e4dca29</a><br><a href="https://celthi.github.io/effective-debugging-zh/">https://celthi.github.io/effective-debugging-zh/</a></p><p><a href="https://gjbex.github.io/Defensive_programming_and_debugging/">https://gjbex.github.io/Defensive_programming_and_debugging/</a></p><p>A deadlock-detecting mutex<br><a href="https://faouellet.github.io/ddmutex/">https://faouellet.github.io/ddmutex/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Confluence配置</title>
      <link href="/2023/06/26/confluence-config/"/>
      <url>/2023/06/26/confluence-config/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.atlassian.com/zh/software/confluence/download-archives">https://www.atlassian.com/zh/software/confluence/download-archives</a></p><p><a href="https://blog.csdn.net/RAPTORHAWK/article/details/115679891">https://blog.csdn.net/RAPTORHAWK/article/details/115679891</a></p><p><a href="https://zhile.io/2018/12/20/atlassian-license-crack.html">https://zhile.io/2018/12/20/atlassian-license-crack.html</a></p><p>C:\Program Files\Atlassian\Confluence\startup_bundled_jre.bat<br>set JAVA_OPTS&#x3D;-javaagent:”C:\Users\wurui\Downloads\atlassian-agent.jar”<br>java -jar &#x2F;Users&#x2F;wurui&#x2F;Downloads&#x2F;atlassian-agent-v1.3.1&#x2F;atlassian-agent.jar -p conf -m test@cn -n wurui -o xxxxx -s BA2Y-OVOF-PFI2-YALD</p>]]></content>
      
      
      
        <tags>
            
            <tag> confluence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS内核</title>
      <link href="/2023/06/26/macos-kernel/"/>
      <url>/2023/06/26/macos-kernel/</url>
      
        <content type="html"><![CDATA[<p>macos_kernel.md<br><a href="https://github.com/maurice-schuppe/flockflock">https://github.com/maurice-schuppe/flockflock</a><br><a href="https://github.com/jzlka/macOS-monitoring-API-demos">https://github.com/jzlka/macOS-monitoring-API-demos</a></p><p>macOS下Kext notarization<br><a href="https://blog.csdn.net/tanhuang614/article/details/100552285">https://blog.csdn.net/tanhuang614/article/details/100552285</a></p><p>open &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;MacOSX.platform&#x2F;Developer&#x2F;SDKs&#x2F;MacOSX.sdk&#x2F;System&#x2F;Library&#x2F;Frameworks</p><p>cp -R test.kext hello.kext<br>sudo chmod -R 755 hello.kext<br>sudo chown -R root:wheel hello.kext</p><p>cp -R FlockFlock.kext tmp.kext<br>sudo chmod -R 755 tmp.kext<br>sudo chown -R root:wheel tmp.kext</p><p>Mac 内核扩展开发<br><a href="https://toutiao.io/posts/fhdsfj/preview">https://toutiao.io/posts/fhdsfj/preview</a></p><p>深入解析Mac OS X &amp; iOS 操作系统 学习笔记（十五）<br><a href="https://www.jianshu.com/p/96837976c1f8">https://www.jianshu.com/p/96837976c1f8</a></p><p>Mac system extensions for threat detection: Part 3<br><a href="https://www.elastic.co/blog/mac-system-extensions-for-threat-detection-part-3">https://www.elastic.co/blog/mac-system-extensions-for-threat-detection-part-3</a></p><p>On macOS Kernel&#x2F;Kext Logging<br><a href="https://rw.internals.io/post/on-macOS-kernel-kext-logging/">https://rw.internals.io/post/on-macOS-kernel-kext-logging/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span> show --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;Echo&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> show --predicate <span class="string">&quot;processID == 242&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> show --predicate <span class="string">&#x27;sender == &quot;org.debug.Echo&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> stream --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;tmp&quot;&#x27;</span></span><br><span class="line"><span class="built_in">log</span> show --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;tmp&quot;&#x27;</span></span><br><span class="line"><span class="built_in">log</span> stream --sender tmp</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span> stream --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;test&quot;&#x27;</span></span><br><span class="line"><span class="built_in">log</span> show --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;hello&quot;&#x27;</span></span><br><span class="line"><span class="built_in">log</span> stream --predicate <span class="string">&#x27;senderImagePath CONTAINS &quot;hello&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clang notify_demo.c -lEndpointSecurity -lbsm -o notify</span><br><span class="line">codesign -f -s - --entitlements Extension.entitlements notify</span><br><span class="line"></span><br><span class="line">clang auth_demo.c -lEndpointSecurity -lbsm -o auth</span><br><span class="line">codesign -f -s - --entitlements Extension.entitlements auth</span><br><span class="line">sudo ./auth</span><br><span class="line">open -b com.apple.TextEdit</span><br></pre></td></tr></table></figure><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.kpi.libkern<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>15.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.kpi.bsd<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>15.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.kpi.dsep<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>15.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>com.apple.kpi.dsep -&gt; mac_policy_register<br>com.apple.kpi.bsd -&gt; vn_getpath<br>com.apple.kpi.libkern -&gt; std c lib</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kextstat | grep kpi</span><br><span class="line"><span class="comment"># https://leiless.github.io/blog/posts/xnu-kext-use-private-kpi/</span></span><br><span class="line"><span class="comment"># https://github.com/apple-oss-distributions/xnu/blob/main/config/list_supported.sh</span></span><br></pre></td></tr></table></figure><p>内核扩展<br><a href="https://support.apple.com/zh-cn/guide/deployment/depa5fb8376f/web">https://support.apple.com/zh-cn/guide/deployment/depa5fb8376f/web</a><br>在 macOS 11 或更高版本中，如果启用了第三方内核扩展 (Kext)，就不能按需将其载入内核中。第三方内核扩展需要用户批准、重新启动 macOS 以将更改载入内核，还需要在搭载 Apple 芯片的 Mac 上将安全启动配置为“降低安全性”。</p><p>macOS内核拓展与用户态进程的通信实现（一）<br><a href="https://www.jianshu.com/p/4268e02e7c4c">https://www.jianshu.com/p/4268e02e7c4c</a><br>macOS内核拓展与用户态进程的通信实现（二）<br><a href="https://www.jianshu.com/p/8318cabe9535">https://www.jianshu.com/p/8318cabe9535</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IOServiceOpen</span><br><span class="line">IOConnectSetNotificationPort</span><br><span class="line">IOConnectCallMethod</span><br><span class="line">IOConnectMapMemory</span><br><span class="line">IOConnectCallAsyncMethod</span><br><span class="line">IOConnectCallStructMethod</span><br><span class="line">IOConnectCallAsyncStructMethod</span><br><span class="line">IOConnectCallScalarMethod</span><br><span class="line">IOConnectCallAsyncScalarMethod</span><br></pre></td></tr></table></figure><p>DNS过滤<br>Socket Filter -&gt; </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/kpi_socketfilter.h&gt;</span></span></span><br><span class="line">sflt_filter *filter;</span><br><span class="line"><span class="built_in">bzero</span>(filter, <span class="built_in">sizeof</span>(sflt_filter));</span><br><span class="line"></span><br><span class="line">filter-&gt;sf_handle = handle;</span><br><span class="line">filter-&gt;sf_flags = SFLT_GLOBAL;</span><br><span class="line">filter-&gt;sf_name = (<span class="type">char</span> *)kSocketFilterName;</span><br><span class="line">filter-&gt;sf_attach = socket_attach_callback;</span><br><span class="line">filter-&gt;sf_detach = socket_detach_callback;</span><br><span class="line">filter-&gt;sf_bind = socket_bind_callback;</span><br><span class="line">filter-&gt;sf_notify = socket_notify_callback;</span><br><span class="line">filter-&gt;sf_data_in = socket_data_in_callback;</span><br><span class="line">filter-&gt;sf_data_out = socket_data_out_callback;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">errno_t</span> <span class="title">sflt_register</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> sflt_filter *filter, <span class="type">int</span> domain,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">int</span> type, <span class="type">int</span> protocol)</span></span></span><br><span class="line"><span class="function">__NKE_API_DEPRECATED</span>;</span><br></pre></td></tr></table></figure><p>NuwaStone<br><a href="https://github.com/ConradSun/NuwaStone">https://github.com/ConradSun/NuwaStone</a><br>A macOS behavior audit system with scope of file, process and network events.<br>file&#x2F;process -&gt; kauth<br>&lt;&#x3D;10.15 kauth vnode&#x2F;fileop</p><blockquote><p>&#x3D;10.16(11.0) EndpointSecurity<br>network -&gt;<br>&lt;&#x3D;10.15 sflt_register [NKE Network Kernel Extension KPI]<br>&#x3D;10.16(11.0) NetworkExtension</p></blockquote><p>vm_kernel_unslide_or_perm_external<br><a href="https://github.com/AloneMonkey/MacKext/blob/master/AntiRootkit/macho/macho_utils.c">https://github.com/AloneMonkey/MacKext/blob/master/AntiRootkit/macho/macho_utils.c</a><br><a href="https://github.com/shinvou/SIPless">https://github.com/shinvou/SIPless</a> Small KEXT to disable SIP on &gt;&#x3D; macOS 10.12.<br><a href="https://github.com/snare/KernelResolver">https://github.com/snare/KernelResolver</a> origin<br><a href="https://github.com/leiless/ksymresolver">https://github.com/leiless/ksymresolver</a><br>[转]Resolving kernel symbols<br><a href="https://www.cnblogs.com/Proteas/p/4030779.html">https://www.cnblogs.com/Proteas/p/4030779.html</a><br><a href="https://www.bbsmax.com/A/nAJvmNb8zr/">https://www.bbsmax.com/A/nAJvmNb8zr/</a><br>Resolving Kernel Symbols Post-ASLR<br><a href="https://www.zdziarski.com/blog/?p=6901">https://www.zdziarski.com/blog/?p=6901</a><br><a href="https://github.com/jzdziarski/kernelresolver/blob/master/kernel_resolver.c">https://github.com/jzdziarski/kernelresolver/blob/master/kernel_resolver.c</a><br>Mac OS X内核编程,MAC驱动开发资源汇总<br><a href="https://blog.csdn.net/majiakun1/article/details/78030073">https://blog.csdn.net/majiakun1/article/details/78030073</a><br>Slides: Crafting macOS Root Kits<br><a href="https://www.zdziarski.com/blog/?p=6909">https://www.zdziarski.com/blog/?p=6909</a><br><a href="https://www.zdziarski.com/blog/?cat=14">https://www.zdziarski.com/blog/?cat=14</a><br><a href="https://www.zdziarski.com/blog/wp-content/uploads/2017/02/Crafting-macOS-Root-Kits.pdf">https://www.zdziarski.com/blog/wp-content/uploads/2017/02/Crafting-macOS-Root-Kits.pdf</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">exec_check_permissions</span><span class="params">(<span class="keyword">struct</span> image_params *imgp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_MACF</span></span><br><span class="line">error = <span class="built_in">mac_vnode_check_exec</span>(imgp-&gt;ip_vfs_context, vp, imgp);</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check for execute permission */</span></span><br><span class="line">action = KAUTH_VNODE_EXECUTE;</span><br><span class="line"><span class="comment">/* Traced images must also be readable */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;p_lflag &amp; P_LTRACED) &#123;</span><br><span class="line">action |= KAUTH_VNODE_READ_DATA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((error = <span class="built_in">vnode_authorize</span>(vp, <span class="literal">NULL</span>, action, imgp-&gt;ip_vfs_context)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">exec_activate_image</span><span class="params">(<span class="keyword">struct</span> image_params *imgp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">error = <span class="built_in">exec_check_permissions</span>(imgp);</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="keyword">goto</span> bad;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Call out to allow 3rd party notification of exec.</span></span><br><span class="line"><span class="comment"> * Ignore result of kauth_authorize_fileop call.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">kauth_authorize_fileop_has_listeners</span>()) &#123;</span><br><span class="line"><span class="built_in">kauth_authorize_fileop</span>(<span class="built_in">vfs_context_ucred</span>(imgp-&gt;ip_vfs_context),</span><br><span class="line">    KAUTH_FILEOP_EXEC,</span><br><span class="line">    (<span class="type">uintptr_t</span>)ndp-&gt;ni_vp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">__mac_execve -&gt; exec_activate_image</span><br></pre></td></tr></table></figure><p>先检查macf 再检查kauth</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_MACF_SOCKET_SUBSET</span></span><br><span class="line"><span class="keyword">if</span> ((sa != <span class="literal">NULL</span> &amp;&amp; sa-&gt;sa_family == AF_SYSTEM) ||</span><br><span class="line">    (error = <span class="built_in">mac_socket_check_bind</span>(<span class="built_in">kauth_cred_get</span>(), so, sa)) == <span class="number">0</span>) &#123;</span><br><span class="line">error = <span class="built_in">sobindlock</span>(so, sa, <span class="number">1</span>);  <span class="comment">/* will lock socket */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">error = <span class="built_in">sobindlock</span>(so, sa, <span class="number">1</span>);          <span class="comment">/* will lock socket */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* MAC_SOCKET_SUBSET */</span></span></span><br><span class="line"><span class="comment">// sobindlock -&gt;</span></span><br><span class="line"><span class="comment">/* Socket filter */</span></span><br><span class="line">error = <span class="built_in">sflt_bind</span>(so, nam);</span><br><span class="line"><span class="comment">// soconnectlock -&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Run connect filter before calling protocol:</span></span><br><span class="line"><span class="comment"> *  - non-blocking connect returns before completion;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error = <span class="built_in">sflt_connectout</span>(so, nam);</span><br><span class="line"><span class="comment">// sonewconn -&gt;</span></span><br><span class="line">sflt_connectin</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_MACF_SOCKET_SUBSET</span></span><br><span class="line">error = <span class="built_in">mac_vnode_check_uipc_connect</span>(ctx, vp, so);</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line"><span class="built_in">socket_lock</span>(so, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* MAC_SOCKET_SUBSET */</span></span></span><br><span class="line"></span><br><span class="line">error = <span class="built_in">vnode_authorize</span>(vp, <span class="literal">NULL</span>, KAUTH_VNODE_WRITE_DATA, ctx);</span><br><span class="line"><span class="comment">// connectit/connectitx -&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_MACF_SOCKET_SUBSET</span></span><br><span class="line"><span class="keyword">if</span> ((error = <span class="built_in">mac_socket_check_connect</span>(<span class="built_in">kauth_cred_get</span>(), so, dst)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (auio != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((error = <span class="built_in">mac_socket_check_send</span>(<span class="built_in">kauth_cred_get</span>(), so, dst)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* MAC_SOCKET_SUBSET */</span></span></span><br><span class="line">connectx -&gt;</span><br><span class="line">connectx_nocancel -&gt; <span class="function">connectitx</span></span><br><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">connect</span><span class="params">(<span class="type">proc_ref_t</span> p, <span class="keyword">struct</span> connect_args *uap, <span class="type">int32_ref_t</span> retval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__pthread_testcancel(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">connect_nocancel</span>(p, (<span class="keyword">struct</span> connect_nocancel_args *)uap,</span><br><span class="line">           retval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// connect -&gt; connectx_nocancel -&gt; connectitx</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/leiless/ksymresolver">https://github.com/leiless/ksymresolver</a><br><a href="https://github.com/jzdziarski/kernelresolver">https://github.com/jzdziarski/kernelresolver</a><br><a href="https://github.com/shinvou/SIPless.git">https://github.com/shinvou/SIPless.git</a><br><a href="https://github.com/Ch4nc3n/HookSysCall.git">https://github.com/Ch4nc3n/HookSysCall.git</a><br><a href="https://www.cs.dartmouth.edu/~sergey/cs108/guest_lectures/xnu-suggested-project.txt">https://www.cs.dartmouth.edu/~sergey/cs108/guest_lectures/xnu-suggested-project.txt</a><br><a href="https://man.netbsd.org/kauth.9">https://man.netbsd.org/kauth.9</a><br><a href="https://cs.dartmouth.edu/~sergey/cs258/">https://cs.dartmouth.edu/~sergey/cs258/</a><br><a href="https://github.com/Andrej-Antipov/Kext-Install-Utility">https://github.com/Andrej-Antipov/Kext-Install-Utility</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">m_vnodeListener = <span class="built_in">kauth_listen_scope</span>(KAUTH_SCOPE_VNODE, vnode_scope_callback, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> *&gt;(<span class="keyword">this</span>));</span><br><span class="line"><span class="keyword">if</span> (m_vnodeListener == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_fileopListener = <span class="built_in">kauth_listen_scope</span>(KAUTH_SCOPE_FILEOP, fileop_scope_callback, <span class="built_in">reinterpret_cast</span>&lt;<span class="type">void</span> *&gt;(<span class="keyword">this</span>));</span><br><span class="line"><span class="keyword">if</span> (m_fileopListener == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">kauth_unlisten_scope</span>(m_vnodeListener);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *scope_name[] = &#123;</span><br><span class="line">    KAUTH_SCOPE_GENERIC,</span><br><span class="line">    KAUTH_SCOPE_PROCESS,</span><br><span class="line">    KAUTH_SCOPE_VNODE,</span><br><span class="line">    KAUTH_SCOPE_FILEOP,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">kauth_scope_callback_t</span> scope_cb[] = &#123;</span><br><span class="line">    generic_scope_cb,</span><br><span class="line">    process_scope_cb,</span><br><span class="line">    vnode_scope_cb,</span><br><span class="line">    fileop_scope_cb,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generic scope.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KAUTH_SCOPE_GENERIC     <span class="string">&quot;com.apple.kauth.generic&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Process/task scope.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KAUTH_SCOPE_PROCESS     <span class="string">&quot;com.apple.kauth.process&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Vnode operation scope.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Prototype for vnode_authorize is in vnode.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KAUTH_SCOPE_VNODE       <span class="string">&quot;com.apple.kauth.vnode&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File system operation scope.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KAUTH_SCOPE_FILEOP      <span class="string">&quot;com.apple.kauth.fileop&quot;</span></span></span><br></pre></td></tr></table></figure><p>DNS Query<br>port &#x3D; 53</p><p>阻止网络访问<br>Network Extension<br>NEFilterSocketFlow&#x2F;NEAppProxyFlow&#x2F;NENetworkRule<br><a href="https://github.com/Paragon-Software-Group/paragon_firewall_ce">https://github.com/Paragon-Software-Group/paragon_firewall_ce</a><br>Paragon Firewall for Mac Community Edition<br><a href="https://github.com/OlexiyKhokhlov/HeyApple">https://github.com/OlexiyKhokhlov/HeyApple</a><br><a href="https://github.com/zeek/zeek-agent-v2/blob/main/src/platform/darwin/network-extension.mm">https://github.com/zeek/zeek-agent-v2/blob/main/src/platform/darwin/network-extension.mm</a><br><a href="https://github.com/zeek/zeek">https://github.com/zeek/zeek</a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [NEFilterNewFlowVerdict dropVerdict];</span><br></pre></td></tr></table></figure><p>Network Kernel Extension</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sflt_register</span><br><span class="line">result = EPERM;</span><br></pre></td></tr></table></figure><p><a href="https://qa.1r1g.com/sf/ask/4474923281/">https://qa.1r1g.com/sf/ask/4474923281/</a><br><a href="https://developer.apple.com/fr/support/kernel-extensions/">https://developer.apple.com/fr/support/kernel-extensions/</a></p><p>实现 macOS 内核监控的几种方法<br><a href="https://paper.seebug.org/380/">https://paper.seebug.org/380/</a></p><p>xnu_macos.md</p><h1 id="libkdd"><a href="#libkdd" class="headerlink" title="libkdd"></a>libkdd</h1><p>Kernel Data Descriptors<br>The <code>KCDATA</code> format</p><h1 id="osfmk"><a href="#osfmk" class="headerlink" title="osfmk"></a>osfmk</h1><h2 id="kdp"><a href="#kdp" class="headerlink" title="kdp"></a>kdp</h2><p>Kernel Debugging Protocol</p><p><a href="https://github.com/objective-see/KextViewr">KextViewr</a><br><a href="https://github.com/objective-see/Netiquette">Netiquette</a> Network Monitor<br><a href="https://github.com/objective-see/FileMonitor">FileMonitor</a><br><a href="https://github.com/objective-see/LuLu">LuLu</a><br><a href="https://github.com/anismansuri63/MacFilter">MacFilter</a><br><a href="https://github.com/cntrump/SimpleFirewall">SimpleFirewall</a><br><a href="https://github.com/OlexiyKhokhlov/HeyApple">HeyApple</a><br><a href="https://github.com/Paragon-Software-Group/paragon_firewall_ce">paragon_firewall_ce</a><br><a href="https://github.com/gdbinit/MachOView">MachOView</a><br><a href="https://github.com/briancabbott/macOS-system-projects">macOS-system-projects</a><br><a href="https://github.com/GeoSn0w/hspGuard">hspGuard</a><br><a href="https://github.com/Andrej-Antipov/Kext-Install-Utility">Kext-Install-Utility</a></p><p><a href="https://github.com/jzdziarski/kernelresolver">kernelresolver</a><br><a href="https://github.com/snare/KernelResolver">KernelResolver</a><br><a href="https://github.com/Ch4nc3n/HookSysCall">HookSysCall</a><br><a href="https://github.com/AloneMonkey/MacKext">MacKext</a><br><a href="https://github.com/leiless/bsd_kext_log">bsd_kext_log</a><br><a href="https://github.com/jzlka/blocker">blocker</a><br><a href="https://github.com/objective-see/BlockBlock">BlockBlock</a></p><p><a href="https://github.com/jzlka/macOS-monitoring-API-demos">macOS-monitoring-API-demos</a><br><a href="https://github.com/didi/kemon">kemon</a><br><a href="https://github.com/maurice-schuppe/flockflock">flockflock</a><br><a href="https://github.com/Apress/os-x-ios-kernel-programming">os-x-ios-kernel-programming</a><br><a href="https://github.com/knightsc/osx_and_ios_kernel_programming">osx_and_ios_kernel_programming</a><br><a href="https://github.com/ConradSun/NuwaStone">NuwaStone</a><br><a href="https://github.com/Kiprey/HelloKernControl">HelloKernControl</a><br><a href="https://github.com/knightsc/LittleRooter">LittleRooter</a><br><a href="https://github.com/gyunaev/macprocmon">macprocmon</a></p><p><a href="https://github.com/drduh/macOS-Security-and-Privacy-Guide">macOS-Security-and-Privacy-Guide</a></p><p><a href="https://github.com/google/santa">santa</a><br><a href="https://github.com/shinvou/SIPless">SIPless</a><br><a href="https://github.com/AloneMonkey/MacKext">MacKext</a><br><a href="https://github.com/alcarithemad/rust-kext">rust-kext</a></p><p><a href="https://github.com/DerekSelander/dsdump">dsdump</a><br><a href="https://github.com/LouisBrunner/valgrind-macos">valgrind-macos</a> -&gt; x64&#x2F;not arm64<br><a href="https://github.com/PureDarwin/PureDarwin">PureDarwin</a><br><a href="https://github.com/acidanthera/OpenCorePkg">OpenCorePkg</a><br><a href="https://github.com/squiffy/Masochist">Masochist</a><br><a href="https://github.com/halo/LinkLiar">LinkLiar</a><br><a href="https://github.com/shiguol/Surf">Surf</a><br><a href="https://github.com/CloverHackyColor/CloverBootloader">CloverBootloader</a></p><p><a href="https://github.com/steven-michaud/reverse-engineering-on-osx">reverse-engineering-on-osx</a><br><a href="https://github.com/MrGcGamer/LibSymbolize">LibSymbolize</a><br><a href="https://github.com/facebook/idb">idb</a><br><a href="https://github.com/steven-michaud/SandboxMirror">SandboxMirror</a><br><a href="https://github.com/mountainstorm/CoreSymbolication">CoreSymbolication</a><br><a href="https://github.com/rodionovd/liblorgnette">liblorgnette</a><br><a href="https://github.com/dlevi309/kdebugView">kdebugView</a><br><a href="https://github.com/Torrekie/apple_internal_sdk">apple_internal_sdk</a></p><p><a href="https://github.com/hack-different/newosxbook-tools">newosxbook-tools</a><br><a href="https://github.com/keith/dyld-shared-cache-extractor">dyld-shared-cache-extractor</a><br><a href="https://github.com/gnachman/iTerm2">iTerm2</a></p><p><a href="https://github.com/tanghaitao/OC-learn-master">OC-learn-master</a><br><a href="https://github.com/kabiroberai/LibraryInjector">LibraryInjector</a><br><a href="https://github.com/objective-see/ProcessMonitor">ProcessMonitor</a><br><a href="https://github.com/bestswifter/BSBacktraceLogger">BSBacktraceLogger</a><br><a href="https://github.com/steven-michaud/HookCase">HookCase</a><br><a href="https://github.com/apple-open-source-mirror/Security">Security</a></p><p><a href="https://github.com/Shanesun/awesome-iOS-resource">awesome-iOS-resource</a><br><a href="https://github.com/libimobiledevice/libimobiledevice">libimobiledevice</a><br><a href="https://github.com/emonti/iOS_app_re_tools">iOS_app_re_tools</a></p><p>objective-see.md<br>BlockBlock -&gt; ES_EVENT_TYPE_AUTH_EXEC<br>FileMonitor -&gt;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">es_event_type_t</span> events[] = &#123;ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_OPEN, ES_EVENT_TYPE_NOTIFY_WRITE, ES_EVENT_TYPE_NOTIFY_CLOSE, ES_EVENT_TYPE_NOTIFY_RENAME, ES_EVENT_TYPE_NOTIFY_LINK, ES_EVENT_TYPE_NOTIFY_UNLINK, ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_EXIT&#125;;</span><br></pre></td></tr></table></figure><p>LuLu -&gt; NetworkExtension<br>Netiquette -&gt;<br>&#x2F;&#x2F;wish there was a <code>NetworkStatistics.h</code><br>&#x2F;&#x2F; mahalo J. Levin:<br>&#x2F;&#x2F;   <a href="https://twitter.com/Morpheus">https://twitter.com/Morpheus</a>______<br>&#x2F;&#x2F;   <a href="http://newosxbook.com/src.jl?tree=listings&file=netbottom.c">http://newosxbook.com/src.jl?tree=listings&amp;file=netbottom.c</a><br>KnockKnock -&gt; 各种检查<br>KextViewr -&gt; kextstat<br><a href="https://www.oschina.net/p/IosHackStudy">https://www.oschina.net/p/IosHackStudy</a></p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPC相关</title>
      <link href="/2023/06/26/ipc-note/"/>
      <url>/2023/06/26/ipc-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Mach-IPC"><a href="#Mach-IPC" class="headerlink" title="Mach IPC"></a>Mach IPC</h2><p>Mach IPC –&gt; XPC&#x2F;GCD<br>bootstrap_register&#x2F;bootstrap_look_up<br>比<a href="https://github.com/goldsborough/ipc-bench.git">https://github.com/goldsborough/ipc-bench.git</a><br>实现的shm快<br>可能原因？1.shm的原子等待不高效 2.内核优势和其他优化</p><h2 id="Windows-ALPC"><a href="#Windows-ALPC" class="headerlink" title="Windows ALPC"></a>Windows ALPC</h2><p>Linux DBus(user)&#x2F;KDBus(kernel) –&gt; BUS1 <a href="https://bus1.org/bus1.html">https://bus1.org/bus1.html</a><br><a href="https://gitlab.freedesktop.org/dbus/dbus">https://gitlab.freedesktop.org/dbus/dbus</a><br><a href="https://github.com/bus1/dbus-broker">https://github.com/bus1/dbus-broker</a></p><p><a href="https://wxdublin.gitbooks.io/deep-into-linux-and-beyond/content/ipc.html">https://wxdublin.gitbooks.io/deep-into-linux-and-beyond/content/ipc.html</a><br>谈到了Android&#x2F;macOS&#x2F;Linux</p><p>chrome Mojo IDL<br>firefox IPDL<br><a href="https://searchfox.org/mozilla-central/source/ipc/chromium/src/chrome/common/ipc_channel_posix.cc">https://searchfox.org/mozilla-central/source/ipc/chromium/src/chrome/common/ipc_channel_posix.cc</a><br><a href="https://firefox-source-docs.mozilla.org/ipc/index.html">https://firefox-source-docs.mozilla.org/ipc/index.html</a><br>firefox的IPC基本上基于chrome的模式</p><p>进程间通信例子<br><a href="https://github.com/tiandaochouqin1/PagesSource/blob/main/_posts/_imigrated/OSC-Chapter3.md#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%BE%8B%E5%AD%">https://github.com/tiandaochouqin1/PagesSource/blob/main/_posts/_imigrated/OSC-Chapter3.md#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E4%BE%8B%E5%AD%</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ipc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发相关</title>
      <link href="/2023/06/26/concurrent-note/"/>
      <url>/2023/06/26/concurrent-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.boost.org/doc/libs/1_79_0/libs/context/doc/html/context/performance.html">https://www.boost.org/doc/libs/1_79_0/libs/context/doc/html/context/performance.html</a><br><a href="https://www.boost.org/doc/libs/1_79_0/libs/fiber/doc/html/fiber/overview/implementations__fcontext_t__ucontext_t_and_winfiber.html">https://www.boost.org/doc/libs/1_79_0/libs/fiber/doc/html/fiber/overview/implementations__fcontext_t__ucontext_t_and_winfiber.html</a></p><p>完成了boost.asio boost.beast boost.fiber基于work_stealing调度模型的整合</p><p>sched_yield()和nanosleep()对进程调度的影响<br><a href="https://www.cnblogs.com/arnoldlu/p/11287972.html">https://www.cnblogs.com/arnoldlu/p/11287972.html</a></p><p>std::this_thread::yield()使用理解<br><a href="https://blog.csdn.net/liuhhaiffeng/article/details/52604052">https://blog.csdn.net/liuhhaiffeng/article/details/52604052</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    while(1) std::this_thread::yield();</span></span><br><span class="line"><span class="comment">//    t1.detach();</span></span><br><span class="line"><span class="type">size_t</span> cpu_number_out = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pthread_cpu_number_np</span>(&amp;cpu_number_out);</span><br><span class="line">std::cout &lt;&lt; cpu_number_out &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>Windows event notification<br><a href="https://github.com/python-trio/trio/issues/52#issuecomment-424591743">https://github.com/python-trio/trio/issues/52#issuecomment-424591743</a><br><a href="https://stackoverflow.com/questions/41527964/is-there-any-way-to-use-iocp-to-notify-when-a-socket-is-readable-writeable">https://stackoverflow.com/questions/41527964/is-there-any-way-to-use-iocp-to-notify-when-a-socket-is-readable-writeable</a></p><p>libbfd<br><a href="https://blog.csdn.net/crazycoder8848/article/details/51456297">https://blog.csdn.net/crazycoder8848/article/details/51456297</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Windows does not provide sleep functionality with nanosecond resolution, so we</span></span><br><span class="line"><span class="comment">// try to approximate this with spinning combined with yielding if another thread</span></span><br><span class="line"><span class="comment">// is ready to run on the current processor.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">os::naked_short_nanosleep</span><span class="params">(jlong ns)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(ns &gt; <span class="number">-1</span> &amp;&amp; ns &lt; NANOUNITS, <span class="string">&quot;Un-interruptable sleep, short time use only&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">int64_t</span> start = os::<span class="built_in">javaTimeNanos</span>();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SwitchToThread</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Nothing else is ready to run on this cpu, spin a little</span></span><br><span class="line">      <span class="built_in">SpinPause</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (os::<span class="built_in">javaTimeNanos</span>() - start &lt; ns);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yield&#x2F;sched_yield&#x2F;SwitchToThread<br>cv条件变量</p><p>macOS&#x2F;xnu<br>pthread_cond_wait –&gt; sched_yield –&gt; swtch_pri(0)<br>std::condition_variable –&gt; pthread_cond_wait</p><p>API swtch_pri&#x2F;swtch&#x2F;thread_switch</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::mutex m;</span><br><span class="line"><span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">g</span><span class="params">(m)</span></span>;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) cv.<span class="built_in">wait</span>(g, []()&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> mtx=PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond=PTHREAD_COND_INITIALIZER;</span><br><span class="line">pthread_mutex_lock(&amp;mtx);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) pthread_cond_wait(&amp;cond,&amp;mtx);</span><br><span class="line">pthread_mutex_unlock(&amp;mtx);</span><br></pre></td></tr></table></figure><p>suspend or parking<br>[ref:<a href="https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/thread_parker/mod.rs]">https://github.com/rust-lang/rust/blob/master/library/std/src/sys_common/thread_parker/mod.rs]</a><br>[<a href="https://github.com/maracl/dpca_s/blob/master/common/fast_sync_utils.cpp]">https://github.com/maracl/dpca_s/blob/master/common/fast_sync_utils.cpp]</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Win32</span><br><span class="line"><span class="comment">// while (1) WaitForSingleObject(GetCurrentThread(), INFINITE);</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Synchronization.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) <span class="built_in">WaitOnAddress</span>(argv, argv, <span class="built_in">sizeof</span>(PVOID), INFINITE); <span class="comment">// wait when not same</span></span><br><span class="line"><span class="comment">// NtWaitForKeyedEvent ?</span></span><br><span class="line"></span><br><span class="line">Linux</span><br><span class="line">pthread_cond_wait -&gt; futex_wait -&gt; schedule</span><br><span class="line"><span class="comment">// syscall(SYS_futex, address, FUTEX_WAIT | FUTEX_PRIVATE_FLAG, value, NULL);</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) <span class="built_in">syscall</span>(SYS_futex, argv, <span class="number">0</span>, *argv, <span class="number">0</span>); <span class="comment">// wait when same</span></span><br><span class="line"></span><br><span class="line">Mac</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;kern/waitq.h&gt;</span></span></span><br><span class="line">thread_suspend -&gt; thread_wait -&gt; <span class="built_in">assert_wait</span>(-&gt; waitq_assert_wait64 --&gt; waitq_assert_wait64_locked) / thread_block</span><br><span class="line">semaphore_wait -&gt; semaphore_wait_internal waitq_assert_wait64_locked</span><br><span class="line">pthread_cond_wait -&gt; __psynch_cvwait -&gt; ksyn_wait -&gt; thread_select/thread_block</span><br><span class="line">select -&gt; select_internal -&gt; waitq_assert_wait64_leeway -&gt; waitq_assert_wait64_locked</span><br><span class="line"></span><br><span class="line"><span class="type">thread_act_t</span>*           threads = <span class="number">0</span>;</span><br><span class="line"><span class="type">mach_msg_type_number_t</span>  thread_count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">task_threads</span>(<span class="built_in">current_task</span>(), &amp;threads, &amp;thread_count);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) <span class="built_in">thread_suspend</span>(threads[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>Qt<br>mutex实现<br>UNIX sem(sysv) &gt; cond(pthread)<br>MAC semaphore<br>WIN event</p><p>cond实习<br>UNIX&#x2F;MAC cond(pthread)<br>WIN event</p><p>semaphores<br>linux -&gt; futex<br>win -&gt; WaitOnAddress<br>mac可以用_dispatch_wait_on_address 未实现</p><p>wait_on_address</p><p>Linux的libpthread属于glibc</p><p><a href="https://blog.csdn.net/puncha/article/details/8487933">https://blog.csdn.net/puncha/article/details/8487933</a><br>并发学习之：Keyed Events（没看懂，要调试下才能明白，伤心！）<br><a href="http://undocumented.ntinternals.net/">http://undocumented.ntinternals.net/</a></p><p><a href="https://cfsamson.github.io/book-exploring-async-basics">https://cfsamson.github.io/book-exploring-async-basics</a></p><p><a href="https://repositum.tuwien.at/retrieve/8679">https://repositum.tuwien.at/retrieve/8679</a></p><hr><p>qmutex wait<br>system v sem -&gt; semop<br>Linux<br>#ifdef QT_UNIX_SEMAPHORE<br>sem_wait&#x2F;sem_timedwait<br>#else<br>pthread_cond_wait&#x2F;pthread_cond_timedwait<br>#endif<br>macOS<br>semaphore_wait&#x2F;semaphore_timedwait</p><p>条件变量与信号量<br><a href="http://events.jianshu.io/p/5a2b66ccb9a7">http://events.jianshu.io/p/5a2b66ccb9a7</a></p><p>条件变量 -&gt; 二元信号量<br>信号量 -&gt; WaitGroup(Go)&#x2F;Barrier(libuv)&#x2F;pthread_barrier_wait<br>pthread_barrier_wait(Linux PTHREAD_BARRIER_SERIAL_THREAD)<br>Java(CountDownLatch)<br>C++ 20 std::latch&#x2F;std::barrier<br><a href="https://zh.cppreference.com/w/cpp/thread/latch">https://zh.cppreference.com/w/cpp/thread/latch</a><br><a href="https://zh.cppreference.com/w/cpp/thread/barrier">https://zh.cppreference.com/w/cpp/thread/barrier</a><br>多线程——CountDownLatch详解<br><a href="https://www.jianshu.com/p/b90309b78775">https://www.jianshu.com/p/b90309b78775</a><br>java 与 golang 并发控制 CountDownLatch CyclicBarrier Semaphore 以及 WaitGroup 的简单使用<br><a href="https://my.oschina.net/wang520/blog/4480379">https://my.oschina.net/wang520/blog/4480379</a><br><a href="https://www.apiref.com/java11-zh/java.base/java/util/concurrent/package-summary.html">https://www.apiref.com/java11-zh/java.base/java/util/concurrent/package-summary.html</a><br>Semaphore&#x2F;CountDownLatch&#x2F;CyclicBarrier&#x2F;Phaser&#x2F;Exchanger<br><a href="https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/package-summary.html">https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/package-summary.html</a><br><a href="https://www.apiref.com/java11-zh/java.base/java/util/concurrent/atomic/package-summary.html">https://www.apiref.com/java11-zh/java.base/java/util/concurrent/atomic/package-summary.html</a><br>C# Mutex&#x2F;Semaphore&#x2F;EventWaitHandle&#x2F;CountdownEvent&#x2F;Barrier<br><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.waithandle">https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.waithandle</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/threading/overview-of-synchronization-primitives">https://learn.microsoft.com/zh-cn/dotnet/standard/threading/overview-of-synchronization-primitives</a><br><a href="https://github.com/dotnet/runtime/blob/main/src/coreclr/pal/src/thread/threadsusp.cpp">https://github.com/dotnet/runtime/blob/main/src/coreclr/pal/src/thread/threadsusp.cpp</a><br><a href="https://github.com/dotnet/runtime/tree/main/src/coreclr/pal/src/synchobj">https://github.com/dotnet/runtime/tree/main/src/coreclr/pal/src/synchobj</a><br>Event和Mutex区别<br><a href="https://blog.csdn.net/anjen/article/details/4727791">https://blog.csdn.net/anjen/article/details/4727791</a></p><p>libuv漫谈之线程<br><a href="https://zhuanlan.zhihu.com/p/25973650">https://zhuanlan.zhihu.com/p/25973650</a></p><p><a href="https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/locks/mod.rs">https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/locks/mod.rs</a><br><a href="https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/futex.rs">https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/futex.rs</a><br><a href="https://github.com/rust-lang/rust/tree/master/library/std/src/sys/unix/locks">https://github.com/rust-lang/rust/tree/master/library/std/src/sys/unix/locks</a><br>pthread condvar&#x2F;mutex&#x2F;rwlock<br><a href="https://github.com/rust-lang/rust/blob/master/library/std/src/sys/windows/locks">https://github.com/rust-lang/rust/blob/master/library/std/src/sys/windows/locks</a><br>mutex -&gt; AcquireSRWLockExclusive<br>rwlock -&gt; AcquireSRWLockShared<br>conavar -&gt; SleepConditionVariableSRW</p><p><a href="https://github.com/rust-lang/rust/blob/master/library/std/src/sync/barrier.rs">https://github.com/rust-lang/rust/blob/master/library/std/src/sync/barrier.rs</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Barrier</span> &#123;</span><br><span class="line">    lock: Mutex&lt;BarrierState&gt;,</span><br><span class="line">    cvar: Condvar,</span><br><span class="line">    num_threads: <span class="type">usize</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://docs.libuv.org/en/v1.x/guide.html">http://docs.libuv.org/en/v1.x/guide.html</a><br><a href="https://pursuitking.com/go_2/">https://pursuitking.com/go_2/</a><br><a href="https://qinyuanpei.github.io/posts/345410188/">https://qinyuanpei.github.io/posts/345410188/</a></p><p>std::future&#x2F;std::promise -&gt; std::condition_variable<br>std::promise -&gt; set_value(cv.notify_all)<br>std::future -&gt; wait(cv.wait)&#x2F;get(__sub_wait-&gt;cv.wait)<br>std::packaged_task -&gt; ::operator()(set_value-&gt;cv.notify_all)<br><a href="https://zh.cppreference.com/w/cpp/thread/promise">https://zh.cppreference.com/w/cpp/thread/promise</a><br><a href="https://zh.cppreference.com/w/cpp/thread/future">https://zh.cppreference.com/w/cpp/thread/future</a><br>C ++ 20中的新线程（jthread）功能<br><a href="https://www.jianshu.com/p/c610ad5db6b7">https://www.jianshu.com/p/c610ad5db6b7</a><br>When a program terminates (ie, main returns) the remaining detached threads executing in the background are not waited upon; instead their execution is suspended and their thread-local objects destructed.<br><a href="https://www.itcodar.com/c-plus-1/what-is-different-between-join-and-detach-for-multi-threading-in-c.html">https://www.itcodar.com/c-plus-1/what-is-different-between-join-and-detach-for-multi-threading-in-c.html</a><br><a href="https://stackoverflow.com/questions/22803600/when-should-i-use-stdthreaddetach">https://stackoverflow.com/questions/22803600/when-should-i-use-stdthreaddetach</a><br>thread — detach()的使用<br><a href="https://blog.csdn.net/shunlu5586/article/details/127799458">https://blog.csdn.net/shunlu5586/article/details/127799458</a><br>使用join需要等它启动cv.wait_for<br>使用detach需要等它结束cv.wait_for?<br>响应式编程 And&#x2F;When&#x2F;Then<br>Promise -&gt; When&#x2F;Then<br><a href="https://github.com/ReactiveX/RxCpp/blob/main/Rx/v2/src/rxcpp/rx-observable.hpp">https://github.com/ReactiveX/RxCpp/blob/main/Rx/v2/src/rxcpp/rx-observable.hpp</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// blocking_subscribe -&gt;</span></span><br><span class="line">std::condition_variable wake;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest.java">https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/operators/observable/BlockingObservableLatest.java</a><br><a href="https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest.java">https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/operators/flowable/BlockingFlowableLatest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">notify</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/David-Haim/concurrencpp/#when_all-function">https://github.com/David-Haim/concurrencpp/#when_all-function</a><br><a href="https://github.com/Naios/continuable">https://github.com/Naios/continuable</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Connect continuables through when_all, when_any or when_seq</span></span><br><span class="line"><span class="comment">// There are helper functions for connecting continuables:</span></span><br><span class="line"><span class="keyword">auto</span> all = cti::<span class="built_in">when_all</span>(<span class="built_in">http_request</span>(<span class="string">&quot;github.com&quot;</span>), <span class="built_in">http_request</span>(<span class="string">&quot;example.com&quot;</span>));</span><br><span class="line"><span class="keyword">auto</span> any = cti::<span class="built_in">when_any</span>(<span class="built_in">http_request</span>(<span class="string">&quot;github.com&quot;</span>), <span class="built_in">http_request</span>(<span class="string">&quot;example.com&quot;</span>));</span><br><span class="line"><span class="keyword">auto</span> seq = cti::<span class="built_in">when_seq</span>(<span class="built_in">http_request</span>(<span class="string">&quot;github.com&quot;</span>), <span class="built_in">http_request</span>(<span class="string">&quot;example.com&quot;</span>));</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ponylang/ponyc/blob/main/src/libponyrt/platform/threads.c">https://github.com/ponylang/ponyc/blob/main/src/libponyrt/platform/threads.c</a></p><p><a href="https://www.cnblogs.com/wuyongqiang/p/7458184.html">https://www.cnblogs.com/wuyongqiang/p/7458184.html</a></p><p>setjmp 的正确使用<br><a href="https://blog.codingnow.com/2010/05/setjmp.html">https://blog.codingnow.com/2010/05/setjmp.html</a></p><ul><li>setjmp&#x2F;longjmp setcontext&#x2F;getcontext</li><li>ucontext swapcontext&#x2F;makecontext</li><li>winfiber GetThreadContext&#x2F;SetThreadContext CreateFiber&#x2F;SwitchToFiber</li><li>fcontext BOOST_JMP make_fcontext&#x2F;jump_context&#x2F;swap_fcontext asm</li></ul><p><a href="https://github.com/open-mpi/ompi">ompi</a><br><a href="https://github.com/pmodels/mpich">mpich</a></p><p><a href="https://github.com/JCTools/JCTools">JCTools</a> -&gt; java</p><h2 id="work-stealing-in-qt"><a href="#work-stealing-in-qt" class="headerlink" title="work-stealing in qt"></a>work-stealing in qt</h2><p>QFuture: mention the work-stealing algorithm in the docs<br><a href="https://github.com/qt/qtbase/commit/0235de994be7e04aca3456f1260b18313dd45b74">https://github.com/qt/qtbase/commit/0235de994be7e04aca3456f1260b18313dd45b74</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QThreadPool::stealAndRunRunnable</span><br><span class="line"><span class="comment">// just use simple locker -&gt; steal idea</span></span><br><span class="line"><span class="function">QMutexLocker <span class="title">locker</span><span class="params">(&amp;d-&gt;mutex)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习</title>
      <link href="/2023/06/26/golang-note/"/>
      <url>/2023/06/26/golang-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://studygolang.com/articles/7087">https://studygolang.com/articles/7087</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=~/go</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/net.git <span class="variable">$GOPATH</span>/src/github.com/golang/net</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/sys.git <span class="variable">$GOPATH</span>/src/github.com/golang/sys</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/tools.git <span class="variable">$GOPATH</span>/src/github.com/golang/tools</span><br><span class="line"><span class="built_in">ln</span> -s <span class="variable">$GOPATH</span>/src/github.com/golang <span class="variable">$GOPATH</span>/src/golang.org/x</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;localhost:1088&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;localhost:1088&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf ~/Library/Caches/go-build</span><br><span class="line"></span><br><span class="line">go build -a</span><br><span class="line">go install -a</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/55039990">https://zhuanlan.zhihu.com/p/55039990</a><br><a href="https://blog.csdn.net/shelgi/article/details/106409090">https://blog.csdn.net/shelgi/article/details/106409090</a><br><a href="https://zhuanlan.zhihu.com/p/365851626">https://zhuanlan.zhihu.com/p/365851626</a></p><p>Go语言圣经（简体中文版）<br><a href="https://docs.hacknode.org/gopl-zh/index.html">https://docs.hacknode.org/gopl-zh/index.html</a><br><a href="https://flydk.gitbooks.io/go">https://flydk.gitbooks.io/go</a></p><p><a href="https://github.com/golang/go">go</a><br><a href="https://github.com/junegunn/fzf">fzf</a><br><a href="https://github.com/gogs/gogs">gogs</a><br><a href="https://github.com/nektos/act">act</a><br><a href="https://github.com/go-gitea/gitea">gitea</a><br><a href="https://github.com/beego/beego">beego</a><br><a href="https://github.com/yeasy/docker_practice">docker_practice</a><br><a href="https://github.com/iawia002/lux">lux</a><br><a href="https://github.com/gocolly/colly">colly</a><br><a href="https://github.com/valyala/fasthttp">fasthttp</a><br><a href="https://github.com/abiosoft/colima">colima</a><br><a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a><br><a href="https://github.com/andlabs/ui">ui</a><br><a href="https://github.com/johnkerl/miller">miller</a><br><a href="https://github.com/linuxkit/linuxkit">linuxkit</a><br><a href="https://github.com/adonovan/gopl.io">gopl.io</a><br><a href="https://github.com/lxn/walk">walk</a><br><a href="https://github.com/pdfcpu/pdfcpu">pdfcpu</a><br><a href="https://github.com/go-git/go-git">go-gi</a><br><a href="https://github.com/asynkron/protoactor-go">protoactor-go</a><br><a href="https://github.com/tophubs/TopList">TopList</a><br><a href="https://github.com/TruthHun/DocHub">DocHub</a><br><a href="https://github.com/fogleman/pt">pt</a><br><a href="https://github.com/jaeles-project/gospider">gospider</a><br><a href="https://github.com/hu17889/go_spider">go_spider</a><br><a href="https://github.com/GopherCoder/Go-Spider">Go-Spider</a><br><a href="https://github.com/srwiley/scany">scany</a></p><p><a href="https://github.com/jobbole/awesome-go-cn">awesome-go-cn</a></p><p><a href="https://zhuanlan.zhihu.com/p/55039990">用Golang写爬虫（一）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矢量图相关</title>
      <link href="/2023/06/26/vector-graphic/"/>
      <url>/2023/06/26/vector-graphic/</url>
      
        <content type="html"><![CDATA[<p>nanovg_note.md</p><p><a href="https://www.lmlphp.com/user/7394/article/item/356509/">https://www.lmlphp.com/user/7394/article/item/356509/</a><br>NanoVG 优化笔记：性能提高5倍的秘密</p><p><a href="https://github.com/memononen/nanovg">https://github.com/memononen/nanovg</a><br><a href="https://github.com/cmaughan/nanovg">https://github.com/cmaughan/nanovg</a> D3D Port<br><a href="https://github.com/ollix/MetalNanoVG">https://github.com/ollix/MetalNanoVG</a> Metal Port<br><a href="https://github.com/bkaradzic/bgfx/tree/master/examples/20-nanovg">https://github.com/bkaradzic/bgfx/tree/master/examples/20-nanovg</a> bgfx port</p><p><a href="https://zhuanlan.zhihu.com/p/372966867">https://zhuanlan.zhihu.com/p/372966867</a><br>从0打造体积小于300K硬件加速类似Skia的矢量渲染器</p>]]></content>
      
      
      
        <tags>
            
            <tag> graphic </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parser相关</title>
      <link href="/2023/06/26/parser-note/"/>
      <url>/2023/06/26/parser-note/</url>
      
        <content type="html"><![CDATA[<p>parser_note.md<br><a href="https://github.com/lark-parser/lark">https://github.com/lark-parser/lark</a></p><p>mfcalc<br>turtle dsl<br>json parser<br><a href="https://github.com/d4v3y/bisonJsonParser">https://github.com/d4v3y/bisonJsonParser</a></p><p>parser generator<br>math parser<br>muparser</p><p>lemon<br>byacc<br>nyacc –&gt; guile<br>btyacc</p><p>lark –&gt; python (early&#x2F;lalr)<br>happy –&gt; haskell<br>antlr –&gt; java(ll(k))<br>javacc</p><p>ANTLR4 &amp; C++<br><a href="https://zhuanlan.zhihu.com/p/240229064">https://zhuanlan.zhihu.com/p/240229064</a></p><p>A LALR(1)&#x2F;LL(1)&#x2F;LL(K) parser generator for javascript&#x2F;typescript<br><a href="https://github.com/yiminghe/kison">https://github.com/yiminghe/kison</a></p><p><a href="https://github.com/phorward/unicc">https://github.com/phorward/unicc</a><br>LALR parser generator targetting C, C++, Python, JavaScript, JSON and XML </p><p><a href="https://github.com/sormy/lemon-js">https://github.com/sormy/lemon-js</a><br>Lemon.JS is an LALR(1) parser generator for JavaScript based on Lemon parser generator for C<br><a href="https://github.com/fcomeraz/simpleCalcParserLemon">https://github.com/fcomeraz/simpleCalcParserLemon</a><br>Very Simple Calc Parser using Flex and Lemon. </p><p>peg &gt; LL (1) Parser (节省内存)<br>Python 之父考虑重构 Python 解释器<br><a href="https://www.oschina.net/news/108532/guido-peg-parser">https://www.oschina.net/news/108532/guido-peg-parser</a><br>三十年前，我有充分的理由来使用单一前向标记符的解析技术：内存很昂贵。LL(1) 解析（以及其它技术像 LALR(1)，因 YACC 而著名）使用状态机和堆栈（一种“下推自动机”）来有效地构造解析树。<br><a href="https://mp.weixin.qq.com/s/yqVVaZVn8RRanllaXMFD9A">https://mp.weixin.qq.com/s/yqVVaZVn8RRanllaXMFD9A</a><br><a href="https://mp.weixin.qq.com/s/yUQPeqc_uSRGe5lUi50kVQ">https://mp.weixin.qq.com/s/yUQPeqc_uSRGe5lUi50kVQ</a><br><a href="https://mp.weixin.qq.com/s/ojSq6u9FC0xlBDncuoKczw">https://mp.weixin.qq.com/s/ojSq6u9FC0xlBDncuoKczw</a><br>N 倍效率神器，使用 PEG 生成自己的解析器<br><a href="https://zhuanlan.zhihu.com/p/252343056">https://zhuanlan.zhihu.com/p/252343056</a><br>Packrat Parsing 回溯式线性时间语法分析<br><a href="https://zhuanlan.zhihu.com/p/25260077">https://zhuanlan.zhihu.com/p/25260077</a></p><p>flex –&gt; ragel<br><a href="https://www.colm.net/open-source/ragel/">https://www.colm.net/open-source/ragel/</a><br>bison –&gt; lemon<br>bnfc <a href="https://bnfc.digitalgrammars.com/">https://bnfc.digitalgrammars.com/</a><br><a href="https://gist.github.com/caudamus/1294f197cbb3fc16c1a82e7e2f1d0ec4">https://gist.github.com/caudamus/1294f197cbb3fc16c1a82e7e2f1d0ec4</a></p><p><a href="http://www.grammaticalframework.org/">http://www.grammaticalframework.org/</a><br>Grammatical Framework<br>A programming language for multilingual grammar applications</p><p><a href="https://tree-sitter.github.io/tree-sitter/">https://tree-sitter.github.io/tree-sitter/</a></p><p><a href="https://github.com/scottfrazer/hermes">https://github.com/scottfrazer/hermes</a><br>Python LL(1) Parser Generator with Expression Parsing </p><p>语法格式描述规范BNF、EBNF、ABNF<br><a href="https://www.jianshu.com/p/15efcb0c06c8">https://www.jianshu.com/p/15efcb0c06c8</a><br>用 EBNF范式 来描述 EBNF 的语法</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">生成式 = 生成式名 <span class="string">&#x27;=&#x27;</span> [ 表达式 ] [<span class="string">&#x27;;&#x27;</span>] ;</span><br><span class="line">表达式 = 选择项 &#123; <span class="string">&#x27;|&#x27;</span> 选择项 &#125; ;</span><br><span class="line">选择项 = 条目 &#123; 条目 &#125; ;</span><br><span class="line">条目   = 生成式名 | 标记 [ <span class="string">&#x27;…&#x27;</span> 标记 ] | 分组 | 可选项 | 重复项 ;</span><br><span class="line">分组   = <span class="string">&#x27;(&#x27;</span> 表达式 <span class="string">&#x27;)&#x27;</span> ;</span><br><span class="line">可选项 = <span class="string">&#x27;[&#x27;</span> 表达式 <span class="string">&#x27;]&#x27;</span> ;</span><br><span class="line">重复项 = <span class="string">&#x27;&#123;&#x27;</span> 表达式 <span class="string">&#x27;&#125;&#x27;</span> ;</span><br></pre></td></tr></table></figure><p>生成式由表达式构造，表达式通过术语及以下操作符构造，自上而下优先级递增（低&#x3D;&gt;高）：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|   选择</span><br><span class="line">()  分组</span><br><span class="line">[]  可选（0 或 1 次）</span><br><span class="line">&#123;&#125;  重复（0 到 n 次）</span><br></pre></td></tr></table></figure><p><a href="https://www.nongnu.org/bnf/">https://www.nongnu.org/bnf/</a><br><a href="https://github.com/FLC-project/ebison">https://github.com/FLC-project/ebison</a><br>Extended Bison tools for the LR parsing of Extended BNF grammars (EBNF) with regular expressions in the right parts of the production rules. Java is required to run the ebison tools. </p><p><a href="https://github.com/antlr/grammars-v4">grammars-v4</a><br><a href="https://github.com/cwbaker/lalr">lalr</a><br><a href="https://github.com/yhirose/cpp-peglib">cpp-peglib</a><br><a href="https://github.com/taocpp/PEGTL">PEGTL</a><br><a href="https://github.com/foonathan/cppast">cppast</a><br><a href="https://github.com/lexxmark/winflexbison">winflexbison</a><br><a href="https://github.com/jzimmerman/langcc">langcc</a><br><a href="https://github.com/virtan/bnf-plus-plus">bnf-plus-plus</a><br><a href="https://github.com/javacc/javacc">javacc</a><br><a href="https://github.com/theovosse/llgen">llgen</a><br><a href="https://github.com/yiminghe/kison">kison</a></p><p><a href="https://github.com/akimd/bison">bison</a><br><a href="https://github.com/westes/flex">flex</a></p><p><a href="https://github.com/felixhao28/JSCPP">JSCPP</a><br>C&#x2F;C++ language server supporting multi-million line code base, powered by libclang.<br><a href="https://github.com/jacobdufault/cquery">cquery</a></p><p><a href="https://github.com/peter-winter/ctpg">ctpg</a></p><p>bison_note.md<br>rpcalc<br><a href="http://www.javashuo.com/article/p-wcsbewkd-kg.html">http://www.javashuo.com/article/p-wcsbewkd-kg.html</a><br><a href="https://github.com/conao3/rpcalc.y">https://github.com/conao3/rpcalc.y</a></p><p>flex<br>#define YY_DECL int yylex (void)</p><p>bison yyparse() –&gt; yylex()</p><p><a href="https://www.mianshigee.com/tutorial/pandolia-tinyc/">https://www.mianshigee.com/tutorial/pandolia-tinyc/</a><br><a href="https://pandolia.net/tinyc/index.html">https://pandolia.net/tinyc/index.html</a> 自己动手写编译器</p><p><a href="https://www.zhihu.com/column/c_1081509964404543488">https://www.zhihu.com/column/c_1081509964404543488</a> 编译工程课程</p><p><a href="http://newosxbook.com/toc1.html">http://newosxbook.com/toc1.html</a> *OS Internals::Volume I - User Mode Table of Contents</p>]]></content>
      
      
      
        <tags>
            
            <tag> parser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tracy分析</title>
      <link href="/2023/06/26/tracy-note/"/>
      <url>/2023/06/26/tracy-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wolfpld/tracy">tracy</a> -&gt; Frame profiler</p><p>System Trace</p><ul><li>win32<br>LookupPrivilegeValue –&gt; SE_SYSTEM_PROFILE_NAME ETW??<br>ControlTrace&#x2F;StartTrace&#x2F;OpenTrace&#x2F;CloseTrace<br>RtlWalkFrameChain</li><li>linux<br>perf_event<br>syscall –&gt; __NR_perf_event_open<br>_Unwind_Backtrace</li><li>macOS<br>未支持 kdebug?<br>backtrace –&gt; execinfo.h</li></ul><p>Same as <a href="https://github.com/google/orbit">https://github.com/google/orbit</a><br>C&#x2F;C++ Performance Profiler<br>win32 trace -&gt; KrabsTracer.h<br>DiaSdk&#x2F;krabsetw&#x2F;PresentMon其中后两者有trace<br><a href="https://github.com/google/orbit/tree/main/src/WindowsTracing">https://github.com/google/orbit/tree/main/src/WindowsTracing</a><br>linux perf_event_open<br><a href="https://github.com/google/orbit/tree/main/src/LinuxTracing">https://github.com/google/orbit/tree/main/src/LinuxTracing</a></p><p>Same as <a href="https://github.com/microsoft/BPerf">https://github.com/microsoft/BPerf</a><br>Perf is a Cloud Profiling system used by Bing.com based on CoreCLR Profiling APIs &amp; Event Tracing for Windows.</p><p>tracy是基于标记的 怎么标记需要自定义 需要在程序内执行<br>TracyAlloc标记Memory<br>TracyAllocS标记深度获取CallStack<br>FrameMarkStart标记Frame -&gt; Pixel ??<br>TracyLockable标记Lock</p><p>Hook或者编译器指令插入</p><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/etw/system-providers">https://docs.microsoft.com/zh-cn/windows/win32/etw/system-providers</a><br>SYSTEM_SYSCALL_KW_GENERAL 提供有关系统调用的事件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS密码分析</title>
      <link href="/2023/06/26/macos-password/"/>
      <url>/2023/06/26/macos-password/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/taoyanqi8932/article/details/51945122">https://blog.csdn.net/taoyanqi8932/article/details/51945122</a> 《UNIX环境高级编程》–6系统数据文件和信息<br><a href="https://unix.stackexchange.com/questions/373309/mac-os-command-to-resolve-hostnames-like-getent-on-linux">https://unix.stackexchange.com/questions/373309/mac-os-command-to-resolve-hostnames-like-getent-on-linux</a><br><a href="https://superuser.com/questions/592921/mac-osx-users-vs-dscl-command-to-list-user">https://superuser.com/questions/592921/mac-osx-users-vs-dscl-command-to-list-user</a></p><p>dscl . -list &#x2F;Users<br>dscl . -readall &#x2F;Users<br>dscl . -read &#x2F;Users&#x2F;wurui AuthenticationAuthority</p><p>sudo plutil -extract ShadowHashData xml1 &#x2F;var&#x2F;db&#x2F;dslocal&#x2F;nodes&#x2F;Default&#x2F;users&#x2F;wurui.plist -o test.plist</p><p>sudo defaults read &#x2F;var&#x2F;db&#x2F;dslocal&#x2F;nodes&#x2F;Default&#x2F;users&#x2F;wurui.plist ShadowHashData<br>sudo defaults read &#x2F;var&#x2F;db&#x2F;dslocal&#x2F;nodes&#x2F;Default&#x2F;users&#x2F;wurui.plist authentication_authority</p><p>pwpolicy -a diradmin -u username -setpassword<br>PasswordService<br>mkpassdb(8) launchctl(8) pwpolicy(8)</p><p>sysadminctl</p><p><a href="https://www.freesion.com/article/41491259374/">https://www.freesion.com/article/41491259374/</a></p><p><a href="https://github.com/apple-oss-distributions/libcppabi">https://github.com/apple-oss-distributions/libcppabi</a><br><a href="https://github.com/apple-oss-distributions/Libc">https://github.com/apple-oss-distributions/Libc</a><br><a href="https://github.com/apple-oss-distributions/libcpp">https://github.com/apple-oss-distributions/libcpp</a></p><p><a href="https://www.itdaan.com/blog/2015/09/13/f8e0f3eb4ed48292a167ee1cc57ec3b7.html">https://www.itdaan.com/blog/2015/09/13/f8e0f3eb4ed48292a167ee1cc57ec3b7.html</a></p><p><a href="https://man7.org/linux/man-pages/man3/shadow.3.html">https://man7.org/linux/man-pages/man3/shadow.3.html</a><br>shadow不再鼓励使用 建议使用pam</p><p><a href="https://github.com/apple-oss-distributions/DSTools">https://github.com/apple-oss-distributions/DSTools</a></p><p><a href="https://github.com/octomagon/davegrohl">https://github.com/octomagon/davegrohl</a> 密码暴力破解<br><a href="http://www.defenceindepth.net/2009/12/cracking-os-x-passwords.html">http://www.defenceindepth.net/2009/12/cracking-os-x-passwords.html</a></p><p>Goals:<br>1.检查密码&#x2F;登录<br>2.密码是否过期 macOS貌似不会过期 user-&gt;pw_expire &#x3D; 0<br>3.checksamepass</p><p><a href="https://cryptobook.nakov.com/mac-and-key-derivation/pbkdf2">https://cryptobook.nakov.com/mac-and-key-derivation/pbkdf2</a><br><a href="https://wiki.elvis.science/index.php?title=Acquisition_and_Cracking_of_macOS_User_Passwords">https://wiki.elvis.science/index.php?title=Acquisition_and_Cracking_of_macOS_User_Passwords</a><br><a href="https://www.jianshu.com/p/06d7182e71ec">https://www.jianshu.com/p/06d7182e71ec</a><br>PBKDF2-HMAC-SHA512</p><p><a href="https://wiki.elvis.science/index.php?title=Acquisition_and_Cracking_of_macOS_User_Passwords">https://wiki.elvis.science/index.php?title=Acquisition_and_Cracking_of_macOS_User_Passwords</a></p><p><a href="https://gist.github.com/teddziuba/3ff08bdda120d1f7822f3baf52e606c2">https://gist.github.com/teddziuba/3ff08bdda120d1f7822f3baf52e606c2</a></p><p>git clone <a href="https://github.com/apple-oss-distributions/Libc.git">https://github.com/apple-oss-distributions/Libc.git</a><br>git clone <a href="https://github.com/apple-oss-distributions/OpenDirectory.git">https://github.com/apple-oss-distributions/OpenDirectory.git</a><br>git clone <a href="https://github.com/apple-oss-distributions/DirectoryService.git">https://github.com/apple-oss-distributions/DirectoryService.git</a><br>git clone <a href="https://github.com/apple-oss-distributions/CommonCrypto.git">https://github.com/apple-oss-distributions/CommonCrypto.git</a></p><p>case kAuthChangePasswd:</p><p><a href="https://zhuanlan.zhihu.com/p/33560946">https://zhuanlan.zhihu.com/p/33560946</a><br>为什么空密码能够取得你的ROOT权限？</p><p><a href="https://developer.apple.com/security/">https://developer.apple.com/security/</a><br>corecrypto<br><a href="https://github.com/darlinghq/darling-corecrypto">https://github.com/darlinghq/darling-corecrypto</a></p><p><a href="https://www.cnpython.com/qa/697714">https://www.cnpython.com/qa/697714</a> CCKeyDerivationPBKDF线程安全吗？<br><a href="https://zhuanlan.zhihu.com/p/164482769">https://zhuanlan.zhihu.com/p/164482769</a> 破解Windows、Linux和Mac操作系统密码的理论研究<br>MacOS密码认证机制<br>在Mac OS中，用户登录口令信息的存储位置不固定。在Mac OSX10.4-Mac OSX10.6版本中，shadow文件的存放路径是&#x2F;var&#x2F;db&#x2F;shadow&#x2F;hash&#x2F;[<a href="https://blog.csdn.net/libin_1/article/details/8190516]%EF%BC%9B%E5%9C%A8Mac">https://blog.csdn.net/libin_1/article/details/8190516]；在Mac</a> OS X10.7及其以后的版本中，用户口令的散列值保存在&#x2F;var&#x2F;db&#x2F;dslocal&#x2F;nodes&#x2F;Default&#x2F;users&#x2F;文件夹下的plist文件中。与Linux系统不同，Mac OS中每个用户有其单独的shadow文件，每个文件以用户的GUID作为用户散列密码文件的标识。在加密算法上，MacOS主要使用SHA-1（或SHA-512）进行加密，并加上长度为4byte的salt，最终生成密文。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">CCKeyDerivationPBKDF</span><span class="params">( CCPBKDFAlgorithm algorithm, <span class="type">const</span> <span class="type">char</span> *password, <span class="type">size_t</span> passwordLen,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> <span class="type">uint8_t</span> *salt, <span class="type">size_t</span> saltLen,</span></span></span><br><span class="line"><span class="params"><span class="function">                      CCPseudoRandomAlgorithm prf, <span class="type">unsigned</span> rounds,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">uint8_t</span> *derivedKey, <span class="type">size_t</span> derivedKeyLen)</span></span></span><br><span class="line"><span class="function">                      <span class="title">API_AVAILABLE</span><span class="params">(macos(<span class="number">10.7</span>), ios(<span class="number">5.0</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>Username&#x2F;password combinations can be checked in two ways:</p><ol><li>PAM(3): with the “checkpw” service.</li><li>OpenDirectory: ODRecordVerifyPassword() - if you are<br> currently using OpenDirectory.</li></ol><p>OpenDirectory –&gt; CFOpenDirectory(DirectoryService) –&gt; Auth(like shadowhash)</p><p>pam(checkpw) –&gt; pam_opendirectory.m[OpenDirectory(ODRecordVerifyPassword)]<br>当一个用户（或攻击者）试图验证这样一个账户时，在MacOS系统上，这个过程是由OpenDirectory的后台处理（opendirectoryd）的</p><p><a href="https://developer.apple.com/documentation/kernel?language=objc">https://developer.apple.com/documentation/kernel?language=objc</a></p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> password </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内核和驱动</title>
      <link href="/2023/06/26/kernel-note/"/>
      <url>/2023/06/26/kernel-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wiresock/ndisapi">ndisapi</a><br><a href="https://github.com/mullvad/libwfp">libwfp</a><br><a href="https://github.com/raymon-tian/WFPFirewall">WFPFirewall</a><br><a href="https://github.com/henrypp/simplewall">simplewall</a></p><p><a href="https://github.com/kkent030315/anycall">anycall</a></p><p><a href="https://github.com/ExpLife0011/awesome-windows-kernel-security-development">awesome-windows-kernel-security-development</a><br><a href="https://github.com/AxtMueller/Windows-Kernel-Explorer">Windows-Kernel-Explorer</a><br><a href="https://github.com/brownbelt/WindowsResearchKernel-WRK">WindowsResearchKernel-WRK</a><br><a href="https://github.com/godaddy/procfilter">procfilter</a><br><a href="https://github.com/alal4465/KernelMon">KernelMon</a><br><a href="https://github.com/HyperSine/Windows10-CustomKernelSigners">Windows10-CustomKernelSigners</a><br><a href="https://github.com/reactos/reactos">reactos</a><br><a href="https://github.com/zodiacon/ProcMonXv2">ProcMonXv2</a><br><a href="https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools">sandbox-attacksurface-analysis-tools</a></p><p><a href="https://github.com/facebook/fishhook">fishhook</a> -&gt; macOS<br><a href="https://github.com/TsudaKageyu/minhook">minhook</a><br><a href="https://github.com/microsoft/Detours">Detours</a></p><p><a href="https://github.com/microsoft/Windows-driver-samples">Windows-driver-samples</a><br><a href="https://github.com/zodiacon/WindowsInternals">WindowsInternals</a></p><p><a href="https://github.com/xcud/sysinternals-source">sysinternals-source</a></p><h2 id="windows-source"><a href="#windows-source" class="headerlink" title="windows source"></a>windows source</h2><p><a href="https://github.com/Mooliecool/windows">windows</a><br><a href="https://github.com/jiubanlo/WinNT5_src_20201004">WinNT5_src_20201004</a><br><a href="https://github.com/ZoloZiak/WinNT4">WinNT4</a></p><p>macos<br>MACF<br>windows<br>ObRegisterCallbacks -&gt; process&#x2F;thread<br><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/wdm/nf-wdm-obregistercallbacks">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/ddi/wdm/nf-wdm-obregistercallbacks</a><br>FltRegisterFilter -&gt; file&#x2F;stream<br>delete -&gt; IRP_MJ_CLEANUP</p><p><a href="https://www.cnblogs.com/LittleHann/articles/4844874.html">https://www.cnblogs.com/LittleHann/articles/4844874.html</a></p><p>应用层API -&gt; TDI -&gt; 协议驱动 -&gt; NDIS -&gt; 下层硬件</p><p>DPC APC RPC LPC<br><a href="https://blog.csdn.net/m0_37567738/article/details/129083327">https://blog.csdn.net/m0_37567738/article/details/129083327</a></p><p>从 0 开始学 Linux 驱动开发(一)<br><a href="https://paper.seebug.org/779/">https://paper.seebug.org/779/</a></p><p>禁用驱动签名验证<br><a href="https://blog.csdn.net/culun797375/article/details/108840980">https://blog.csdn.net/culun797375/article/details/108840980</a><br>TestSignMode<br>Driver Sign Enforcement<br><a href="https://github.com/HyperSine/Windows10-CustomKernelSigners/blob/master/README.zh-CN.md">https://github.com/HyperSine/Windows10-CustomKernelSigners/blob/master/README.zh-CN.md</a></p><p>Linux内核中的软中断、tasklet和工作队列详解（超详细~）<br><a href="https://www.bilibili.com/read/cv17094615">https://www.bilibili.com/read/cv17094615</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> driver </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript记录</title>
      <link href="/2023/06/26/javascript-note/"/>
      <url>/2023/06/26/javascript-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/vuejs/vue">vue</a><br><a href="https://github.com/jquery/jquery">jquery</a><br>Napa.js: a multi-threaded JavaScript runtime<br><a href="https://github.com/microsoft/napajs">napajs</a><br>The React Framework<br><a href="https://github.com/vercel/next.js">next.js</a><br>Get an available TCP port<br><a href="https://github.com/sindresorhus/get-port">get-port</a></p><p>Well-formatted and improved trace system calls and signals (when the debugger does not help)<br><a href="https://github.com/automation-stack/ctrace">ctrace</a></p><p><a href="https://github.com/sindresorhus/awesome-nodejs">awesome-nodejs</a><br><a href="https://github.com/zhw2590582/ArtPlayer">ArtPlayer</a><br><a href="https://github.com/danchitnis/webgl-plot">webgl-plot</a><br>Evented IO for ChakraCore, SpiderMonkey &amp; V8 JavaScript<br><a href="https://github.com/jxcore/jxcore">jxcore</a></p><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p><a href="https://github.com/EyalAr/lwip">lwip</a><br><a href="https://github.com/lovell/sharp">sharp</a><br><a href="https://github.com/zhangyuanwei/node-images">node-images</a><br><a href="https://github.com/Automattic/node-canvas">node-canvas</a><br><a href="https://github.com/aheckmann/gm">gm</a><br><a href="https://github.com/jimp-dev/jimp">jimp</a><br><a href="https://github.com/libvips/libvips">libvips</a><br><a href="https://github.com/DmitryBaranovskiy/raphael">raphael</a> JavaScript Vector Library </p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/yzsunlei/javascript_concurrency_translation">JavaScript并发编程</a><br><a href="https://github.com/just-js/just">just</a><br><a href="https://github.com/agalwood/Motrix">Motrix</a><br><a href="https://github.com/metafizzy/zdog">zdog</a><br><a href="https://github.com/overleaf/overleaf">overleaf</a> -&gt; LaTeX<br><a href="https://github.com/RelaxedJS/ReLaXed">ReLaXed</a><br><a href="https://github.com/RelaxedJS/ReLaXed-examples">ReLaXed-examples</a><br><a href="https://github.com/mdaines/viz-js">viz-js</a><br><a href="https://github.com/justjavac/awesome-wechat-weapp">awesome-wechat-weapp</a><br><a href="https://github.com/bbyars/mountebank">mountebank</a> Over the wire test doubles </p><h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;<span class="built_in">clearInterval</span>(id)&#125;, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows IPC</title>
      <link href="/2023/06/26/windows-ipc/"/>
      <url>/2023/06/26/windows-ipc/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/csandker/InterProcessCommunication-Samples">InterProcessCommunication-Samples</a><br>#1 <a href="https://csandker.io/2021/01/10/Offensive-Windows-IPC-1-NamedPipes.html">Offensive Windows IPC Internals 1: Named Pipes</a><br>#2 <a href="https://csandker.io/2021/02/21/Offensive-Windows-IPC-2-RPC.html">Offensive Windows IPC Internals 2: RPC</a><br>#3 <a href="https://csandker.io/2022/05/24/Offensive-Windows-IPC-3-ALPC.html">Offensive Windows IPC Internals 3: ALPC</a></p><p><a href="https://github.com/DownWithUp/ALPC-Example">ALPC-Example</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ipc </tag>
            
            <tag> alpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>strace相关</title>
      <link href="/2023/06/26/strace-like/"/>
      <url>/2023/06/26/strace-like/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><a href="https://github.com/strace/strace">strace</a></p><h2 id="macOS-x2F-FreeBSD"><a href="#macOS-x2F-FreeBSD" class="headerlink" title="macOS&#x2F;FreeBSD"></a>macOS&#x2F;FreeBSD</h2><p>dtruss</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>An strace-like program for the Windows ‘native’ API<br><a href="https://github.com/rogerorr/NtTrace">NtTrace</a><br>strace-like, windows<br><a href="https://github.com/zcg19/dbglog">dbglog</a></p><h2 id="strace实现"><a href="#strace实现" class="headerlink" title="strace实现"></a>strace实现</h2><p>ptrace PTRACE_SYSCALL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dtstrace</span><br><span class="line">CreateProcess CREATE_SUSPENDED</span><br><span class="line">DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS</span><br><span class="line">dr_inject_process_attach--&gt; WaitForDebugEvent</span><br><span class="line"></span><br><span class="line">Profile/DTrace-on-Windows/lib/libdtrace/compat/win32/pr_win32.c</span><br><span class="line">pw32_dbgthread --&gt; WaitForDebugEvent</span><br><span class="line"></span><br><span class="line">Profile/orbit/src/WindowsUtils/Debugger.cpp</span><br><span class="line">Debugger::DebuggingLoop --&gt; WaitForDebugEvent</span><br><span class="line"></span><br><span class="line">Profile/verysleepy/src/profiler/debugger.cpp</span><br><span class="line">Debugger::updateDebugging --&gt; WaitForDebugEvent</span><br><span class="line"></span><br><span class="line">NtTrace比dtstrace简单一点 数据可能没有过滤 量比较大</span><br><span class="line">or2::DebugDriver::Loop --&gt; WaitForDebugEvent</span><br><span class="line">https://github.com/rogerorr/NtTrace</span><br><span class="line">NtTrace.exe -stack -out abcdtest.txt test.exe</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> strace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinDbg相关</title>
      <link href="/2023/06/26/windbg-note/"/>
      <url>/2023/06/26/windbg-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/yardenshafir/WinDbg_Scripts">WinDbg_Scripts</a><br><a href="https://github.com/blabberer/hwnd">hwnd</a><br><a href="https://github.com/lowleveldesign/wtrace">wtrace</a><br><a href="https://github.com/lucasg/Dependencies">Dependencies</a><br><a href="https://github.com/xwlan/dprobe">dprobe</a><br><a href="https://github.com/microsoft/krabsetw">krabsetw</a><br><a href="https://github.com/microsoft/BPerf">BPerf</a></p><p>Advanced Windows NT<br>Debugging Applications for Windows</p><p>AeDebug<br>adplus&#x2F;vsjitdebugger<br>adplus -hang&#x2F;-crash</p><p>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options]<br>Image File Execution Options<br>Debugger</p><p>lm<br>x console!<br>x urtbased!</p><p>本地内核调试<br><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/performing-local-kernel-debugging">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/performing-local-kernel-debugging</a><br><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/setting-up-local-kernel-debugging-of-a-single-computer-manually">https://learn.microsoft.com/zh-cn/windows-hardware/drivers/debugger/setting-up-local-kernel-debugging-of-a-single-computer-manually</a><br>bcdedit &#x2F;debug on<br>bcdedit &#x2F;dbgsettings local<br>windbg -kl<br>kd -kl</p><p>IsDebuggerPresent<br>esp + 0x4</p><p>Windows 提供了 Heap Manager 完成上述功能。HeapAlloc 函数是 Heap Manager 的分配函数。<br>HeapAlloc -&gt; VirtualAlloc<br>PageHeap &amp; Gflag<br>幸运的是, HeapManager 的确提供了上述的主动错误检查功能。只需要在注册表里面做对应<br>的修改，操作系统就会根据设置来改变 HeapManager 的行为</p><p>PageHeap -&gt; like macOS guard malloc<br>gflags -&gt; [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\GlobalFlag]<br>[HKEY_LOCAL_MACHINE\ SOFTWARE\ Microsoft\ Windows NT\ CurrentVersion\ Image File Execution Options\ ImageFileName\ GlobalFlag]</p><p>内存泄露<br><a href="https://www.jianshu.com/p/ad41c2e074e5">https://www.jianshu.com/p/ad41c2e074e5</a><br><code>_CrtDumpMemoryLeaks</code></p><p>Windows 平台定位C语言工程内存泄漏<br><a href="https://zhuanlan.zhihu.com/p/443548463">https://zhuanlan.zhihu.com/p/443548463</a></p><p>bp ntdll!NtWriteFile “r $t0&#x3D;@$t0+1;.printf &quot;function executes:%d times &quot;,@$t0;.echo;g”<br>bp msvcrt!printf “r $t0&#x3D;@$t0+1;.printf &quot;function executes:%d times &quot;,@$t0;.echo;g”</p><h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">char</span>* s=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(s, <span class="string">&quot;world&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cdb test.exe</span><br><span class="line">bp test!printf</span><br><span class="line">g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!address -summary</span><br><span class="line">Base Address</span><br><span class="line">--- Largest Region by Usage ----------- Base Address -------- Region Size ----------</span><br><span class="line">Free                                    1fc`cc4d0000     7df7`53fa0000 ( 125.966 TB)</span><br><span class="line">&lt;unknown&gt;                              7ff4`20570000        1`00020000 (   4.000 GB)</span><br><span class="line">Image                                  7ffb`e8ec0000        0`001c3000 (   1.762 MB)</span><br><span class="line">Heap                                    1fc`cc3dd000        0`000f2000 ( 968.000 kB)</span><br><span class="line">Stack                                    e4`d5a50000        0`000fa000 (1000.000 kB)</span><br><span class="line">Other                                   1fc`cc200000        0`0001f000 ( 124.000 kB)</span><br><span class="line">TEB                                      e4`d5d5b000        0`00002000 (   8.000 kB)</span><br><span class="line">PEB                                      e4`d5d5a000        0`00001000 (   4.000 kB)</span><br><span class="line"></span><br><span class="line">||1:1:001&gt; s -a 1fc`cc200000 l1000000 &quot;world&quot;</span><br><span class="line">000001fc`cc3da0b0  77 6f 72 6c 64 00 00 00-ff ff ad ba 0d f0 ad ba  world...........</span><br><span class="line">||1:1:001&gt; s -a e4`d5a50000 l100000 &quot;Hello&quot;</span><br><span class="line">000000e4`d5b4e210  48 65 6c 6c 6f 0d 0a 00-d6 d8 86 eb fb 7f 00 00  Hello...........</span><br><span class="line">.dump test.dump</span><br><span class="line">.opendump test.dump</span><br><span class="line">g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!address -f:Heap -c:&quot;s -a %1 %2 \&quot;world\&quot;&quot;</span><br><span class="line">!address -f:Stack -c:&quot;s -a %1 %2 \&quot;Hello\&quot;&quot;</span><br><span class="line">.writemem d:\blog.txt 07288600 L2000</span><br></pre></td></tr></table></figure><h2 id="WinDbg数据搜索技巧-—《格蠹汇编-从堆里抢救丢失的博客》"><a href="#WinDbg数据搜索技巧-—《格蠹汇编-从堆里抢救丢失的博客》" class="headerlink" title="WinDbg数据搜索技巧 —《格蠹汇编-从堆里抢救丢失的博客》"></a>WinDbg数据搜索技巧 —《格蠹汇编-从堆里抢救丢失的博客》</h2><p><a href="https://www.cnblogs.com/luzhlon/p/7055363.html">https://www.cnblogs.com/luzhlon/p/7055363.html</a></p><h2 id="Windbg调试—-Windbg入门"><a href="#Windbg调试—-Windbg入门" class="headerlink" title="Windbg调试—-Windbg入门"></a>Windbg调试—-Windbg入门</h2><p><a href="https://blog.csdn.net/tonychan129/article/details/127136283">https://blog.csdn.net/tonychan129/article/details/127136283</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cdb -z ieblog.dmp</span><br><span class="line">.writemem test.txt 001b5936 L1456</span><br></pre></td></tr></table></figure><p><a href="https://dbgtech.github.io/Tools/lldb-using.html">https://dbgtech.github.io/Tools/lldb-using.html</a><br><a href="http://advdbg.org/books/swdbg2e/v2toc.aspx">http://advdbg.org/books/swdbg2e/v2toc.aspx</a><br><a href="https://files-cdn.cnblogs.com/files/lixiong/userdbg_msinternal.pdf">https://files-cdn.cnblogs.com/files/lixiong/userdbg_msinternal.pdf</a></p><p>DbgEng扩展<br>WdbgExts<br>EngExtCpp</p><p>r eip&#x3D;0042d9e</p><p>符号链接symlink_什么是符号链接或符号链接？ 如何为Windows和Linux创建Symlink？<br><a href="https://blog.csdn.net/cunjiu9486/article/details/109076948">https://blog.csdn.net/cunjiu9486/article/details/109076948</a></p><p>bootmgr -&gt; WinLoad -&gt; ntoskrnl -&gt; smss -&gt; win32k.sys&#x2F;csrss -&gt; WinLogon<br>WinLogon –&gt; NtUserCreateWindowStation&#x2F;NtUserCreateDesktop<br>-&gt; Services.exe&#x2F;LSASS.exe<br>-&gt; userinit.exe -&gt; Explorer.exe</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dtrace -n <span class="string">&quot;syscall:::entry /execname == \&quot;notepad.exe\&quot;/ &#123;printf(\&quot;%s\&quot;,execname);&#125;&quot;</span> -c notepad.exe</span><br><span class="line">dtrace -n <span class="string">&quot;syscall::*Write*:entry /execname == \&quot;lsd.exe\&quot;/ &#123;printf(\&quot;%s\&quot;,execname);&#125;&quot;</span> -c lsd.exe</span><br><span class="line"></span><br><span class="line">x console!main</span><br><span class="line">uf</span><br><span class="line">wt =</span><br><span class="line">kv</span><br><span class="line">kn/.frame</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> windows </tag>
            
            <tag> windbg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级用户态</title>
      <link href="/2023/06/26/userland-note/"/>
      <url>/2023/06/26/userland-note/</url>
      
        <content type="html"><![CDATA[<h1 id="用户态网路"><a href="#用户态网路" class="headerlink" title="用户态网路"></a>用户态网路</h1><h2 id="FreeBSD"><a href="#FreeBSD" class="headerlink" title="FreeBSD"></a>FreeBSD</h2><p>netmap <a href="https://github.com/luigirizzo/netmap">https://github.com/luigirizzo/netmap</a><br><a href="https://github.com/luigirizzo/netmap/blob/master/sys/dev/netmap/netmap_monitor.c">https://github.com/luigirizzo/netmap/blob/master/sys/dev/netmap/netmap_monitor.c</a><br>Netmap:一个用于快速数据包I&#x2F;O的新框架<br><a href="https://zhuanlan.zhihu.com/p/391083793">https://zhuanlan.zhihu.com/p/391083793</a></p><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>skywalk&#x2F;nexus<br><a href="https://github.com/apple-oss-distributions/xnu/blob/main/bsd/skywalk/nexus/monitor/nx_monitor.c">https://github.com/apple-oss-distributions/xnu/blob/main/bsd/skywalk/nexus/monitor/nx_monitor.c</a></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>PF_RING <a href="https://github.com/ntop/PF_RING">https://github.com/ntop/PF_RING</a><br><a href="https://zhuanlan.zhihu.com/p/441361636PF_RING%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">https://zhuanlan.zhihu.com/p/441361636PF_RING简单介绍</a><br>XDP&#x2F;eBPF [XDP is a part of the upstream Linux kernel]<br><a href="https://github.com/xdp-project/xdp-tutorial">https://github.com/xdp-project/xdp-tutorial</a><br>使用 eBPF 和 XDP 高速处理数据包<br><a href="https://zhuanlan.zhihu.com/p/438158551">https://zhuanlan.zhihu.com/p/438158551</a><br>DPDK <a href="https://github.com/DPDK/dpdk/">https://github.com/DPDK/dpdk/</a></p><h1 id="Advanced-Userland"><a href="#Advanced-Userland" class="headerlink" title="Advanced Userland"></a>Advanced Userland</h1><p><a href="https://cs.dartmouth.edu/~sergey/cs258/guest_lectures/RobGraham-AdvancedUserland.pdf">https://cs.dartmouth.edu/~sergey/cs258/guest_lectures/RobGraham-AdvancedUserland.pdf</a><br><a href="https://cs.dartmouth.edu/~sergey/cs258/">https://cs.dartmouth.edu/~sergey/cs258/</a><br><a href="https://cs.dartmouth.edu/~sergey/">https://cs.dartmouth.edu/~sergey/</a><br>masscan&#x2F;robdns&#x2F;BlackICE</p>]]></content>
      
      
      
        <tags>
            
            <tag> userland </tag>
            
            <tag> eBPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原子引用计数</title>
      <link href="/2023/06/26/atomic-ref-count/"/>
      <url>/2023/06/26/atomic-ref-count/</url>
      
        <content type="html"><![CDATA[<h2 id="C-Arc-gt-C-20"><a href="#C-Arc-gt-C-20" class="headerlink" title="C++ Arc -&gt; C++20"></a>C++ Arc -&gt; C++20</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::atomic&lt;std::shared_ptr&gt;</span><br></pre></td></tr></table></figure><p><a href="https://zh.cppreference.com/w/cpp/memory/shared_ptr/atomic2">https://zh.cppreference.com/w/cpp/memory/shared_ptr/atomic2</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::atomic_ref</span><br></pre></td></tr></table></figure><p><a href="https://zh.cppreference.com/w/cpp/atomic/atomic_ref">https://zh.cppreference.com/w/cpp/atomic/atomic_ref</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::atomic_wait, std::atomic_wait_explicit</span><br></pre></td></tr></table></figure><p><a href="https://zh.cppreference.com/w/cpp/atomic/atomic_wait">https://zh.cppreference.com/w/cpp/atomic/atomic_wait</a></p><h2 id="rc-is-rust-in-c"><a href="#rc-is-rust-in-c" class="headerlink" title="rc is rust in c++"></a>rc is rust in c++</h2><p><a href="https://github.com/zxlxz/sfc">https://github.com/zxlxz/sfc</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> atomic </tag>
            
            <tag> rc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter相关</title>
      <link href="/2023/06/26/flutter-note/"/>
      <url>/2023/06/26/flutter-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/flutter/flutter">flutter</a><br><a href="https://github.com/Solido/awesome-flutter">awesome-flutter</a></p><p><a href="https://github.com/flutter/engine">https://github.com/flutter/engine</a><br>macOS<br>shell&#x2F;platform&#x2F;darwin&#x2F;macos&#x2F;framework&#x2F;Source&#x2F;FlutterView.mm<br>windows<br>shell&#x2F;platform&#x2F;windows&#x2F;window.cc<br>binding_handler_delegate_-&gt;OnWindowRepaint [FlutterWindowsView::ForceRedraw]<br>engine_-&gt;ScheduleFrame</p><p>fml&#x2F;backtrace.cc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">Backtrace</span><span class="params">(<span class="type">void</span>** symbols, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> FML_OS_WIN</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CaptureStackBackTrace</span>(<span class="number">0</span>, size, symbols, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> ::<span class="built_in">backtrace</span>(symbols, size);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// FML_OS_WIN</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>impeller&#x2F;entity&#x2F;shaders<br>impeller&#x2F;renderer&#x2F;backend&#x2F;metal<br>shell&#x2F;common&#x2F;platform_view.cc<br>shell&#x2F;common&#x2F;shell.h</p><p>Gtk&#x2F;Win32&#x2F;Cocoa(Metal)</p>]]></content>
      
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++输出</title>
      <link href="/2023/06/26/cpp-print/"/>
      <url>/2023/06/26/cpp-print/</url>
      
        <content type="html"><![CDATA[<h2 id="C-通用print"><a href="#C-通用print" class="headerlink" title="C++通用print"></a>C++通用print</h2><p>Ref: <a href="https://zhuanlan.zhihu.com/p/338785886">https://zhuanlan.zhihu.com/p/338785886</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">println</span><span class="params">(<span class="keyword">auto</span> x, <span class="keyword">auto</span>... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; std::boolalpha;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">println</span>(args...);</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// constexpr c++17 auto c++20</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="keyword">auto</span> firstArg, <span class="keyword">auto</span>... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; firstArg &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(<span class="keyword">sizeof</span>...(args) &gt; <span class="number">0</span>)</span> </span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(args...)</span></span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-可变参数模板的展开方式"><a href="#C-可变参数模板的展开方式" class="headerlink" title="C++可变参数模板的展开方式"></a>C++可变参数模板的展开方式</h2><p><a href="https://blog.csdn.net/albertsh/article/details/123978539">https://blog.csdn.net/albertsh/article/details/123978539</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> print </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协程相关</title>
      <link href="/2023/06/26/coroutine-note/"/>
      <url>/2023/06/26/coroutine-note/</url>
      
        <content type="html"><![CDATA[<p>比较几个 C 语言协程实现<br><a href="https://blog.csdn.net/ubuntu64fan/article/details/118765427">https://blog.csdn.net/ubuntu64fan/article/details/118765427</a></p><p>coroutine<br><a href="https://github.com/xhawk18/s_task/blob/master/readme_cn.md#%E5%85%B6%E4%BB%96%E5%8D%8F%E7%A8%8B%E5%BA%93%E5%AF%B9%E6%AF%94">https://github.com/xhawk18/s_task/blob/master/readme_cn.md#%E5%85%B6%E4%BB%96%E5%8D%8F%E7%A8%8B%E5%BA%93%E5%AF%B9%E6%AF%94</a><br>C<br>ucontext <a href="https://github.com/cloudwu/coroutine">https://github.com/cloudwu/coroutine</a><br>ucontext&#x2F;fiber <a href="https://github.com/xphh/coroutine">https://github.com/xphh/coroutine</a><br>C multiplatform coroutine implementation via ucontext, fibers or setjmp<br><a href="https://github.com/stevedekorte/coroutine">coroutine</a><br>awaitable coroutine library for C<br><a href="https://github.com/xhawk18/s_task">s_task</a><br>C++<br>C++11 single .h asymmetric coroutine implementation via ucontext &#x2F; fiber<br><a href="https://github.com/tonbit/coroutine">coroutine</a><br><a href="https://github.com/owent/libcopp">libcopp</a><br><a href="https://github.com/tearshark/librf">librf</a></p><p>C++ 20 Coroutines in Action (Helpers + Test Code Examples)<br><a href="https://github.com/luncliff/coroutine">coroutine</a></p><p><a href="https://github.com/Tencent/libco">libco</a><br><a href="https://github.com/hnes/libaco">libaco</a><br>A asymmetric coroutine library for C.<br><a href="https://github.com/MIANBAO222/coroutine">coroutine</a><br><a href="https://github.com/cloudwu/coroutine">coroutine</a> -&gt; simple<br>Structured concurrency in C<br><a href="https://github.com/sustrik/libdill">libdill</a><br>Go-style concurrency in C<br><a href="https://github.com/sustrik/libmill">libmill</a><br>Single header stackful cross-platform coroutine library in pure C.<br><a href="https://github.com/edubart/minicoro">minicoro</a><br>Lightweight thread library for C&#x2F;C++ coroutine (similar to goroutine), for high performance network servers.<br><a href="https://github.com/ossrs/state-threads">state-threads</a><br>A concurrency C library 10x faster than Golang.<br><a href="https://github.com/shiyanhui/libcsp">libcsp</a><br>A coroutine framework aimed at high-concurrency io with reasonable latency, based on io_uring.<br><a href="https://github.com/Codesire-Deng/co_context">co_context</a></p><p><a href="https://github.com/boostorg/context">context</a><br><a href="https://github.com/iqiyi/libfiber">libfiber</a><br><a href="https://github.com/yyzybb537/libgo">libgo</a></p><p><a href="https://github.com/tboox/benchbox">benchbox</a></p><h2 id="c-20-coroutine"><a href="#c-20-coroutine" class="headerlink" title="c++ 20 coroutine"></a>c++ 20 coroutine</h2><p><a href="https://github.com/jbaldwin/libcoro">libcoro</a></p><h2 id="C-Coroutines-for-Qt"><a href="#C-Coroutines-for-Qt" class="headerlink" title="C++ Coroutines for Qt"></a>C++ Coroutines for Qt</h2><p><a href="https://github.com/danvratil/qcoro">qcoro</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> coroutine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node工作线程</title>
      <link href="/2023/06/26/node-worker/"/>
      <url>/2023/06/26/node-worker/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nodejs.org/api/worker_threads.html#worker-threads">https://nodejs.org/api/worker_threads.html#worker-threads</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Worker</span>, isMainThread, parentPort &#125; = <span class="built_in">require</span>(<span class="string">&#x27;node:worker_threads&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">    <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(__filename);</span><br><span class="line">    worker.<span class="title function_">once</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">// Prints &#x27;Hello, world!&#x27;.</span></span><br><span class="line">    &#125;);</span><br><span class="line">    worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// When a message from the parent thread is received, send it back:</span></span><br><span class="line">    parentPort.<span class="title function_">once</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        parentPort.<span class="title function_">postMessage</span>(message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Worker</span>, isMainThread, workerData &#125; = <span class="built_in">require</span>(<span class="string">&#x27;node:worker_threads&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (isMainThread) &#123;</span><br><span class="line">    <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(__filename, &#123; <span class="attr">workerData</span>: <span class="string">&#x27;Hello, world!&#x27;</span> &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(workerData);  <span class="comment">// Prints &#x27;Hello, world!&#x27;.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>once -&gt; waitFor block</p><p>WebAssembly线程<br><a href="https://blog.csdn.net/qq_34754747/article/details/105096008">https://blog.csdn.net/qq_34754747/article/details/105096008</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> worker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态库符号</title>
      <link href="/2023/06/26/symbol-note/"/>
      <url>/2023/06/26/symbol-note/</url>
      
        <content type="html"><![CDATA[<h2 id="nm使用"><a href="#nm使用" class="headerlink" title="nm使用"></a>nm使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nm /opt/homebrew/opt/qt/lib/QtSvg.framework/QtSvg -UCg | grep QSvgRenderer</span><br><span class="line">nm /opt/homebrew/opt/qt/lib/QtSvg.framework/QtSvg -UCgj | grep QSvgRenderer</span><br><span class="line">nm /opt/homebrew/opt/qt/lib/QtSvg.framework/QtSvg -uCg</span><br></pre></td></tr></table></figure><p>-U 已定义符号 导出<br>-u 未定义符号 导入<br>-C C++符号名称解析<br>-g 全局符号<br>nm&#x2F;llvm-nm 不接受MSVC格式 接受MinGW格式</p><h2 id="llvm-objdump-x2F-llvm-undname"><a href="#llvm-objdump-x2F-llvm-undname" class="headerlink" title="llvm-objdump&#x2F;llvm-undname"></a>llvm-objdump&#x2F;llvm-undname</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dumpbin /exports Qt5Svg.dll &gt; exports.txt</span><br><span class="line">undname exports.txt &gt; exports_demangle.txt</span><br><span class="line">dumpbin /imports Qt5Svg.dll &gt; imports.txt</span><br><span class="line">undname imports.txt &gt; imports_demangle.txt</span><br></pre></td></tr></table></figure><p>llvm-undname不能对文件使用</p><h2 id="llvm-undname-x2F-llvm-cxxfilt可跨平台使用"><a href="#llvm-undname-x2F-llvm-cxxfilt可跨平台使用" class="headerlink" title="llvm-undname&#x2F;llvm-cxxfilt可跨平台使用"></a>llvm-undname&#x2F;llvm-cxxfilt可跨平台使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llvm-undname ?save@QPainter@@QEAAXXZ</span><br><span class="line"><span class="comment"># public: void __cdecl QPainter::save(void)</span></span><br><span class="line">llvm-cxxfilt __ZN12QSvgRenderer10setViewBoxERK5QRect</span><br><span class="line"><span class="comment"># QSvgRenderer::setViewBox(QRect const&amp;)</span></span><br></pre></td></tr></table></figure><h2 id="动态库依赖分析"><a href="#动态库依赖分析" class="headerlink" title="动态库依赖分析"></a>动态库依赖分析</h2><p>linux </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ldd/readelf</span></span><br><span class="line">readelf --dynamic /usr/bin/bash | grep NEEDED</span><br></pre></td></tr></table></figure><p>macOS </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otool -L</span><br></pre></td></tr></table></figure><p>windows </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dumpbin /dependents</span><br><span class="line"><span class="comment"># ldd (mingw)</span></span><br></pre></td></tr></table></figure><p>linux</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -p /path/to/program | grep NEEDED</span><br></pre></td></tr></table></figure><p>macOS</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -p program | grep LC_LOAD_DYLIB -A2 | grep name | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">objdump -a mach</span><br><span class="line">objdump -p mach</span><br><span class="line">objdump -s --section=.qt.cert mach</span><br><span class="line">objdump -sj .qt.cert mach</span><br><span class="line">objdump -dj __text mach</span><br><span class="line">objdump -h mach</span><br><span class="line">objdump -sj __cstring mach</span><br><span class="line">objdump -t mach</span><br><span class="line">objdump -t --demangle mach/objdump -tC mach</span><br><span class="line"></span><br><span class="line"><span class="comment"># -x, --all-headers</span></span><br><span class="line"><span class="comment"># Display all available header information. Equivalent to specifying</span></span><br><span class="line"><span class="comment"># --archive-headers, --file-headers, --private-headers, --reloc,</span></span><br><span class="line"><span class="comment"># --section-headers, and --syms</span></span><br></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/mooware/msvcfilt">msvcfilt</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> symbol </tag>
            
            <tag> dynamic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS界面相关</title>
      <link href="/2023/06/26/macos-ui-note/"/>
      <url>/2023/06/26/macos-ui-note/</url>
      
        <content type="html"><![CDATA[<h1 id="macOS-UI"><a href="#macOS-UI" class="headerlink" title="macOS UI"></a>macOS UI</h1><p><a href="https://www.jianshu.com/p/aa89f9addfb8">https://www.jianshu.com/p/aa89f9addfb8</a><br>纯代码创建macOS应用，及仿写[NSApp run]</p><p><a href="https://www.jianshu.com/p/42a96c8fa94f">https://www.jianshu.com/p/42a96c8fa94f</a><br>为什么手动创建的NSApp没有图标，接收不到键盘响应？</p><p><a href="https://blog.csdn.net/bravegogo/article/details/51517482">https://blog.csdn.net/bravegogo/article/details/51517482</a><br>mac 隐藏Dock</p><p><a href="https://www.hawu.me/coding/2452">https://www.hawu.me/coding/2452</a><br>NSWindow 无标题栏窗口无法获得焦点与 resize 鼠标指示的解决办法 </p><p>qtbase <a href="https://github.com/qt/qtbase/tree/dev/src/plugins/platforms/cocoa">https://github.com/qt/qtbase/tree/dev/src/plugins/platforms/cocoa</a><br>QT_MAC_DISABLE_FOREGROUND_APPLICATION_TRANSFORM<br>qt_mac_transformProccessToForegroundApplication();<br>–&gt; [NSApp setActivationPolicy:NSApplicationActivationPolicyRegular];<br>And [NSApp activateIgnoringOtherApps:YES]</p><p><a href="https://stackoverflow.com/questions/65743619/close-swiftui-application-when-last-window-is-closed">https://stackoverflow.com/questions/65743619/close-swiftui-application-when-last-window-is-closed</a></p><p>MAC应用多窗口应用，窗口位置对齐&#x2F;吸附等细节处理笔记<br><a href="https://lrdcq.com/me/read.php/94.htm">https://lrdcq.com/me/read.php/94.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
            <tag> ui </tag>
            
            <tag> cocoa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能分析方法</title>
      <link href="/2023/06/26/profile-note/"/>
      <url>/2023/06/26/profile-note/</url>
      
        <content type="html"><![CDATA[<h1 id="Profile分析方法"><a href="#Profile分析方法" class="headerlink" title="Profile分析方法"></a>Profile分析方法</h1><h2 id="定时采样-获取Stack-Frame"><a href="#定时采样-获取Stack-Frame" class="headerlink" title="定时采样 获取Stack Frame"></a>定时采样 获取Stack Frame</h2><p>gperftools CPUPROFILER实现分析<br>不支持Windows 支持目前主流的UNIX</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SIGPROF 27      <span class="comment">/* profiling time alarm */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ITIMER_PROF     2</span></span><br></pre></td></tr></table></figure><p>libunwind</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">sa.sa_sigaction = prof_handler;</span><br><span class="line">sa.sa_flags = SA_RESTART | SA_SIGINFO;</span><br><span class="line">sigemptyset(&amp;sa.sa_mask);</span><br><span class="line"><span class="keyword">if</span> (sigaction(SIGPROF, &amp;sa, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;sigaction&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">timer</span>;</span></span><br><span class="line">timer.it_interval.tv_sec = <span class="number">0</span>;</span><br><span class="line">timer.it_interval.tv_usec = <span class="number">1000</span>;</span><br><span class="line">timer.it_value = timer.it_interval;</span><br><span class="line">setitimer(ITIMER_PROF, &amp;timer, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CpuProfiler CpuProfiler::instance_;</span><br><span class="line"><span class="type">static</span> CpuProfiler instance_;</span><br></pre></td></tr></table></figure><p>静态初始化 模块载入时进入构造函数</p><h2 id="win32支持仅限于内存"><a href="#win32支持仅限于内存" class="headerlink" title="win32支持仅限于内存"></a>win32支持仅限于内存</h2><p><a href="http://gaiacrtn.free.fr/articles/win32perftools.htmlfastallocator">http://gaiacrtn.free.fr/articles/win32perftools.htmlfastallocator</a><br><a href="https://github.com/kasicass/gperftools-win32heap-profiler">https://github.com/kasicass/gperftools-win32heap-profiler</a></p><h2 id="编译器指令插入Profile"><a href="#编译器指令插入Profile" class="headerlink" title="编译器指令插入Profile"></a>编译器指令插入Profile</h2><p>MSVC &#x2F;Gh &#x2F;GH<br>GCC&#x2F;Clang -finstrument-functions</p><p><a href="https://github.com/botman99/AeonProfiler">https://github.com/botman99/AeonProfiler</a><br>The Aeon profiler works by using the Microsoft Visual Studio compiler options &#x2F;Gh and &#x2F;GH to insert hooks to external functions _penter() and _pexit() (respectively).</p><p><a href="https://github.com/tyoma/micro-profiler">https://github.com/tyoma/micro-profiler</a><br>(Linux) Build the application with -finstrument-functions flag on. Link with micro-profiler_<platform>. The shared objects are located in MicroProfiler’s installation directory;<br>(Windows, MSVC) Build the application with &#x2F;GH &#x2F;Gh flags on. Link with micro-profiler_<platform>.lib;</p><h2 id="外部采样-Debug权限"><a href="#外部采样-Debug权限" class="headerlink" title="外部采样 Debug权限"></a>外部采样 Debug权限</h2><p>windows CPU profiler<br><a href="https://github.com/VerySleepy/verysleepy">https://github.com/VerySleepy/verysleepy</a><br>Very Sleepy, a sampling CPU profiler for Windows –&gt; dbghelp<br>LookupPrivilegeValue( NULL, SE_DEBUG_NAME, &amp;luid );<br>可以导出Callgrind格式</p><p><a href="https://github.com/sdasgup3/profiler-using-clang-based-ast-instrumentation">profiler-using-clang-based-ast-instrumentation</a><br><a href="https://github.com/KDE/kcachegrind">kcachegrind</a></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/kmehrunes/profiler">profiler</a><br><a href="https://github.com/sonnyit/profiler">profiler</a><br><a href="https://github.com/jlfwong/speedscope">speedscope</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows性能分析</title>
      <link href="/2023/06/26/windows-profile/"/>
      <url>/2023/06/26/windows-profile/</url>
      
        <content type="html"><![CDATA[<p>VSProf</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stackcollapse-vsprof.pl Report20220830-<span class="number">1902</span>_CallTreeSummary.csv | flamegraph.pl &gt; pretty-graph.svg</span><br></pre></td></tr></table></figure><p>调试 -&gt; 性能探测器 -&gt; 检测(Instrumentation)<br>检测应用程序以调查确切的调用数和调用时间</p><p><a href="https://www.cnblogs.com/sui84/p/13548045.html">https://www.cnblogs.com/sui84/p/13548045.html</a><br>Windows上的火焰图</p><p><a href="https://www.thinbug.com/q/5034194">https://www.thinbug.com/q/5034194</a><br>VS2010 Ultimate中的代码覆盖率和性能分析命令行工具 </p><p>VS2022旧工具貌似无法使用 vsperfreport依赖错误 vsperfcmd使用不正常 只能使用GUI</p><p><a href="https://github.com/Donpedro13/etwprof">https://github.com/Donpedro13/etwprof</a></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etwprof.exe profile --target=<span class="number">14888</span> --output=<span class="variable">%cd%</span>\test.etl -m</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTrace分析性能</title>
      <link href="/2023/06/26/dtrace-profile/"/>
      <url>/2023/06/26/dtrace-profile/</url>
      
        <content type="html"><![CDATA[<h1 id="DTrace-Profile-Program"><a href="#DTrace-Profile-Program" class="headerlink" title="DTrace Profile Program"></a>DTrace Profile Program</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dtrace -l -n profile-*</span><br><span class="line">dtrace -x ustackframes=100 -n <span class="string">&#x27;profile-997 /execname == &quot;test&quot;/ &#123; @[ustack()] = count(); &#125;&#x27;</span> -o user_stacks.txt -c <span class="string">&#x27;./test&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="gprof2dot"><a href="#gprof2dot" class="headerlink" title="gprof2dot"></a>gprof2dot</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install gprof2dot</span><br><span class="line">gprof2dot -f dtrace user_stacks.txt | dot -Tpng -o output.png</span><br><span class="line">gprof2dot -f dtrace user_stacks.txt | dot -Tpdf -o output.pdf</span><br></pre></td></tr></table></figure><h2 id="FlameGraph"><a href="#FlameGraph" class="headerlink" title="FlameGraph"></a>FlameGraph</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install flamegraph</span><br><span class="line">stackcollapse.pl user_stacks.txt | flamegraph.pl &gt; pretty-graph.svg</span><br></pre></td></tr></table></figure><h1 id="Instruments"><a href="#Instruments" class="headerlink" title="Instruments"></a>Instruments</h1><p>Ref: <a href="https://help.apple.com/instruments/mac/current/#/devb14ffaa5">https://help.apple.com/instruments/mac/current/#/devb14ffaa5</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instruments -t <span class="string">&quot;Time Profiler&quot;</span> ./a.out foo.txt 20</span><br><span class="line">instruments -l 30000 -t Time\ Profiler -p 5773</span><br></pre></td></tr></table></figure><h2 id="FlameGraphs-Instruments"><a href="#FlameGraphs-Instruments" class="headerlink" title="FlameGraphs-Instruments"></a>FlameGraphs-Instruments</h2><p><a href="https://github.com/Kelvenbit/FlameGraphs-Instruments">https://github.com/Kelvenbit/FlameGraphs-Instruments</a><br>菜单 Edit &gt; Deep copy ⇧⌘C 复制完整堆栈到剪切板<br>swift run FlameGraph output.svg</p><h2 id="分析系统自带CPU采样格式"><a href="#分析系统自带CPU采样格式" class="headerlink" title="分析系统自带CPU采样格式"></a>分析系统自带CPU采样格式</h2><p>macOS sample&#x2F;活动监视器<br>sudo sample [pid] -file &#x2F;dev&#x2F;stdout | stackcollapse-sample.awk | flamegraph.pl &gt; test.svg<br>Windows dump&#x2F;任务管理器<br>Linux perf?</p><h1 id="gperftools"><a href="#gperftools" class="headerlink" title="gperftools"></a>gperftools</h1><p>Ref:<a href="https://www.cnblogs.com/yangzhouyyz/p/5433757.html">https://www.cnblogs.com/yangzhouyyz/p/5433757.html</a><br>方法有三种：<br>1、直接调用提供的api：调用函数：ProfilerStart() and ProfilerStop()<br>2、链接静态库：这种方式是最为常用的方式，后面会有详细的介绍。<br>方式：在代码link过程中添加参数 –lprofiler<br>运行程序：env CPUPROFILE&#x3D;.&#x2F;helloworld.prof .&#x2F;helloworld<br>3、链接动态库：env LD_PRELOAD&#x3D;”&#x2F;usr&#x2F;lib&#x2F;libprofiler.so” <binary>（不推荐这种方式）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> dtrace </tag>
            
            <tag> profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTrace相关</title>
      <link href="/2023/06/25/dtrace-like/"/>
      <url>/2023/06/25/dtrace-like/</url>
      
        <content type="html"><![CDATA[<h1 id="DTrace-Like"><a href="#DTrace-Like" class="headerlink" title="DTrace Like"></a>DTrace Like</h1><p><a href="https://github.com/xen0l/awesome-dtrace">awesome-dtrace</a></p><h2 id="Windows-x2F-macOS"><a href="#Windows-x2F-macOS" class="headerlink" title="Windows&#x2F;macOS"></a>Windows&#x2F;macOS</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dtrace -l | <span class="built_in">wc</span> -l</span><br><span class="line">sudo dtrace -l &gt; dtrace.txt</span><br><span class="line">sudo dtrace -<span class="built_in">ln</span> syscall:::</span><br><span class="line">sudo dtrace -<span class="built_in">ln</span> syscall::: | grep entry | <span class="built_in">wc</span> -l</span><br><span class="line">sudo dtrace -<span class="built_in">ln</span> syscall::: | grep entry| grep \<span class="comment"># | wc -l</span></span><br></pre></td></tr></table></figure><h2 id="macOS-kdebug"><a href="#macOS-kdebug" class="headerlink" title="macOS kdebug"></a>macOS kdebug</h2><p><a href="https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/trace_codes">https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/trace_codes</a><br>cat &#x2F;usr&#x2F;share&#x2F;misc&#x2F;trace.codes  | grep BSC_<br>557个 多出来的5个<br>0x40e0104       BSC_msync_extended_info<br>0x40e0264       BSC_pread_extended_info<br>0x40e0268       BSC_pwrite_extended_info<br>0x40e0314       BSC_mmap_extended_info<br>0x40f0314       BSC_mmap_extended_info2</p><p>win11 21H2 22000.856 系统调用 474个 Nt开头<br>macOS 10.15 系统调用 552个 无名称 #开头 121个<br>[Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1&#x2F;RELEASE_X86_64 x86_64]</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo bpftrace -l &gt; bpftrace.txt</span><br><span class="line">sudo bpftrace -l <span class="string">&#x27;t:syscalls:&#x27;</span></span><br><span class="line">sudo bpftrace -l <span class="string">&#x27;t:syscalls:sys_enter_*&#x27;</span> | <span class="built_in">wc</span> -l</span><br><span class="line">sudo bpftrace -l <span class="string">&#x27;t:syscalls:sys_enter_*&#x27;</span> &gt; syscalls.txt</span><br><span class="line">sed -i <span class="string">&#x27;s/tracepoint:syscalls:sys_enter_//&#x27;</span> syscalls.txt</span><br><span class="line">sudo bpftrace -l <span class="string">&#x27;t:syscalls:sys_enter_*&#x27;</span> | sed  <span class="string">&#x27;s/tracepoint:syscalls:sys_enter_//&#x27;</span> &gt; syscalls.txt</span><br></pre></td></tr></table></figure><p>manjaro 系统调用 344个<br>[Linux wurui 5.15.60-1-MANJARO #1 SMP PREEMPT Thu Aug 11 13:14:05 UTC 2022 x86_64 GNU&#x2F;Linux]<br>sudo ls &#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing&#x2F;events&#x2F;syscalls&#x2F; &gt; syscalls_kernel.txt</p><h1 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h1><p>用户自定义事件收集<br><a href="https://www.cnblogs.com/zkweb/p/8126303.html">https://www.cnblogs.com/zkweb/p/8126303.html</a><br>etw lttng ctf(DTrace)<br>Qt 6<br>corelib&#x2F;tracing</p><p>c 语言使用lttng<br><a href="http://t.zoukankan.com/rongfengliang-p-12905940.html">http://t.zoukankan.com/rongfengliang-p-12905940.html</a><br>tracepoint&#x2F;do_tracepoint&#x2F;tracepoint_enabled [#include &lt;lttng&#x2F;tracepoint-event.h&gt;]<br>LTTng原理<br><a href="https://zhuanlan.zhihu.com/p/557393806">https://zhuanlan.zhihu.com/p/557393806</a></p><p>etw<br>TraceLoggingWrite&#x2F;TraceLoggingProviderEnabled<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/tracelogging/tracelogging-wrapper-macros">https://learn.microsoft.com/zh-cn/windows/win32/tracelogging/tracelogging-wrapper-macros</a><br>有四种主要类型的提供程序：MOF (经典) 提供程序、WPP 提供程序、基于清单的提供程序和 TraceLogging 提供程序。<br><a href="https://learn.microsoft.com/zh-cn/windows/win32/etw/about-event-tracing">https://learn.microsoft.com/zh-cn/windows/win32/etw/about-event-tracing</a><br>EventPipe 是类似于 ETW 或 LTTng 的运行时组件，可用于收集跟踪数据。 EventPipe 的目标是使 .NET 开发人员能够轻松地跟踪其 .NET 应用程序，而无需依赖于平台特定的 OS 本机组件（如 ETW 或 LTTng）。<br><a href="https://learn.microsoft.com/zh-cn/dotnet/core/diagnostics/eventpipe">https://learn.microsoft.com/zh-cn/dotnet/core/diagnostics/eventpipe</a></p><p>dtrace<br>自定义的探测器USDT<br><a href="https://blog.csdn.net/dustzhu/article/details/103686556">https://blog.csdn.net/dustzhu/article/details/103686556</a><br>dtrace linux_将DTrace探针添加到您的应用程序<br><a href="https://blog.csdn.net/cusi77914/article/details/107113729">https://blog.csdn.net/cusi77914/article/details/107113729</a></p><p>一文教你如何使用 eBPF 检测分析用户态程序<br><a href="https://zhuanlan.zhihu.com/p/580656180">https://zhuanlan.zhihu.com/p/580656180</a><br><a href="https://www.cnxct.com/ebpf-uprobe-userspace-app/">https://www.cnxct.com/ebpf-uprobe-userspace-app/</a></p><p>浅谈动态跟踪技术之DTrace<br><a href="https://www.jianshu.com/p/6acd36976fba">https://www.jianshu.com/p/6acd36976fba</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DTRACE_LABEL(p, n)                                                                      \</span></span><br><span class="line"><span class="meta"> <span class="string">&quot;__dtrace_probe$&quot;</span> DTRACE_TOSTRING(%=__LINE__) DTRACE_STRINGIFY(_##p##___##n) <span class="string">&quot;:&quot;</span> <span class="string">&quot;\n\t&quot;</span></span></span><br></pre></td></tr></table></figure><p>Apple_OSS&#x2F;xnu&#x2F;bsd&#x2F;sys&#x2F;sdt.h</p><ul><li>The DTRACE_PROBE*() macros are not supported on Mac OS X – instead see</li><li>“BUILDING CODE CONTAINING USDT PROBES” in the dtrace(1) manpage</li></ul><p>drace_note.md</p><p>OpenDTrace<br><a href="https://github.com/orgs/opendtrace/repositories">https://github.com/orgs/opendtrace/repositories</a></p><p>OpenDTrace Specification version 1.0<br><a href="https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-924.pdf">https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-924.pdf</a></p><p>Dtrace4Linux<br><a href="https://github.com/dtrace4linux/linux">https://github.com/dtrace4linux/linux</a></p><p>DTrace Tools<br><a href="https://www.brendangregg.com/dtrace.html">https://www.brendangregg.com/dtrace.html</a></p><p><a href="https://www.brendangregg.com/books.html">https://www.brendangregg.com/books.html</a></p><h1 id="Linux-Tracer"><a href="#Linux-Tracer" class="headerlink" title="Linux Tracer"></a>Linux Tracer</h1><h2 id="ftrace"><a href="#ftrace" class="headerlink" title="ftrace"></a>ftrace</h2><p>sudo pacman -S trace-cmd<br>GUI –&gt; KernelShark</p><h2 id="strace-x2F-ltrace-库函数"><a href="#strace-x2F-ltrace-库函数" class="headerlink" title="strace&#x2F;ltrace(库函数)"></a>strace&#x2F;ltrace(库函数)</h2><h2 id="babeltrace2-LTTng"><a href="#babeltrace2-LTTng" class="headerlink" title="babeltrace2(LTTng)"></a>babeltrace2(LTTng)</h2><h2 id="ktap-lua"><a href="#ktap-lua" class="headerlink" title="ktap(lua)"></a>ktap(lua)</h2><h2 id="bpftrace"><a href="#bpftrace" class="headerlink" title="bpftrace"></a>bpftrace</h2><p><a href="https://github.com/iovisor/bpftrace">https://github.com/iovisor/bpftrace</a><br><a href="https://developer.aliyun.com/article/703028">https://developer.aliyun.com/article/703028</a><br><a href="https://www.brendangregg.com/blog/2018-10-08/dtrace-for-linux-2018.html">https://www.brendangregg.com/blog/2018-10-08/dtrace-for-linux-2018.html</a><br><a href="https://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html">https://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br><span class="line">pacman -Ss headers | grep linux</span><br><span class="line">sudo pacman -S linux515-headers</span><br><span class="line">sudo pacman -S bcc-tools python-bcc</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/share/bcc/tools/:<span class="variable">$PATH</span></span><br><span class="line">sudo execsnoop</span><br><span class="line">sudo opensnoop</span><br><span class="line"></span><br><span class="line">bpftrace -e <span class="string">&#x27;uprobe:/bin/bash:readline &#123; printf(&quot;read a line\n&quot;); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;uprobe:./a.out:sigHandler &#123; printf(&quot;sigHandler called\n&quot;); &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>sudo pacman -S bpftrace</p><figure class="highlight sh"><figcaption><span>sudo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">bpftrace -l <span class="string">&#x27;t:syscalls:*&#x27;</span></span><br><span class="line">bpftrace -l &gt; bpftrace.txt</span><br><span class="line">bpftrace -l <span class="string">&#x27;t:syscalls:*&#x27;</span></span><br><span class="line">bpftrace -l <span class="string">&#x27;t:syscalls:sys_enter_*&#x27;</span> | <span class="built_in">wc</span> -l</span><br><span class="line">bpftrace -l <span class="string">&#x27;t:syscalls:sys_enter_*&#x27;</span> &gt; syscalls.txt</span><br><span class="line">sed -i <span class="string">&#x27;s/tracepoint:syscalls:sys_enter_//&#x27;</span> syscalls.txt</span><br><span class="line">bpftrace -l <span class="string">&#x27;t:syscalls:sys_enter_*&#x27;</span> | sed  <span class="string">&#x27;s/tracepoint:syscalls:sys_enter_//&#x27;</span> &gt; syscalls.txt</span><br><span class="line"><span class="comment"># bpftrace -l &#x27;kprobe:*&#x27;</span></span><br><span class="line"><span class="comment"># bpftrace -l &#x27;t:syscalls:*openat*</span></span><br><span class="line"><span class="comment"># bpftrace -l &#x27;kprobe:tcp*,trace</span></span><br><span class="line"><span class="comment"># bpftrace -l &#x27;k:*socket*,tracepoint:syscalls:*tcp*&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_connect &#123; printf(&quot;%s is connect.\n&quot;, comm); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_connect &#123; printf(&quot;%s is connect %s.\n&quot;, comm, ntop(((struct sockaddr_in *)args-&gt;uservaddr)-&gt;sin_addr.s_addr)); &#125;&#x27;</span></span><br><span class="line">ping baidu.com -c1</span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_openat &#123; printf(&quot;%s %s\n&quot;, comm, str(args-&gt;filename)); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_execve &#123; printf(&quot;%s %s\n&quot;, comm, str(args-&gt;filename)); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_execve &#123; printf(&quot;%s called %s\n&quot;, comm, str(args-&gt;filename)); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_execve &#123; join(args-&gt;argv); &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;int main()&#123;return 0;&#125;&#x27;</span> | gcc -xc -o bin -</span><br><span class="line">bpftrace -e <span class="string">&#x27;uprobe:./bin:main &#123; printf(&quot;main called\n&quot;); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;uprobe:./bin:main &#123; printf(&quot;main called\n&quot;); &#125;&#x27;</span> -c <span class="string">&#x27;./bin&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:raw_syscalls:sys_enter &#123; @syscalls = count(); &#125;</span></span><br><span class="line"><span class="string">    interval:s:1 &#123; print(@syscalls); clear(@syscalls); &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">bpftrace -lv <span class="string">&#x27;tracepoint:syscalls:sys_enter_connect&#x27;</span></span><br><span class="line"></span><br><span class="line">bpftrace -e <span class="string">&#x27;iter:task &#123; printf(&quot;%s:%d\n&quot;, ctx-&gt;task-&gt;comm, ctx-&gt;task-&gt;pid); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;iter:task_file &#123; printf(&quot;%s:%d %d:%s\n&quot;, ctx-&gt;task-&gt;comm, ctx-&gt;task-&gt;pid, ctx-&gt;fd, path(ctx-&gt;file-&gt;f_path)); &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">bpftrace -e <span class="string">&#x27;kprobe:do_nanosleep &#123; printf(&quot;%s\n&quot;, ksym(reg(&quot;ip&quot;))); &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;int main()&#123;return 0;&#125;&#x27;</span> | gcc -g -xc -o bin -</span><br><span class="line"><span class="comment"># bpftrace -e &#x27;uprobe:./bin:main &#123; printf(&quot;%s\n&quot;, usym(reg(&quot;ip&quot;))); &#125;&#x27; -c &#x27;./bin&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:syscalls:sys_enter_sendmsg &#123; printf(&quot;%s =&gt; &quot;, comm);</span></span><br><span class="line"><span class="string">    cat(&quot;/proc/%d/cmdline&quot;, pid); printf(&quot;\n&quot;) &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;kprobe:vfs_read &#123; @[comm] = count(); &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">bpftrace -l <span class="string">&#x27;tracepoint:syscalls:sys_enter_*&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:sched:sched* &#123; @[probe] = count(); &#125; interval:s:5 &#123; exit(); &#125;&#x27;</span></span><br><span class="line">bpftrace -e <span class="string">&#x27;tracepoint:sched:sched_switch &#123; @[kstack] = count(); &#125; interval:s:2 &#123; exit(); &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>perf<br>sudo pacman -S perf</p><p>eBPF<br><a href="https://ebpf.io/">https://ebpf.io/</a><br><a href="https://www.brendangregg.com/ebpf.html">https://www.brendangregg.com/ebpf.html</a><br><a href="https://github.com/zoidbergwill/awesome-ebpf">https://github.com/zoidbergwill/awesome-ebpf</a></p><p><a href="https://jishuin.proginn.com/p/763bfbd73692">https://jishuin.proginn.com/p/763bfbd73692</a> eBPF 介绍<br>在很多情况下，并不直接使用 eBPF，而是通过 Cilium、bcc 或 bpftrace 等项目间接使用，它们在 eBPF 之上提供了一层抽象，无需直接编写程序而是提供了一些能力，由 eBPF 来实现。<br>要是没有上层抽象的话，就要直接编写程序了。Linux 内核期望 ePBF 程序以字节码的形式加载。直接编写字节码不太可能，实际开发中更常见的是使用 LLVM 等编译器套件将伪 C 代码编译成 eBPF 字节码。<br>Cilium -&gt; 容器</p><p><a href="https://developer.aliyun.com/article/947869">https://developer.aliyun.com/article/947869</a> 深入浅出eBPF｜你要了解的7个核心问题<br>sudo ls &#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing&#x2F;events </p><p><a href="https://jishuin.proginn.com/p/763bfbd6368e">https://jishuin.proginn.com/p/763bfbd6368e</a> eBPF 基本架构及使用<br>总体上XDP性能全面弱于DPDK（但是差距不大）<br>XDP优势：可编程、内核协同工作[eBPF在内核]</p><p><a href="https://zhuanlan.zhihu.com/p/453005342">https://zhuanlan.zhihu.com/p/453005342</a> XDP技术——Linux网络处理的高速公路</p><p><a href="https://www.ithome.com/0/620/449.htm">https://www.ithome.com/0/620/449.htm</a> XDP for Windows<br><a href="https://github.com/microsoft/xdp-for-windows/">https://github.com/microsoft/xdp-for-windows/</a><br><a href="https://www.zhihu.com/question/534498790">https://www.zhihu.com/question/534498790</a></p><p><a href="https://lwn.net/Articles/857215/">https://lwn.net/Articles/857215/</a> eBPF for Windows<br><a href="https://github.com/Microsoft/ebpf-for-windows">https://github.com/Microsoft/ebpf-for-windows</a></p><p><a href="https://github.com/iovisor/ubpf">https://github.com/iovisor/ubpf</a> Userspace eBPF VM </p><p>CPU Flame Graphs<br><a href="https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html">https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html</a><br>Linux perf<br>eBPF profile<br>DTrace<br>Xperf [<a href="https://docs.microsoft.com/zh-cn/windows-hardware/test/wpt/xperf-command-line-reference]">https://docs.microsoft.com/zh-cn/windows-hardware/test/wpt/xperf-command-line-reference]</a></p><p>Kernel Debug<br>Linux –&gt; ftrace(tracepoint&#x2F;kprobe&#x2F;uprobe,etc)<br>ftrace 的主要作者 Steven Rostedt 创建了 trace-cmd，我创建了 perf-tools 集合。 我最大的抱怨是它不可编程，所以你不能，例如，保存和获取时间戳、计算延迟，然后将其存储为直方图。 您需要以一定成本将事件转储到用户级别和后处理。 它可以通过 eBPF 变得可编程。<br>macOS –&gt; kdebug(ktrace)&#x2F;dtrace?<br>Windows –&gt; windbg(kernel-mode)&#x2F;dtrace-on-windows?</p><p>kdebug 单用户 一次只能有一个运行 第二个调用sysctl会返回失败<br>$(OBJROOT)&#x2F;syscall.codes: $(TARGET)&#x2F;bsd.syscalls.master<br>$(OBJROOT)&#x2F;trace.codes: $(SRCROOT)&#x2F;bsd&#x2F;kern&#x2F;trace_codes $(OBJROOT)&#x2F;syscall.codes<br><a href="https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/syscalls.master">https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/syscalls.master</a><br><a href="https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/trace_codes">https://github.com/apple-oss-distributions/xnu/blob/main/bsd/kern/trace_codes</a></p><p>sysctl CTL_KERN, KERN_KDEBUG, KERN_KDREADTR<br><a href="http://newosxbook.com/tools/kdv.html">http://newosxbook.com/tools/kdv.html</a><br>Apple’s own utilities - fs_usage(1), sc_usage(1), latency(1) and trace(1) - all part of the system_cmds package, use this facility. The Apple utilities impose filters on KDebug, and don’t tap the full power of this amazing facility. The fabulous Instruments.app also uses kdebug, which it also invokes on the device with the help of iprofiler(1), present both in OS X and in iOS (in the DeveloperDiskImage)<br><a href="https://github.com/apple-oss-distributions/system_cmds.git">https://github.com/apple-oss-distributions/system_cmds.git</a><br>fs_usage目前使用ktrace(ktrace_event_t) see <code>man ktrace</code><br><a href="https://github.com/Torrekie/apple_internal_sdk">https://github.com/Torrekie/apple_internal_sdk</a></p><p>ktrace info<br>tailspin info</p><p>sysctl ktrace<br>sysctl kperf<br>sysctl kern.coredump<br>sysctl kern.corefile</p><p>coredump太大 –&gt; corpses<br>task_map_corpse_info</p><p>kperf subset –&gt; kpc</p><p>Trace &amp; Debug<br>proc_info<br>stackshot<br>microstackshot<br>–&gt; systemstats<br>&#x2F;var&#x2F;db&#x2F;systemstats<br>logd<br>&#x2F;var&#x2F;db&#x2F;diagnostics&#x2F;</p><p>DTrace<br>dtrace -l | tr -s ‘ ‘ | tr -d ‘[0-9]’ | cut -d ‘ ‘ -f2 | sort -u &gt; dtrace_providers.txt<br><a href="https://awesome-dtrace.com/">https://awesome-dtrace.com/</a><br><a href="https://www.codenong.com/35752326/">https://www.codenong.com/35752326/</a> 关于macos：Dtrace打印父进程命令<br><a href="https://www.cnblogs.com/daizhj/articles/3178257.html">https://www.cnblogs.com/daizhj/articles/3178257.html</a> MAC OS 内核跟踪监视工具dtrace 使用示例说明</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dtrace -n <span class="string">&#x27;syscall::connect:entry &#123; printf(&quot;%s is connect.\n&quot;, curpsinfo-&gt;pr_psargs); &#125;&#x27;</span></span><br><span class="line">curl -I baidu.com</span><br><span class="line">dtrace -n <span class="string">&#x27;syscall::execve:entry &#123; printf(&quot;%s is execve.\n&quot;, curpsinfo-&gt;pr_psargs); &#125;&#x27;</span></span><br><span class="line">dtrace -n <span class="string">&#x27;syscall::execve:entry &#123; printf(&quot;%s %s&quot;, execname, copyinstr(arg0)); &#125;&#x27;</span></span><br><span class="line">dtrace -n <span class="string">&#x27;syscall::open*:entry &#123; printf(&quot;%s %s&quot;, execname, copyinstr(arg0)); &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zengkefu/p/5632802.html">https://www.cnblogs.com/zengkefu/p/5632802.html</a>  Choosing a Linux Tracer–&gt;Brendan Gregg’s Blog<br><a href="https://www.cnblogs.com/zengkefu/p/5726530.html">https://www.cnblogs.com/zengkefu/p/5726530.html</a>  利用DTrace实时检测MySQL<br>DTrace最好的一个功能是一个叫做“flowindent”的编译指示选项。这个函数会相应地显示entry和return并生成一个逻辑树，以便用户能了解其内部的函数调用关系。<br><a href="http://myaut.github.io/dtrace-stap-book/">http://myaut.github.io/dtrace-stap-book/</a> Dynamic Tracing with DTrace &amp; SystemTap<br><a href="https://www.cnblogs.com/zengkefu/p/6550976.html">https://www.cnblogs.com/zengkefu/p/6550976.html</a> windows XP 下的DTRACE 跟踪 学习<br><a href="https://github.com/prash-wghats/DTrace-win32">https://github.com/prash-wghats/DTrace-win32</a></p><p><a href="https://illumos.org/books/dtrace/preface.html">https://illumos.org/books/dtrace/preface.html</a> Dynamic Tracing Guide<br><a href="https://github.com/rmustacc/illumos-docbooks">https://github.com/rmustacc/illumos-docbooks</a></p><p>TODO<br>JIT eBPF&#x2F;cling mprotect确认<br>instruments<br>iprofiler (Older versions of MacOS (Sierra))<br><a href="https://github.com/jfgiraldoa/moose/blob/master/modules/doc/content/application_development/profiling.md">https://github.com/jfgiraldoa/moose/blob/master/modules/doc/content/application_development/profiling.md</a></p><p><a href="https://www.cnblogs.com/zengkefu/p/6882921.html">https://www.cnblogs.com/zengkefu/p/6882921.html</a> 白话火焰图—火丁笔记<br><a href="https://www.cnblogs.com/zengkefu/p/7502433.html">https://www.cnblogs.com/zengkefu/p/7502433.html</a> DTrace memory leak 内存泄露</p><p>dtrace -x ustackframes&#x3D;100 -n ‘profile-97 &#x2F;pid &#x3D;&#x3D; 12345&#x2F; { @[ustack()] &#x3D; count(); } tick-60s { exit(0); }’ -o out.user_stacks</p><p>dtrace -l -n profile-*<br>dtrace -x ustackframes&#x3D;100 -n ‘profile-997  &#x2F;execname &#x3D;&#x3D; “test”&#x2F; { @[ustack()] &#x3D; count(); }’ -o user_stacks.txt -c ‘.&#x2F;test’</p><p>gprof2dot -f dtrace user_stacks.txt | dot -Tpng -o output.png</p><p>Instruments<br>instruments -t “Time Profiler” .&#x2F;a.out foo.txt 20<br>instruments -t “Time Profiler” .&#x2F;test<br>instruments -l 30000 -t “Time Profiler” -p 5773</p><p>MTuner is a C&#x2F;C++ memory profiler and memory leak finder for Windows, PlayStation 4 and 3, Android and other platforms</p><p>分析系统自带CPU采样格式<br>macOS sample&#x2F;活动监视器<br>Windows dump&#x2F;任务管理器<br>Linux perf?</p><p>Userspace eBPF VM<br><a href="https://github.com/iovisor/ubpf">ubpf</a><br><a href="https://github.com/microsoft/ebpf-for-windows">ebpf-for-windows</a><br><a href="https://github.com/brendangregg/DTrace-book-scripts">DTrace-book-scripts</a><br><a href="https://github.com/brendangregg/DTrace-tools">DTrace-tools</a><br><a href="https://github.com/zoidbergwill/awesome-ebpf">awesome-ebpf</a></p><p><a href="https://github.com/myaut/dtrace-stap-book">dtrace-stap-book</a><br><a href="https://github.com/opendtrace/toolkit">toolkit</a><br><a href="https://github.com/brendangregg/FlameGraph">FlameGraph</a><br><a href="https://github.com/frida/frida">frida</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dtrace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站记录</title>
      <link href="/2023/06/25/website-note/"/>
      <url>/2023/06/25/website-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://versus.com/cn%E4%B8%87%E7%89%A9%E7%9A%86%E5%8F%AF%E5%AF%B9%E6%AF%94">https://versus.com/cn万物皆可对比</a><br><a href="https://versus.com/cn/categories">https://versus.com/cn/categories</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU缓存</title>
      <link href="/2023/06/25/cache-note/"/>
      <url>/2023/06/25/cache-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/610507f53824/">https://www.jianshu.com/p/610507f53824/</a></p><p>L1&#x2F;L2 Cache速度差别</p><p>L1 cache: 3 cycles<br>L2 cache: ~14 cycles<br>L3 cache: ~50 cycles</p><p>Main Memory: ~250 cycles</p><p>Pentium M:<br>To Where Cycles<br>Register  &lt;&#x3D; 1<br>L1d  ~3<br>L2  ~14<br>Main Memory   ~240   </p><p><a href="https://www.jianshu.com/p/e338b550850f">https://www.jianshu.com/p/e338b550850f</a><br>从CPU到大约需要的 CPU 周期大约需要的时间</p><p>主存 约60-80纳秒</p><p>QPI 总线传输 (between sockets, not drawn)<br>约20ns</p><p>L3 cache 40-45 cycles,约15ns<br>L2 cache 约10 cycles,约3ns<br>L1 cache 约3-4 cycles,约1ns</p><p>寄存器 1 cycle</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpu </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后台进程</title>
      <link href="/2023/06/25/daemon-note/"/>
      <url>/2023/06/25/daemon-note/</url>
      
        <content type="html"><![CDATA[<h2 id="Unix-x2F-Linux如何创建一个后台进程"><a href="#Unix-x2F-Linux如何创建一个后台进程" class="headerlink" title="Unix&#x2F;Linux如何创建一个后台进程"></a>Unix&#x2F;Linux如何创建一个后台进程</h2><p><a href="https://blog.csdn.net/ACb0y/article/details/6629774">https://blog.csdn.net/ACb0y/article/details/6629774</a><br>1、调用fork函数，创建一个子进程。<br>2、先让父进程自然结束。<br>3、在子进程中调用setpgrp()，把子进程的进程组ID设为子进程的进程ID。<br>4、在子进程中调用setsid()，创建一个新的Session(会话)，这样子进程就与当前的控制终端脱离，也接受不到当前终端的(ctrl + c)消息。</p><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>Ref: man daemon –&gt; posix_spawn<br><a href="https://github.com/apple-oss-distributions/Libc/blob/main/gen/FreeBSD/daemon.c">https://github.com/apple-oss-distributions/Libc/blob/main/gen/FreeBSD/daemon.c</a><br><a href="https://github.com/aria2/aria2/blob/master/src/daemon.cc">https://github.com/aria2/aria2/blob/master/src/daemon.cc</a><br><a href="https://github.com/apache/apr/blob/trunk/threadproc/unix/procsup.c">https://github.com/apache/apr/blob/trunk/threadproc/unix/procsup.c</a><br><a href="https://github.com/nghttp2/nghttp2/blob/master/src/util.cc#L1651">https://github.com/nghttp2/nghttp2/blob/master/src/util.cc#L1651</a><br>daemonize</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">        <span class="comment">/* Don&#x27;t daemonize when run by launchd */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getppid</span>() != <span class="number">1</span> &amp;&amp; <span class="built_in">daemon</span>(<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">daemon</span>(<span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="posix-spawn"><a href="#posix-spawn" class="headerlink" title="posix_spawn"></a>posix_spawn</h2><p><a href="https://github.com/libuv/libuv/blob/v1.x/src/unix/process.c#L845">https://github.com/libuv/libuv/blob/v1.x/src/unix/process.c#L845</a><br><a href="https://github.com/ninja-build/ninja/blob/master/src/subprocess-posix.cc#L51">https://github.com/ninja-build/ninja/blob/master/src/subprocess-posix.cc#L51</a><br><a href="https://github.com/qt/qtbase/blob/dev/src/3rdparty/forkfd/forkfd.c">https://github.com/qt/qtbase/blob/dev/src/3rdparty/forkfd/forkfd.c</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> daemon </tag>
            
            <tag> process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebGPU</title>
      <link href="/2023/06/25/webgpu-note/"/>
      <url>/2023/06/25/webgpu-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/read/cv15399968">https://www.bilibili.com/read/cv15399968</a><br>虽然，WebGPU还处于测试阶段，但已经可以在Chrome和Firefox中使用啦。做本地测试的同学可以使用Chrome Canary或者Firefox Nightly，只需要设置相应的flag就可以。（在正常浏览的时候建议不要开启WebGPU）</p><p>Chrome Canary: 在 about:flags 中，启用enable-unsafe-webgpu<br>Firefox Nightly:  在 about:config中，设置dom.webgpu.enabled<br>Chrome Origin Trial 注册链接：<a href="https://developer.chrome.com/origintrials/#/trials/active">https://developer.chrome.com/origintrials/#/trials/active</a></p><p>开发者们可以利用Chrome（94+）的Origin Trial，向Chrome申请WebGPU的权限，得到一个Token，放到HTML head里就可以使用特定的API，就可以发布WebGPU的应用给到端用户，在Mac，Windows和Chrome OS系统中都可以。用户不用设置任何的Tag也可以查看WebGPU渲染的内容。 作者：Orillusion官方 <a href="https://www.bilibili.com/read/cv15399968">https://www.bilibili.com/read/cv15399968</a> 出处：bilibili</p><h2 id="WebGPU可用"><a href="#WebGPU可用" class="headerlink" title="WebGPU可用"></a>WebGPU可用</h2><p>Chrome 114</p><p><a href="https://github.com/gfx-rs/wgpu-native">wgpu-native</a><br><a href="https://github.com/eliemichel/LearnWebGPU">LearnWebGPU</a><br><a href="https://github.com/eliemichel/WebGPU-Cpp">WebGPU-Cpp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> wgpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程相关</title>
      <link href="/2023/06/25/thread-note/"/>
      <url>/2023/06/25/thread-note/</url>
      
        <content type="html"><![CDATA[<h2 id="suspend-x2F-resume"><a href="#suspend-x2F-resume" class="headerlink" title="suspend&#x2F;resume"></a>suspend&#x2F;resume</h2><p>thread_resume(xnu)<br>ResumeThread(win32)<br>noimpl(linux使用cond&#x2F;atomic模拟)<br>如何在join前启动线程 yield并检查是否启动(or pthread_kill?) 有点像冷启动<br>pthread_yield_np(mac)&#x2F;sched_yield</p><h2 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h2><p>&#x3D;&gt; 等待被打断 使用while判断 重新等待</p><h2 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h2><p>C++11 <a href="https://github.com/progschj/ThreadPool">https://github.com/progschj/ThreadPool</a><br>POSIX <a href="https://github.com/mbrossard/threadpool">https://github.com/mbrossard/threadpool</a><br>AutoGrow <a href="https://github.com/lzpong/threadpool">https://github.com/lzpong/threadpool</a></p><h2 id="闲话Swift协程"><a href="#闲话Swift协程" class="headerlink" title="闲话Swift协程"></a>闲话Swift协程</h2><p><a href="https://www.bennyhuo.com/2021/10/11/swift-coroutines-01-intro/">https://www.bennyhuo.com/2021/10/11/swift-coroutines-01-intro/</a></p><h2 id="deadlock"><a href="#deadlock" class="headerlink" title="deadlock"></a>deadlock</h2><p>Low cost runtime deadlock detection with checkpoints history<br><a href="https://github.com/shuvalov-mdb/thread-liveness-monitor">thread-liveness-monitor</a><br><a href="https://github.com/DamZiobro/gdb-automatic-deadlock-detector">gdb-automatic-deadlock-detector</a></p><h2 id="c89"><a href="#c89" class="headerlink" title="c89"></a>c89</h2><p><a href="https://github.com/mackron/c89atomic">c89atomic</a><br><a href="https://github.com/mackron/c89thread">c89thread</a><br>Small, portable implementation of the C11 threads API<br><a href="https://github.com/tinycthread/tinycthread">tinycthread</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从原子等待说起</title>
      <link href="/2023/06/25/atomic-wait/"/>
      <url>/2023/06/25/atomic-wait/</url>
      
        <content type="html"><![CDATA[<h2 id="Parker-事件等待"><a href="#Parker-事件等待" class="headerlink" title="Parker(事件等待)"></a>Parker(事件等待)</h2><p>WaitOnAdress<br><a href="https://github.com/mldbai/mldb/blob/master/arch/wait_on_address.cc">https://github.com/mldbai/mldb/blob/master/arch/wait_on_address.cc</a><br><a href="https://github.com/pitdicker/valet_parking/blob/master/src/futex/darwin.rs">https://github.com/pitdicker/valet_parking/blob/master/src/futex/darwin.rs</a><br>Cross-platform atomic wait and wake (aka futex) functionality for Rust.<br><a href="https://github.com/m-ou-se/atomic-wait">https://github.com/m-ou-se/atomic-wait</a> </p><p>os_unfair_lock_lock -&gt; _os_unfair_lock_lock_slow -&gt; __ulock_wait<br><a href="https://www.jianshu.com/p/2d3e73f8357f">https://www.jianshu.com/p/2d3e73f8357f</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_ulock_wait 515</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_ulock_wake 516</span></span><br></pre></td></tr></table></figure><p>_dispatch_wait_on_address<br><a href="https://github.com/tanghaitao/OC-learn-master/blob/master/chapter8/libdispatch-685/src/shims/lock.c#L180">https://github.com/tanghaitao/OC-learn-master/blob/master/chapter8/libdispatch-685/src/shims/lock.c#L180</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::atomic_bool wait = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) std::<span class="built_in">atomic_wait</span>(&amp;wait, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>__std_atomic_wait_direct (WaitOnAddress)<br><a href="https://github.com/microsoft/STL/blob/main/stl/src/atomic_wait.cpp">https://github.com/microsoft/STL/blob/main/stl/src/atomic_wait.cpp</a><br>__libcpp_platform_wait_on_address (__ulock_wait&#x2F;futex)<br><a href="https://github.com/llvm/llvm-project/blob/main/libcxx/src/atomic.cpp">https://github.com/llvm/llvm-project/blob/main/libcxx/src/atomic.cpp</a><br>__platform_wait (futex)<br><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/atomic_wait.h">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/atomic_wait.h</a></p><p>Wait 函数<br><a href="https://docs.microsoft.com/zh-cn/windows/win32/sync/wait-functions">https://docs.microsoft.com/zh-cn/windows/win32/sync/wait-functions</a></p><h2 id="原子内存顺序"><a href="#原子内存顺序" class="headerlink" title="原子内存顺序"></a>原子内存顺序</h2><p><a href="https://github.com/microsoft/STL/blob/main/stl/inc/atomic">https://github.com/microsoft/STL/blob/main/stl/inc/atomic</a><br>arm内存屏障 __dmb(0xB) x86&#x2F;x64编译器屏障_ReadWriteBarrier(也算内存屏障吧)<br><a href="https://github.com/llvm/llvm-project/blob/main/libcxx/include/atomic">https://github.com/llvm/llvm-project/blob/main/libcxx/include/atomic</a><br>__c11_atomic_thread_fence(llvm builtin) __atomic_thread_fence(llvm builtin)<br><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/atomic_base.h">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/atomic_base.h</a><br>__atomic_thread_fence(gcc builtin)</p><p>理解 C++ 的 Memory Order<br><a href="http://senlinzhan.github.io/2017/12/04/cpp-memory-order/">http://senlinzhan.github.io/2017/12/04/cpp-memory-order/</a></p><p>内存模型与c++中的memory order<br><a href="https://www.cnblogs.com/ishen/p/13200838.html">https://www.cnblogs.com/ishen/p/13200838.html</a></p><p>C++11多线程内存序(std::memory_order_seq_cst )<br><a href="https://blog.csdn.net/qls315/article/details/105273506">https://blog.csdn.net/qls315/article/details/105273506</a></p><h2 id="Timer-定时器"><a href="#Timer-定时器" class="headerlink" title="Timer(定时器)"></a>Timer(定时器)</h2><p><a href="https://blog.csdn.net/dengjingen/article/details/121443040">https://blog.csdn.net/dengjingen/article/details/121443040</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) select(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,&amp;timeval);</span><br><span class="line"><span class="comment">// while(1) select(0,0,0,0,0);</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/sync/using-waitable-timer-objects">https://docs.microsoft.com/zh-cn/windows/win32/sync/using-waitable-timer-objects</a><br>CreateWaitableTimer&#x2F;CreateThreadpoolTimer(win32)<br><a href="https://wirelessr.gitbooks.io/working-life/content/linux_timer.html">https://wirelessr.gitbooks.io/working-life/content/linux_timer.html</a><br>timer_create&#x2F;timerfd_create(linux)<br><a href="https://www.jianshu.com/p/b9d9fea2b56b">https://www.jianshu.com/p/b9d9fea2b56b</a><br><a href="https://github.com/CoreNGS/tests/blob/main/sys/kqueue/libkqueue/timer.c">https://github.com/CoreNGS/tests/blob/main/sys/kqueue/libkqueue/timer.c</a><br>dispatch_source&#x2F;EVFILT_TIMER+EV_ONESHOT(xnu)</p><h2 id="Clock-计时器"><a href="#Clock-计时器" class="headerlink" title="Clock(计时器)"></a>Clock(计时器)</h2><p>Monotonic Clock (steady_clock)<br><a href="https://github.com/llvm/llvm-project/blob/main/libcxx/src/chrono.cpp">https://github.com/llvm/llvm-project/blob/main/libcxx/src/chrono.cpp</a><br><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B11/chrono.cc">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/src/c%2B%2B11/chrono.cc</a><br><a href="https://github.com/microsoft/STL/blob/main/stl/src/xtime.cpp">https://github.com/microsoft/STL/blob/main/stl/src/xtime.cpp</a></p><h2 id="Waker-事件消息-x2F-IO唤醒"><a href="#Waker-事件消息-x2F-IO唤醒" class="headerlink" title="Waker(事件消息&#x2F;IO唤醒)"></a>Waker(事件消息&#x2F;IO唤醒)</h2><p>eventfd(linux) iocp[afd]&#x2F;msg(win32) EVFILT_USER&#x2F;mach_msg(xnu)<br>user space + cross process(?) : eventfd&#x2F;iocp[afd]&#x2F;EVFILT_USER+NOTE_TRIGGER(?)<br>all : pipe socket or unix domain socket<br><a href="https://github.com/tokio-rs/mio/blob/master/src/waker.rs">https://github.com/tokio-rs/mio/blob/master/src/waker.rs</a></p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// On platforms that support kqueue this will use the `EVFILT_USER` event</span></span><br><span class="line"><span class="comment">/// filter, see [implementation notes of `Poll`] to see what platforms support</span></span><br><span class="line"><span class="comment">/// kqueue. On Linux it uses [eventfd].</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/boostorg/asio/blob/develop/include/boost/asio/detail/select_interrupter.hpp">https://github.com/boostorg/asio/blob/develop/include/boost/asio/detail/select_interrupter.hpp</a><br><a href="https://github.com/libuv/libuv/blob/master/src/unix/async.c">https://github.com/libuv/libuv/blob/master/src/unix/async.c</a><br><a href="https://github.com/libuv/libuv/blob/master/src/win/async.c">https://github.com/libuv/libuv/blob/master/src/win/async.c</a><br><a href="https://github.com/qt/qtbase/blob/dev/src/corelib/kernel/qeventdispatcher_unix.cpp">https://github.com/qt/qtbase/blob/dev/src/corelib/kernel/qeventdispatcher_unix.cpp</a><br>[epoll_post_signal]<br><a href="https://github.com/an-tao/trantor/tree/master/third_party/wepoll">https://github.com/an-tao/trantor/tree/master/third_party/wepoll</a><br><a href="https://github.com/rbrich/xcikit/tree/master/src/xci/core/event">https://github.com/rbrich/xcikit/tree/master/src/xci/core/event</a><br><a href="https://github.com/mheily/libkqueue">https://github.com/mheily/libkqueue</a></p><h2 id="Shared-Memory-共享内存"><a href="#Shared-Memory-共享内存" class="headerlink" title="Shared Memory(共享内存)"></a>Shared Memory(共享内存)</h2><p>shmget(sysv)&#x2F;shm_open+mmap(posix)&#x2F;OpenFileMapping(win32)<br>MMAP和read的区别<br><a href="https://blog.csdn.net/wuguinianjing/article/details/111049193">https://blog.csdn.net/wuguinianjing/article/details/111049193</a></p><p>INSECTION: AWESOMELY EXPLOITING SHARED MEMORY OBJECTS<br><a href="http://publications.alex-ionescu.com/Infiltrate/Infiltrate%202015%20-%20Insection%20-%20Awesomly%20Exploiting%20Shared%20Memory%20Objects.pdf">http://publications.alex-ionescu.com/Infiltrate/Infiltrate%202015%20-%20Insection%20-%20Awesomly%20Exploiting%20Shared%20Memory%20Objects.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> atomic </tag>
            
            <tag> wait </tag>
            
            <tag> futex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编辑器记录</title>
      <link href="/2023/06/25/editor-note/"/>
      <url>/2023/06/25/editor-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/mirror/scite">scite</a><br><a href="https://github.com/notepad-plus-plus/notepad-plus-plus">Notepad++</a><br><a href="https://github.com/dail8859/NotepadNext">NotepadNext</a><br><a href="https://github.com/notepadqq/notepadqq">notepadqq</a> -&gt; A simple, general-purpose editor for Linux<br><a href="https://github.com/texmacs/texmacs">texmacs</a></p><p><a href="https://github.com/royqh1979/RedPanda-CPP">RedPanda-CPP</a><br><a href="https://github.com/Sigil-Ebook/Sigil">Sigil</a><br><a href="https://github.com/cburschka/lyx">lyx</a><br><a href="https://github.com/martinrotter/textosaurus">textosaurus</a><br><a href="https://github.com/proxyee-down-org/proxyee-down">proxyee-down</a><br><a href="https://github.com/qt-creator/qt-creator">qt-creator</a></p><p><a href="https://github.com/RadAd/Notepad">Notepad</a> -&gt; win32</p>]]></content>
      
      
      
        <tags>
            
            <tag> editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客主题</title>
      <link href="/2023/06/25/blog-themes/"/>
      <url>/2023/06/25/blog-themes/</url>
      
        <content type="html"><![CDATA[<p>Terminal<br><a href="https://github.com/tinkink-co/hexo-theme-terminal">https://github.com/tinkink-co/hexo-theme-terminal</a><br>Bamboo -&gt; like Butterfly<br><a href="https://github.com/yuang01/theme">https://github.com/yuang01/theme</a><br>Stellar<br><a href="https://github.com/xaoxuu/hexo-theme-stellar">https://github.com/xaoxuu/hexo-theme-stellar</a><br>One Paper<br><a href="https://zheli.design/one-paper/">https://zheli.design/one-paper/</a><br>Yun<br><a href="https://www.yunyoujun.cn/">https://www.yunyoujun.cn/</a><br>Instapaper<br><a href="https://github.com/techmovie/hexo-theme-instapaper">https://github.com/techmovie/hexo-theme-instapaper</a><br>Volantis<br><a href="https://volantis.js.org/">https://volantis.js.org/</a><br>Maupassant<br><a href="https://github.com/tufu9441/maupassant-hexo">https://github.com/tufu9441/maupassant-hexo</a><br><a href="https://www.haomwei.com/">https://www.haomwei.com/</a><br><a href="https://www.flysnow.org/">https://www.flysnow.org/</a><br>Simpleblock<br><a href="https://jysperm.me/">https://jysperm.me/</a><br><a href="https://github.com/jysperm/hexo-theme-simpleblock">https://github.com/jysperm/hexo-theme-simpleblock</a><br>Acorn<br><a href="https://acorn.imaging.xin/">https://acorn.imaging.xin/</a><br>Keep<br><a href="https://github.com/XPoet/hexo-theme-keep">https://github.com/XPoet/hexo-theme-keep</a><br>Oranges -&gt; like cactus<br><a href="https://github.com/zchengsite/hexo-theme-oranges">https://github.com/zchengsite/hexo-theme-oranges</a><br>Insnow<br><a href="https://mizore.site/">https://mizore.site/</a><br>Nexmoe -&gt; tangyuxian<br><a href="https://github.com/theme-nexmoe/hexo-theme-nexmoe">https://github.com/theme-nexmoe/hexo-theme-nexmoe</a><br><a href="https://github.com/tangyuxian/hexo-theme-tangyuxian">https://github.com/tangyuxian/hexo-theme-tangyuxian</a><br><a href="https://www.tangyuxian.com/">https://www.tangyuxian.com/</a><br>Replica<br><a href="https://github.com/sabrinaluo/gatsby-theme-replica">https://github.com/sabrinaluo/gatsby-theme-replica</a><br><a href="https://hiitea.io/tech/">https://hiitea.io/tech/</a><br>Geektutu<br><a href="https://geektutu.com/">https://geektutu.com/</a><br>MiHo<br><a href="https://blog.minhow.com/">https://blog.minhow.com/</a><br>Cactus<br><a href="https://xuthus5.github.io/hexo-theme-cactus/">https://xuthus5.github.io/hexo-theme-cactus/</a><br><a href="https://vccv.cc/">https://vccv.cc/</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++库记录</title>
      <link href="/2023/06/25/cpplib-note/"/>
      <url>/2023/06/25/cpplib-note/</url>
      
        <content type="html"><![CDATA[<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><a href="https://github.com/imageworks/pystring">PyString</a><br><a href="https://github.com/ArashPartow/strtk">strtk</a><br><a href="https://github.com/maxim2266/str">str</a><br><a href="https://github.com/antirez/sds">sds</a><br><a href="https://github.com/r-lyeh/stdstring.h">stdstring.h</a></p><h2 id="chardet"><a href="#chardet" class="headerlink" title="chardet"></a>chardet</h2><p><a href="https://github.com/BYVoid/uchardet">uchardet</a></p><h2 id="lang-det"><a href="#lang-det" class="headerlink" title="lang det"></a>lang det</h2><p><a href="https://github.com/google/cld3">cld3</a></p><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p><a href="https://github.com/p-ranav/pprint">pprint</a><br><a href="https://github.com/JustWhit3/ptc-print">ptc-print</a></p><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p><a href="https://github.com/eliaskosunen/scnlib">scnlib</a></p><h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p><a href="https://github.com/fmtlib/fmt">fmt</a><br><a href="https://github.com/mpaland/printf">printf</a><br><a href="https://github.com/c42f/tinyformat">tinyformat</a></p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p><a href="https://github.com/gabime/spdlog">spdlog</a><br><a href="https://github.com/MengRao/fmtlog">fmtlog</a><br><a href="https://github.com/morganstanley/binlog">binlog</a><br><a href="https://github.com/armink/EasyLogger">EasyLogger</a><br><a href="https://github.com/rxi/log.c">log.c</a><br><a href="https://github.com/emilk/loguru">loguru</a><br><a href="https://github.com/abumq/easyloggingpp">easyloggingpp</a><br><a href="https://github.com/google/glog">glog</a><br><a href="https://github.com/odygrd/quill">quill</a><br><a href="https://github.com/PlatformLab/NanoLog">NanoLog</a><br><a href="https://github.com/log4cplus/log4cplus">log4cplus</a></p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p><a href="https://github.com/microsoft/proxy">proxy</a><br><a href="https://github.com/Manu343726/ctti">ctti</a></p><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>object - ownership-shared version of std::any and std::function and more std::<br><a href="https://github.com/huangqinjin/object">object</a></p><h2 id="sigslot"><a href="#sigslot" class="headerlink" title="sigslot"></a>sigslot</h2><p><a href="https://github.com/fr00b0/nod">nod</a><br><a href="https://github.com/palacaze/sigslot">sigslot</a><br><a href="https://github.com/jeffomatic/jl_signal">jl_signal</a><br><a href="https://github.com/NoAvailableAlias/signal-slot-benchmarks">signal-slot-benchmarks</a><br><a href="https://github.com/libsigcplusplus/libsigcplusplus">libsigcplusplus</a></p><h2 id="network"><a href="#network" class="headerlink" title="network"></a>network</h2><p><a href="https://github.com/chenshuo/muduo">muduo</a><br><a href="https://github.com/esnet/iperf">iperf3</a><br><a href="https://github.com/ngtcp2/nghttp3">nghttp3</a><br>Bare libuv bindings for lua<br><a href="https://github.com/luvit/luv">luv</a><br>tiny HTTP parser written in C<br><a href="https://github.com/h2o/picohttpparser">picohttpparser</a><br><a href="https://github.com/drogonframework/drogon">drogon</a><br><a href="https://github.com/yedf2/handy">handy</a><br><a href="https://github.com/Ybalrid/kissnet">kissnet</a></p><h2 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h2><p><a href="https://github.com/OpenVPN/openvpn">openvpn</a></p><h2 id="http-client"><a href="#http-client" class="headerlink" title="http client"></a>http client</h2><p><a href="https://github.com/zanllp/sion">sion</a><br><a href="https://github.com/guimauveb/tinyDLM">tinyDLM</a><br><a href="https://github.com/jbaldwin/liblifthttp">liblifthttp</a> -&gt; Benchmark<br><a href="https://github.com/caozhiyi/CppNet">CppNet</a><br><a href="https://github.com/cpp-netlib/cpp-netlib">cpp-netlib</a><br><a href="https://github.com/mrtazz/restclient-cpp">restclient-cpp</a><br><a href="https://github.com/yhirose/cpp-httplib">cpp-httplib</a><br><a href="https://github.com/libcpr/cpr">cpr</a><br><a href="https://github.com/elnormous/HTTPRequest">HTTPRequest</a><br><a href="https://github.com/aria2/aria2">aria2</a><br><a href="https://github.com/erickutcher/httpdownloader">httpdownloader</a> -&gt; iocp<br><a href="https://github.com/reagent/http">http</a><br><a href="https://github.com/HISONA/https_client">https_client</a></p><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p><a href="https://github.com/uNetworking/uWebSockets">uWebSockets</a><br><a href="https://github.com/zaphoyd/websocketpp">websocketpp</a><br><a href="https://github.com/mortzdk/Websocket">Websocket</a><br><a href="https://github.com/tatsuhiro-t/wslay">wslay</a><br><a href="https://github.com/uNetworking/uSockets">uSockets</a></p><h2 id="http-server"><a href="#http-server" class="headerlink" title="http server"></a>http server</h2><p><a href="https://github.com/EZLippi/Tinyhttpd">Tinyhttpd</a><br><a href="https://github.com/cesanta/mongoose">mongoose</a><br><a href="https://github.com/eidheim/Simple-Web-Server">Simple-Web-Server</a><br><a href="https://github.com/matt-42/lithium">lithium</a><br><a href="https://github.com/addisonElliott/HttpServer">HttpServer</a> -&gt; Qt5<br><a href="https://github.com/code4wt/toyhttpd">toyhttpd</a><br><a href="https://github.com/parachvte/libuv-httpserver">libuv-httpserver</a><br><a href="https://github.com/qt/qthttpserver">qthttpserver</a> -&gt; Qt Extension: Qt HTTP Server<br><a href="https://github.com/peters/libuv-http">libuv-http</a><br><a href="https://github.com/lonost404/AsyncHTTPClient-cpp">AsyncHTTPClient-cpp</a></p><p><a href="https://github.com/alibaba/tengine">tengine</a> -&gt; nginx<br><a href="https://github.com/h2o/h2o">h2o</a></p><h2 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h2><p><a href="https://github.com/luohaha/Chinese-uvbook">Chinese-uvbook</a><br><a href="https://github.com/nikhilm/uvbook">uvbook</a><br><a href="https://github.com/litesync/uv_callback">uv_callback</a><br><a href="https://github.com/brizzbane/uvcurl">uvcurl</a></p><h2 id="downloader"><a href="#downloader" class="headerlink" title="downloader"></a>downloader</h2><p><a href="https://github.com/logikaljay/mget">mget</a></p><h2 id="http-parser"><a href="#http-parser" class="headerlink" title="http parser"></a>http parser</h2><p><a href="https://github.com/nodejs/http-parser">http-parser</a></p><h2 id="Website-Copier-x2F-Downloader"><a href="#Website-Copier-x2F-Downloader" class="headerlink" title="Website Copier&#x2F;Downloader"></a>Website Copier&#x2F;Downloader</h2><p><a href="https://github.com/xroche/httrack">httrack</a><br><a href="https://github.com/rockdaboot/wget2">wget2</a></p><h2 id="web-framework"><a href="#web-framework" class="headerlink" title="web framework"></a>web framework</h2><p><a href="https://github.com/ipkn/crow">crow</a><br><a href="https://github.com/civetweb/civetweb">civetweb</a><br><a href="https://github.com/emweb/wt">wt</a><br><a href="https://github.com/cutelyst/cutelyst">cutelyst</a> -&gt; Qt</p><h2 id="http-benchmarking"><a href="#http-benchmarking" class="headerlink" title="http benchmarking"></a>http benchmarking</h2><p><a href="https://github.com/wg/wrk">wrk</a><br><a href="https://github.com/rakyll/hey">hey</a><br><a href="https://github.com/apigee/apib">apib</a><br><a href="https://github.com/httperf/httperf">httperf</a><br><a href="https://github.com/codesenberg/bombardier">bombardier</a> -&gt; go<br><a href="https://github.com/hatoo/oha">oha</a> -&gt; rust<br><a href="https://github.com/denji/awesome-http-benchmark">awesome-http-benchmark</a></p><h2 id="http-Proxy"><a href="#http-Proxy" class="headerlink" title="http Proxy"></a>http Proxy</h2><p><a href="https://github.com/mitmproxy/mitmproxy">mitmproxy</a></p><h2 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h2><p><a href="https://github.com/emcrisostomo/fswatch">fswatch</a><br><a href="https://github.com/SpartanJ/efsw">efsw</a><br><a href="https://github.com/lipk/dirwatch">dirwatch</a><br><a href="https://github.com/santoru/filewatcher">filewatcher</a> -&gt; macOS audit<br><a href="https://github.com/libinotify-kqueue/libinotify-kqueue">libinotify-kqueue</a><br><a href="https://github.com/nowsecure/fsmon">fsmon</a></p><h2 id="gnustep"><a href="#gnustep" class="headerlink" title="gnustep"></a>gnustep</h2><p><a href="https://github.com/gnustep/tools-windows-msvc">tools-windows-msvc</a></p><h2 id="dtrace"><a href="#dtrace" class="headerlink" title="dtrace"></a>dtrace</h2><p>可编译的 macOS DTrace<br><a href="https://github.com/longv2go/dtrace">dtrace</a></p><h2 id="profiler"><a href="#profiler" class="headerlink" title="profiler"></a>profiler</h2><p><a href="https://github.com/gperftools/gperftools">gperftools</a><br><a href="https://github.com/tyoma/micro-profiler">micro-profiler</a><br><a href="https://github.com/botman99/AeonProfiler">AeonProfiler</a><br><a href="https://github.com/Donpedro13/etwprof">etwprof</a><br><a href="https://github.com/xwlan/dprofiler">dprofiler</a><br><a href="https://github.com/google/UIforETW">UIforETW</a><br><a href="https://github.com/VerySleepy/verysleepy">verysleepy</a><br><a href="https://github.com/CedricGuillemet/libProfiler">libProfiler</a><br><a href="https://github.com/yse/easy_profiler">easy_profiler</a><br><a href="https://github.com/Viladoman/SeeProfiler">SeeProfiler</a><br><a href="https://github.com/wolfpld/tracy">tracy</a> -&gt; Frame profiler<br><a href="https://github.com/google/orbit">orbit</a> -&gt; C&#x2F;C++ Performance Profiler[Doing]<br><a href="https://github.com/plasma-umass/coz">coz</a> Coz: Causal Profiling </p><h2 id="memory-profiler"><a href="#memory-profiler" class="headerlink" title="memory profiler"></a>memory profiler</h2><p><a href="https://github.com/milostosic/MTuner">MTuner</a></p><h2 id="heap-profiler"><a href="#heap-profiler" class="headerlink" title="heap profiler"></a>heap profiler</h2><p>Memoro: A Detailed Heap Profiler<br><a href="https://github.com/epfl-vlsc/memoro">memoro</a><br><a href="https://github.com/KDE/heaptrack">heaptrack</a></p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p><a href="https://github.com/max0x7ba/atomic_queue">atomic_queue</a><br><a href="https://github.com/cameron314/concurrentqueue">concurrentqueue</a><br><a href="https://github.com/MengRao/WFMPMC">WFMPMC</a><br><a href="https://github.com/rigtorp/SPSCQueue">SPSCQueue</a><br><a href="https://github.com/rigtorp/MPMCQueue">MPMCQueue</a><br><a href="https://github.com/ornerylawn/channel">channel</a><br><a href="https://github.com/dbittman/waitfree-mpsc-queue">waitfree-mpsc-queue</a></p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p><a href="https://github.com/realtimechris/jsonifier">jsonifier</a><br><a href="https://github.com/stephenberry/glaze">glaze</a><br><a href="https://github.com/ibireme/yyjson">yyjson</a><br><a href="https://github.com/DaveGamble/cJSON">cJSON</a><br><a href="https://github.com/nbsdx/SimpleJSON">SimpleJSON</a><br><a href="https://github.com/open-source-parsers/jsoncpp">jsoncpp</a><br><a href="https://github.com/nlohmann/json">json</a><br><a href="https://github.com/json-c/json-c">json-c</a><br><a href="https://github.com/akheron/jansson">jansson</a><br><a href="https://github.com/ultrajson/ultrajson">ultrajson</a><br><a href="https://github.com/sheredom/json.h">json.h</a><br><a href="https://github.com/libstud/libstud-json">libstud-json</a><br><a href="https://github.com/skeeto/pdjson">pdjson</a><br><a href="https://github.com/Tencent/rapidjson">rapidjson</a><br><a href="https://github.com/zserge/jsmn">jsmn</a><br><a href="https://github.com/Alexander-Eager/JsonDataTree">JsonDataTree</a> -&gt; Qt<br><a href="https://github.com/d4v3y/bisonJsonParser">bisonJsonParser</a><br><a href="https://github.com/miloyip/json-tutorial">json-tutorial</a></p><h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p><a href="https://github.com/zeux/pugixml">pugixml</a><br><a href="https://github.com/apache/xerces-c">xerces-c</a><br><a href="https://github.com/libexpat/libexpat">libexpat</a><br><a href="https://github.com/timniederhausen/rapidxml">rapidxml</a><br><a href="https://github.com/leethomason/tinyxml2">tinyxml2</a></p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p><a href="https://github.com/csstidy-c/csstidy">csstidy</a></p><h2 id="uri"><a href="#uri" class="headerlink" title="uri"></a>uri</h2><p><a href="https://github.com/uriparser/uriparser">uriparser</a></p><h2 id="plist"><a href="#plist" class="headerlink" title="plist"></a>plist</h2><p><a href="https://github.com/libimobiledevice/libplist">libplist</a></p><h2 id="xlsx"><a href="#xlsx" class="headerlink" title="xlsx"></a>xlsx</h2><p><a href="https://github.com/tfussell/xlnt">xlnt</a></p><h2 id="toml"><a href="#toml" class="headerlink" title="toml"></a>toml</h2><p><a href="https://github.com/marzer/tomlplusplus">tomlplusplus</a></p><h2 id="cbor"><a href="#cbor" class="headerlink" title="cbor"></a>cbor</h2><p><a href="https://github.com/intel/tinycbor">tinycbor</a></p><h2 id="dirent"><a href="#dirent" class="headerlink" title="dirent"></a>dirent</h2><p><a href="https://github.com/cxong/tinydir">tinydir</a></p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p><a href="https://github.com/htacg/tidy-html5">tidy-html5</a><br><a href="https://github.com/wbhart/mpir">mpir</a><br><a href="https://github.com/Berrysoft/CppHtml">CppHtml</a><br><a href="https://github.com/lexborisov/myhtml">myhtml</a><br><a href="https://github.com/litehtml/litehtml">litehtml</a><br><a href="https://github.com/lexborisov/benchmark-html-parsers">benchmark-html-parsers</a><br><a href="https://github.com/lexbor/lexbor">lexbor</a><br><a href="https://github.com/cloudflare/lol-html">lol-html</a><br><a href="https://github.com/y21/tl">tl</a></p><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p><a href="https://github.com/coin-au-carre/datetimepp">datetimepp</a><br><a href="https://github.com/nicolaspanel/momentcpp">momentcpp</a><br><a href="https://github.com/HowardHinnant/date">date</a><br><a href="https://github.com/google/cctz">cctz</a></p><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><p><a href="https://github.com/mity/md4c">md4c</a><br><a href="https://github.com/commonmark/cmark">cmark</a></p><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p><a href="https://github.com/jbeder/yaml-cpp">yaml-cpp</a></p><h2 id="robotstxt"><a href="#robotstxt" class="headerlink" title="robotstxt"></a>robotstxt</h2><p><a href="https://github.com/google/robotstxt">robotstxt</a></p><h2 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h2><p><a href="https://github.com/ivmai/libatomic_ops">libatomic_ops</a></p><h2 id="thread-pool"><a href="#thread-pool" class="headerlink" title="thread pool"></a>thread pool</h2><p><a href="https://github.com/bshoshany/thread-pool">thread-pool</a><br><a href="https://github.com/lzpong/threadpool">threadpool</a><br><a href="https://github.com/mbrossard/threadpool">threadpool</a><br><a href="https://github.com/progschj/ThreadPool">ThreadPool</a><br><a href="https://github.com/Pithikos/C-Thread-Pool">C-Thread-Pool</a><br>Portable (POSIX&#x2F;Windows&#x2F;Emscripten) thread pool for C&#x2F;C++<br><a href="https://github.com/Maratyszcza/pthreadpool">pthreadpool</a><br><a href="https://github.com/inkooboo/thread-pool-cpp">thread-pool-cpp</a><br><a href="https://github.com/romch007/simplethreadpool">simplethreadpool</a></p><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p><a href="https://github.com/GerHobbelt/pthread-win32">pthread-win32</a></p><h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><p><a href="https://github.com/anydream/SharedReadWriteLock">SharedReadWriteLock</a></p><h2 id="lockfree"><a href="#lockfree" class="headerlink" title="lockfree"></a>lockfree</h2><p><a href="https://github.com/rigtorp/awesome-lockfree">awesome-lockfree</a><br>A lock-free, wait-free, event-driven, cross-platform, thread pool-backed asynchronous execution library in C++.<br><a href="https://github.com/sayan-chaliha/cyan">cyan</a></p><h2 id="pipe-viewer"><a href="#pipe-viewer" class="headerlink" title="pipe viewer"></a>pipe viewer</h2><p><a href="https://github.com/a-j-wood/pv">pv</a></p><h2 id="C-11-爬虫"><a href="#C-11-爬虫" class="headerlink" title="C++11 爬虫"></a>C++11 爬虫</h2><p><a href="https://github.com/xinan/ParallelWebCrawler">ParallelWebCrawler</a><br><a href="https://github.com/mayushengmusic/tinyspider">tinyspider</a><br><a href="https://github.com/10gic/Crawler">Crawler</a></p><h2 id="rc-is-rust-in-c"><a href="#rc-is-rust-in-c" class="headerlink" title="rc is rust in c++"></a>rc is rust in c++</h2><p><a href="https://github.com/zxlxz/sfc">https://github.com/zxlxz/sfc</a></p><h2 id="dependency-injection"><a href="#dependency-injection" class="headerlink" title="dependency injection"></a>dependency injection</h2><p><a href="https://github.com/boost-ext/di">di</a><br><a href="https://github.com/google/fruit">fruit</a></p><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>[dmalloc](<a href="https://github.com/j256/dmalloc">https://github.com/j256/dmalloc</a><br><a href="https://github.com/struct/isoalloc">isoalloc</a><br><a href="https://github.com/jemalloc/jemalloc">jemalloc</a><br><a href="https://github.com/microsoft/mimalloc">mimalloc</a><br><a href="https://github.com/microsoft/snmalloc">snmalloc</a><br><a href="https://github.com/mjansson/rpmalloc">rpmalloc</a><br><a href="https://github.com/mjansson/rpmalloc-benchmark">rpmalloc-benchmark</a></p><h2 id="ipc"><a href="#ipc" class="headerlink" title="ipc"></a>ipc</h2><p>C++ IPC Library: A high-performance inter-process communication using shared memory on Linux&#x2F;Windows.<br><a href="https://github.com/mutouyun/cpp-ipc">cpp-ipc</a><br><a href="https://github.com/nickbjohnson4224/fastpub">fastpub</a><br><a href="https://github.com/cloudtoid/interprocess">interprocess</a><br><a href="https://github.com/pcdv/jocket">jocket</a></p><h2 id="DAG-x2F-Scheduler"><a href="#DAG-x2F-Scheduler" class="headerlink" title="DAG&#x2F;Scheduler"></a>DAG&#x2F;Scheduler</h2><p><a href="https://github.com/sogou/workflow">workflow</a><br><a href="https://github.com/taskflow/taskflow">taskflow</a><br><a href="https://github.com/actor-framework/actor-framework">actor-framework</a><br><a href="https://github.com/Tastyep/TaskManager">TaskManager</a><br><a href="https://github.com/SergeyMakeev/TaskScheduler">TaskScheduler</a><br><a href="https://github.com/galois-advertising/gparallel">gparallel</a><br><a href="https://github.com/ChunelFeng/CGraph">CGraph</a><br><a href="https://github.com/whenever5225/GraphANNS">GraphANNS</a><br><a href="https://github.com/YACLib/YACLib">YACLib</a><br><a href="https://github.com/ConorWilliams/libfork">libfork</a><br><a href="https://github.com/jrmadsen/PTL">PTL</a><br><a href="https://github.com/dougbinks/enkiTS">enkiTS</a><br><a href="https://github.com/concurrencykit/ck">ck</a><br><a href="https://github.com/meirwah/awesome-workflow-engines">awesome-workflow-engines</a><br><a href="https://github.com/fastflow/fastflow">fastflow</a></p><h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><p><a href="https://github.com/libuv/libuv">libuv</a> &lt;- <a href="http://cvs.schmorp.de/libev/">libev</a><br><a href="https://github.com/libevent/libevent">libevent</a><br><a href="https://github.com/ithewei/libhv">libhv</a><br><a href="https://github.com/piscisaureus/wepoll">wepoll</a> -&gt; wepoll: fast epoll for windows<br><a href="https://github.com/Qihoo360/evpp">evpp</a><br><a href="https://github.com/fredrikwidlund/libreactor">libreactor</a><br><a href="https://github.com/frol/libuv-vs-rustmio">libuv-vs-rustmio</a><br><a href="https://github.com/sourcey/libsourcey">libsourcey</a><br><a href="https://github.com/plenluno/libnode">libnode</a><br><a href="https://github.com/skypjack/uvw">uvw</a><br><a href="https://github.com/kindy/libeio">libeio</a><br><a href="https://github.com/kazuho/picoev">picoev</a><br><a href="https://github.com/chriskohlhoff/asio">asio</a><br><a href="https://github.com/d5/node.native">node.native</a><br><a href="https://github.com/mheily/libkqueue">libkqueue</a></p><h2 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h2><p><a href="https://github.com/kkos/oniguruma">oniguruma</a><br><a href="https://github.com/google/re2">re2</a><br><a href="https://github.com/laurikari/tre">tre</a><br><a href="https://github.com/intel/hyperscan">hyperscan</a><br><a href="https://github.com/Genivia/RE-flex">RE-flex</a><br><a href="https://github.com/leezh/nrex">nrex</a><br><a href="https://github.com/deinernstjetzt/mregexp">mregexp</a><br><a href="https://github.com/microsoft/BlingFire">BlingFire</a></p><h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><p><a href="https://github.com/tboox/tbox">tbox</a><br><a href="https://github.com/idealvin/coost">coost</a><br><a href="https://github.com/pocoproject/poco">poco</a><br><a href="https://github.com/stefanocasazza/ULib">ULib</a><br><a href="https://github.com/saprykin/plibsys">plibsys</a><br><a href="https://github.com/koanlogic/libu">libu</a></p><h2 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h2><p><a href="https://github.com/attractivechaos/klib">klib</a><br><a href="https://github.com/recp/cglm">cglm</a><br><a href="https://github.com/msteinbeck/tinyspline">tinyspline</a><br><a href="https://github.com/tronkko/dirent">dirent</a><br><a href="https://github.com/Blosc/c-blosc">c-blosc</a><br><a href="https://github.com/apache/apr">apr</a><br><a href="https://github.com/aheck/clib">clib</a><br><a href="https://github.com/eteran/cpp-utilities">cpp-utilities</a><br><a href="https://github.com/rofl0r/libulz">libulz</a><br><a href="https://github.com/stlab/libraries">libraries</a><br><a href="https://github.com/zpl-c/zpl">zpl</a><br><a href="https://github.com/zyantific/zycore-c">zycore-c</a><br><a href="https://github.com/Snaipe/libcsptr">libcsptr</a><br><a href="https://github.com/corehacker/ch-cpp-utils">ch-cpp-utils</a><br><a href="https://github.com/weltermann17/just-like-java">just-like-java</a><br><a href="https://github.com/zelenski/stanford-cpp-library">stanford-cpp-library</a><br><a href="https://github.com/martinmoene/observer-ptr-lite">observer-ptr-lite</a><br>std::tuple like methods for user defined types without any macro or boilerplate code<br><a href="https://github.com/boostorg/pfr">pfr</a><br><a href="https://github.com/facebook/folly">folly</a><br><a href="https://github.com/MarcDirven/cpp-lazy">cpp-lazy</a><br><a href="https://github.com/TartanLlama/expected">expected</a><br><a href="https://github.com/jiutian-mao/ByteArray">ByteArray</a></p><h2 id="gpu-x2F-vector"><a href="#gpu-x2F-vector" class="headerlink" title="gpu&#x2F;vector"></a>gpu&#x2F;vector</h2><p><a href="https://github.com/arrayfire/arrayfire">arrayfire</a><br><a href="https://github.com/ddemidov/vexcl">vexcl</a><br><a href="https://github.com/KomputeProject/kompute">kompute</a></p><h2 id="sdf"><a href="#sdf" class="headerlink" title="sdf"></a>sdf</h2><p><a href="https://github.com/Chlumsky/msdfgen">msdfgen</a></p><h2 id="matrix-x2F-math"><a href="#matrix-x2F-math" class="headerlink" title="matrix&#x2F;math"></a>matrix&#x2F;math</h2><p><a href="https://github.com/google/gemmlowp">gemmlowp</a><br><a href="https://github.com/conradsnicta/armadillo-code">armadillo-code</a><br><a href="https://github.com/pytorch/FBGEMM">FBGEMM</a><br><a href="https://github.com/mlpack/ensmallen">ensmallen</a><br><a href="https://github.com/JuliaMath/openlibm">openlibm</a></p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p><a href="https://github.com/ericniebler/range-v3">range-v3</a><br><a href="https://github.com/ryanhaining/cppitertools">cppitertools</a><br><a href="https://github.com/tcbrindle/utf_ranges">utf_ranges</a><br><a href="https://github.com/tcbrindle/flux">flux</a><br>Flux provides a broadly equivalent feature set to C++20 Ranges, but uses a slightly different model based around cursors rather than iterators. </p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p><a href="https://github.com/ReactiveX/RxCpp">RxCpp</a><br><a href="https://github.com/victimsnino/ReactivePlusPlus">ReactivePlusPlus</a></p><h2 id="utf"><a href="#utf" class="headerlink" title="utf"></a>utf</h2><p><a href="https://github.com/nemtrif/utfcpp">utfcpp</a><br><a href="https://github.com/franktea/utf8pp">utf8pp</a><br><a href="https://github.com/qzminsky/utf8cpp">utf8cpp</a><br><a href="https://github.com/DuffsDevice/tiny-utf8">tiny-utf8</a><br><a href="https://github.com/sheredom/utf8.h">utf8.h</a><br><a href="https://github.com/JuliaStrings/utf8proc">utf8proc</a></p><h2 id="concurrent"><a href="#concurrent" class="headerlink" title="concurrent"></a>concurrent</h2><p><a href="https://github.com/guruofquality/Theron">Theron</a><br><a href="https://github.com/KDE/threadweaver">threadweaver</a> -&gt; Qt<br><a href="https://github.com/Naios/continuable">continuable</a><br><a href="https://github.com/Amanieu/asyncplusplus">asyncplusplus</a><br><a href="https://github.com/paulrademacher/asyncpp">asyncpp</a><br><a href="https://github.com/alibaba/async_simple">async_simple</a><br><a href="https://github.com/David-Haim/concurrencpp">concurrencpp</a><br>Continuation Queues: Embeddable asynchronous networking, threading, and notification framework for Lua on Unix.<br><a href="https://github.com/wahern/cqueues">cqueues</a><br><a href="https://github.com/benlau/asyncfuture">asyncfuture</a> -&gt; QFuture<br><a href="https://github.com/mpoeter/xenium">xenium</a> A C++ library providing various concurrent data structures and reclamation schemes. </p><h2 id="async-io"><a href="#async-io" class="headerlink" title="async io"></a>async io</h2><p><a href="https://github.com/BenBrock/async_io">async_io</a><br><a href="https://github.com/netcan/asyncio">asyncio</a><br><a href="https://github.com/pauldotknopf/AsyncStreamCopyCPP">AsyncStreamCopyCPP</a><br><a href="https://github.com/ozgurhepsag/Parallel-File-Copy-Asynchronous-IO">Parallel-File-Copy-Asynchronous-IO</a></p><h2 id="high-precision"><a href="#high-precision" class="headerlink" title="high precision"></a>high precision</h2><p><a href="https://github.com/fredrik-johansson/arb">arb</a></p><h2 id="bloom-filter"><a href="#bloom-filter" class="headerlink" title="bloom filter"></a>bloom filter</h2><p><a href="https://github.com/mavam/libbf">libbf</a></p><h2 id="expr-parse"><a href="#expr-parse" class="headerlink" title="expr parse"></a>expr parse</h2><p><a href="https://github.com/cparse/cparse">cparse</a><br><a href="https://github.com/erstan/ceval">ceval</a><br><a href="https://github.com/ArashPartow/exprtk">exprtk</a></p><h2 id="memory-leak"><a href="#memory-leak" class="headerlink" title="memory leak"></a>memory leak</h2><p><a href="https://github.com/KindDragon/vld">vld</a> -&gt; msvc</p><h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h2><p><a href="https://github.com/sheredom/ubench.h">ubench.h</a><br><a href="https://github.com/chronoxor/CppBenchmark">CppBenchmark</a><br><a href="https://github.com/google/benchmark">benchmark</a></p><h2 id="unit-test"><a href="#unit-test" class="headerlink" title="unit test"></a>unit test</h2><p><a href="https://github.com/catchorg/Catch2">Catch2</a><br><a href="https://github.com/boost-ext/ut">ut</a><br><a href="https://github.com/eranpeer/FakeIt">FakeIt</a><br><a href="https://github.com/doctest/doctest">doctest</a><br><a href="https://github.com/sheredom/utest.h">utest.h</a><br><a href="https://github.com/rollbear/trompeloeil">trompeloeil</a><br><a href="https://github.com/cpputest/cpputest">cpputest</a><br><a href="https://github.com/coolxv/cpp-stub">cpp-stub</a><br><a href="https://github.com/ThrowTheSwitch/Unity">Unity</a></p><h2 id="compress"><a href="#compress" class="headerlink" title="compress"></a>compress</h2><p><a href="https://github.com/google/snappy">snappy</a><br><a href="https://github.com/ebiggers/libdeflate">libdeflate</a><br><a href="https://github.com/rikyoz/bit7z">bit7z</a><br><a href="https://github.com/getnamo/7zip-cpp">7zip-cpp</a><br><a href="https://github.com/gdraheim/zziplib">zziplib</a><br><a href="https://github.com/rudi-cilibrasi/zlibcomplete">zlibcomplete</a><br><a href="https://github.com/richgel999/miniz">miniz</a><br><a href="https://github.com/kuba--/zip">zip</a><br><a href="https://github.com/madler/zlib">zlib</a><br><a href="https://github.com/libarchive/libarchive">libarchive</a><br><a href="https://github.com/dushibaiyu/QLib7z">QLib7z</a></p><h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p><a href="https://github.com/sheredom/subprocess.h">subprocess.h</a><br><a href="https://github.com/DaanDeMeyer/reproc">reproc</a></p><h2 id="semantic-version"><a href="#semantic-version" class="headerlink" title="semantic version"></a>semantic version</h2><p><a href="https://github.com/uael/sv">sv</a></p><h2 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h2><p><a href="https://github.com/arximboldi/immer">immer</a></p><h2 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h2><p><a href="https://github.com/intel/tinycrypt">tinycrypt</a><br><a href="https://github.com/libtom/libtomcrypt">libtomcrypt</a></p><h2 id="ssl"><a href="#ssl" class="headerlink" title="ssl"></a>ssl</h2><p><a href="https://github.com/wolfSSL/wolfssl">wolfssl</a><br><a href="https://github.com/jedisct1/libsodium">libsodium</a></p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p><a href="https://github.com/rhash/RHash">RHash</a><br><a href="https://github.com/stbrumme/hash-library">hash-library</a><br><a href="https://github.com/Cyan4973/xxHash">xxHash</a></p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p><a href="https://github.com/protocolbuffers/protobuf">protobuf</a><br><a href="https://github.com/rpclib/rpclib">rpclib</a><br><a href="https://github.com/grpc/grpc">grpc</a><br><a href="https://github.com/Gooddbird/tinyrpc">tinyrpc</a></p><h2 id="cmdline"><a href="#cmdline" class="headerlink" title="cmdline"></a>cmdline</h2><p><a href="https://github.com/p-ranav/indicators">indicators</a><br><a href="https://github.com/ArthurSonzogni/FTXUI">FTXUI</a><br><a href="https://github.com/ikalnytskyi/termcolor">termcolor</a><br><a href="https://github.com/p-ranav/tabulate">tabulate</a> Table Maker for Modern C++<br><a href="https://github.com/CLIUtils/CLI11">CLI11</a><br><a href="https://github.com/daniele77/cli">cli</a><br><a href="https://github.com/bfgroup/Lyra">Lyra</a><br><a href="https://github.com/p-ranav/argparse">argparse</a><br><a href="https://github.com/nsf/termbox">termbox</a><br><a href="https://github.com/p-ranav/structopt">structopt</a><br><a href="https://github.com/libimobiledevice-win32/getopt">getopt</a> -&gt; win32<br><a href="https://github.com/agauniyal/rang">rang</a><br><a href="https://github.com/jarro2783/cxxopts">cxxopts</a></p><h2 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h2><p><a href="https://github.com/daanx/isocline">isocline</a><br><a href="https://github.com/antirez/linenoise">linenoise</a><br><a href="https://github.com/troglobit/editline">editline</a></p><h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><p><a href="https://github.com/graeme-hill/crossguid">crossguid</a></p><h2 id="branchless"><a href="#branchless" class="headerlink" title="branchless"></a>branchless</h2><p><a href="https://github.com/skeeto/branchless-utf8">branchless</a></p><h2 id="error-handling"><a href="#error-handling" class="headerlink" title="error handling"></a>error handling</h2><p><a href="https://github.com/lamarrr/STX">STX</a></p><h2 id="ipc-1"><a href="#ipc-1" class="headerlink" title="ipc"></a>ipc</h2><p><a href="https://github.com/eclipse-ecal/ecal">ecal</a><br><a href="https://github.com/bus1/dbus-broker">dbus-broker</a> -&gt; epoll<br><a href="https://github.com/Squadrick/shadesmar">shadesmar</a> shared memory<br><a href="https://github.com/dept2/CuteIPC">CuteIPC</a> -&gt; Qt<br><a href="https://github.com/abashandy-github/shm_queue">shm_queue</a><br><a href="https://github.com/AjaxAueleke/machipc">machipc</a><br><a href="https://github.com/jrmuizel/mach-ipc-bench">mach-ipc-bench</a></p><h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><p><a href="https://github.com/gabrieleara/librdtsc">librdtsc</a><br><a href="https://github.com/mattreecebentley/plf_nanotimer">plf_nanotimer</a></p><h2 id="crash-x2F-report"><a href="#crash-x2F-report" class="headerlink" title="crash&#x2F;report"></a>crash&#x2F;report</h2><p><a href="https://github.com/google/breakpad">breakpad</a><br><a href="https://github.com/chromium/crashpad">crashpad</a><br><a href="https://github.com/buzzySmile/qBreakpad">qBreakpad</a><br><a href="https://github.com/getsentry/sentry">sentry</a><br><a href="https://github.com/getsentry/sentry-native">sentry-native</a><br><a href="https://github.com/188080501/JQSentry">JQSentry</a> -&gt; Qt</p><h2 id="clipboard-x2F-pasteboard"><a href="#clipboard-x2F-pasteboard" class="headerlink" title="clipboard&#x2F;pasteboard"></a>clipboard&#x2F;pasteboard</h2><p><a href="https://github.com/dacap/clip">clip</a></p><h2 id="database"><a href="#database" class="headerlink" title="database"></a>database</h2><p><a href="https://github.com/redis/redis">redis</a><br><a href="https://github.com/memcached/memcached">memcached</a><br><a href="https://github.com/sqlite/sqlite">sqlite</a><br><a href="https://github.com/sqlcipher/sqlcipher">sqlcipher</a><br><a href="https://github.com/facebook/rocksdb">rocksdb</a><br><a href="https://github.com/dragonflydb/dragonfly">dragonfly</a><br><a href="https://github.com/redis/hiredis">hiredis</a><br><a href="https://github.com/SOCI/soci">soci</a><br><a href="https://github.com/google/leveldb">leveldb</a><br><a href="https://github.com/microsoft/FASTER">FASTER</a></p><h2 id="message-queue"><a href="#message-queue" class="headerlink" title="message queue"></a>message queue</h2><p><a href="https://github.com/confluentinc/librdkafka">librdkafka</a><br><a href="https://github.com/zeromq/libzmq">libzmq</a><br><a href="https://github.com/pfent/L5RDMA">L5RDMA</a></p><h2 id="spell-check"><a href="#spell-check" class="headerlink" title="spell check"></a>spell check</h2><p><a href="https://github.com/hunspell/hunspell">hunspell</a></p><h2 id="media"><a href="#media" class="headerlink" title="media"></a>media</h2><p><a href="https://github.com/FFmpeg/FFmpeg">FFmpeg</a><br><a href="https://github.com/ShiftMediaProject/FFmpeg">FFmpeg</a> -&gt; msvc<br><a href="https://github.com/mltframework/mlt">mlt</a><br><a href="https://github.com/ZLMediaKit/ZLMediaKit">ZLMediaKit</a></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/nothings/stb">stb</a><br><a href="https://github.com/mattiasgustavsson/libs">libs</a><br><a href="https://github.com/mborgerding/kissfft">kissfft</a><br><a href="https://github.com/libsndfile/libsndfile">libsndfile</a><br><a href="https://github.com/facebook/redex">redex</a><br><a href="https://github.com/martinmoene/span-lite">span-lite</a></p><h2 id="disassembly-x2F-reverse-engineering"><a href="#disassembly-x2F-reverse-engineering" class="headerlink" title="disassembly&#x2F;reverse engineering"></a>disassembly&#x2F;reverse engineering</h2><p><a href="https://github.com/radareorg/radare2">radare2</a><br><a href="https://github.com/capstone-engine/capstone">capstone</a><br><a href="https://github.com/rr-debugger/rr">rr</a></p><h2 id="c-runtime"><a href="#c-runtime" class="headerlink" title="c runtime"></a>c runtime</h2><p><a href="https://github.com/jart/cosmopolitan">cosmopolitan</a></p><h2 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h2><p><a href="https://github.com/rswier/c4">c4</a><br><a href="https://github.com/drh/lcc">lcc</a><br><a href="https://github.com/TinyCC/tinycc">tinycc</a><br><a href="https://github.com/rui314/chibicc">chibicc</a><br><a href="https://github.com/bellard/quickjs">quickjs</a><br><a href="https://github.com/quickjs-zh/QuickJS">QuickJS</a><br><a href="https://github.com/marcobambini/gravity">gravity</a><br><a href="https://github.com/tj/luna">luna</a><br><a href="https://github.com/ThakeeNathees/pocketlang">pocketlang</a><br><a href="https://github.com/ring-lang/ring">ring</a><br><a href="https://github.com/c3lang/c3c">c3c</a><br><a href="https://github.com/asvitkine/ccons">ccons</a> Interactive Console for the C Programming Language<br><a href="https://github.com/vovkos/jancy">jancy</a></p><h2 id="browser"><a href="#browser" class="headerlink" title="browser"></a>browser</h2><p><a href="https://github.com/chromiumembedded/cef">cef</a><br><a href="https://github.com/WebKit/WebKit">WebKit</a><br><a href="https://github.com/qt/qtwebengine">qtwebengine</a><br><a href="https://github.com/keyou/chromium_demo">chromium_demo</a></p><h2 id="reflection"><a href="#reflection" class="headerlink" title="reflection"></a>reflection</h2><p><a href="https://github.com/rttrorg/rttr">rttr</a></p><h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p><a href="https://github.com/mackron/miniaudio">miniaudio</a><br><a href="https://github.com/kcat/openal-soft">openal-sof</a></p><h2 id="subtitle"><a href="#subtitle" class="headerlink" title="subtitle"></a>subtitle</h2><p><a href="https://github.com/Blitzker/assfiltermod">assfiltermod</a><br><a href="https://github.com/sorayuki/VSFilterMod">VSFilterMod</a><br><a href="https://github.com/pinterf/xy-VSFilter">xy-VSFilter</a><br><a href="https://github.com/Aegisub/assdraw">assdraw</a></p><h2 id="binary-x2F-parser"><a href="#binary-x2F-parser" class="headerlink" title="binary&#x2F;parser"></a>binary&#x2F;parser</h2><p><a href="https://github.com/trailofbits/pe-parse">pe-parse</a><br><a href="https://github.com/lief-project/LIEF">LIEF</a><br><a href="https://github.com/liteserver/binn">binn</a><br><a href="https://github.com/gitGNU/objconv">objconv</a></p><h2 id="call-stack"><a href="#call-stack" class="headerlink" title="call stack"></a>call stack</h2><p><a href="https://github.com/JochenKalmbach/StackWalker">StackWalker</a><br><a href="https://github.com/bombela/backward-cpp">backward-cpp</a><br><a href="https://github.com/ianlancetaylor/libbacktrace">libbacktrace</a></p><h2 id="calculator"><a href="#calculator" class="headerlink" title="calculator"></a>calculator</h2><p><a href="https://github.com/silverscania/BabelCalc">BabelCalc</a><br><a href="https://github.com/fcomeraz/simpleCalcParserLemon">simpleCalcParserLemon</a><br><a href="https://github.com/Qalculate/libqalculate">libqalculate</a><br><a href="https://github.com/conao3/rpcalc.y">rpcalc.y</a></p><h2 id="build-tool"><a href="#build-tool" class="headerlink" title="build tool"></a>build tool</h2><p><a href="https://github.com/PhilipDeegan/maiken">maiken</a><br><a href="https://github.com/fastbuild/fastbuild">fastbuild</a><br><a href="https://github.com/ninja-build/ninja">ninja</a><br><a href="https://github.com/build2/build2">build2</a><br><a href="https://github.com/xmake-io/xmake-repo">xmake-repo</a><br><a href="https://github.com/o-lim/generate-ninja">generate-ninja</a><br><a href="https://github.com/per-gron/shuriken">shuriken</a><br><a href="https://github.com/rburchell/tbs">tbs</a><br><a href="https://github.com/ImageMetrics/clcache">clcache</a></p><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p><a href="https://github.com/create-dmg/create-dmg">create-dmg</a></p><h2 id="file-system-x2F-path"><a href="#file-system-x2F-path" class="headerlink" title="file system&#x2F;path"></a>file system&#x2F;path</h2><p><a href="https://github.com/p-ranav/glob">glob</a></p><h2 id="hash-x2F-container"><a href="#hash-x2F-container" class="headerlink" title="hash&#x2F;container"></a>hash&#x2F;container</h2><p><a href="https://github.com/serge-sans-paille/frozen">frozen</a><br><a href="https://github.com/rmind/rhashmap">rhashmap</a><br><a href="https://github.com/frozenca/BTree">BTree</a><br><a href="https://github.com/greg7mdp/sparsepp">sparsepp</a><br><a href="https://github.com/kshk123/hashMap">hashMap</a><br><a href="https://github.com/Tessil/ordered-map">ordered-map</a><br><a href="https://github.com/martinus/robin-hood-hashing">robin-hood-hashing</a><br><a href="https://github.com/sparsehash/sparsehash">sparsehash</a><br><a href="https://github.com/mattreecebentley/plf_colony">plf_colony</a></p><h2 id="magic-x2F-enum"><a href="#magic-x2F-enum" class="headerlink" title="magic&#x2F;enum"></a>magic&#x2F;enum</h2><p><a href="https://github.com/cdeln/cpp_enum_set">cpp_enum_set</a><br><a href="https://github.com/Neargye/magic_enum">magic_enum</a></p><h2 id="static-checker"><a href="#static-checker" class="headerlink" title="static checker"></a>static checker</h2><p><a href="https://github.com/cpplint/cpplint">cpplint</a></p><h2 id="text-token"><a href="#text-token" class="headerlink" title="text token"></a>text token</h2><p><a href="https://github.com/google/sentencepiece">sentencepiece</a></p><h2 id="stl"><a href="#stl" class="headerlink" title="stl"></a>stl</h2><p><a href="https://github.com/electronicarts/EASTL">EASTL</a><br><a href="https://github.com/zsmj2017/MiniSTL">MiniSTL</a><br><a href="https://github.com/microsoft/STL">STL</a></p><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p><a href="https://github.com/imneme/pcg-c">pcg-c</a><br><a href="https://github.com/mattreecebentley/plf_rand">plf_rand</a><br><a href="https://github.com/effolkronium/random">random</a><br><a href="https://github.com/lyrahgames/pxart">pxart</a></p><h2 id="repl"><a href="#repl" class="headerlink" title="repl"></a>repl</h2><p><a href="https://github.com/onqtam/rcrl">rcrl</a></p><h2 id="password-x2F-hash"><a href="#password-x2F-hash" class="headerlink" title="password&#x2F;hash"></a>password&#x2F;hash</h2><p><a href="https://github.com/hashcat/hashcat">hashcat</a><br><a href="https://github.com/P-H-C/phc-winner-argon2">phc-winner-argon2</a></p><h2 id="converage"><a href="#converage" class="headerlink" title="converage"></a>converage</h2><p><a href="https://github.com/OpenCppCoverage/OpenCppCoverage">OpenCppCoverage</a><br><a href="https://github.com/hooddanielc/llvm-coverage-viewer">llvm-coverage-viewer</a></p><h2 id="installer"><a href="#installer" class="headerlink" title="installer"></a>installer</h2><p><a href="https://github.com/kichik/nsis">nsis</a><br><a href="https://github.com/jrsoftware/issrc">inno setup</a></p><h2 id="symbolic"><a href="#symbolic" class="headerlink" title="symbolic"></a>symbolic</h2><p><a href="https://github.com/certik/SymbolicCpp">SymbolicCpp</a></p><h2 id="float-x2F-divide"><a href="#float-x2F-divide" class="headerlink" title="float&#x2F;divide"></a>float&#x2F;divide</h2><p><a href="https://github.com/ridiculousfish/libdivide">libdivide</a></p><h2 id="float-x2F-conversion"><a href="#float-x2F-conversion" class="headerlink" title="float&#x2F;conversion"></a>float&#x2F;conversion</h2><p><a href="https://github.com/lemire/fast_double_parser">fast_double_parser</a></p><h2 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h2><p><a href="https://github.com/alitrack/mman-win32">mman-win32</a></p><h2 id="cpuinfo"><a href="#cpuinfo" class="headerlink" title="cpuinfo"></a>cpuinfo</h2><p><a href="https://github.com/pytorch/cpuinfo">cpuinfo</a><br><a href="https://github.com/google/cpu_features">cpu_features</a><br><a href="https://github.com/evaneliasyoung/cspec">cspec</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simd库</title>
      <link href="/2023/06/25/simd-lib/"/>
      <url>/2023/06/25/simd-lib/</url>
      
        <content type="html"><![CDATA[<h2 id="simd库"><a href="#simd库" class="headerlink" title="simd库"></a>simd库</h2><p><a href="https://github.com/ermig1979/Simd">simd</a><br><a href="https://github.com/simd-everywhere/simde">simde</a><br>使用 -&gt; obs-studio (libobs)<br><a href="https://github.com/google/highway">highway</a><br><a href="https://github.com/p12tic/libsimdpp">libsimdpp</a><br><a href="https://github.com/xtensor-stack/xsimd">xsimd</a><br><a href="https://github.com/scoopr/vectorial">vectorial</a><br><a href="https://github.com/asmjit/asmjit">asmjit</a></p><h2 id="SIMD"><a href="#SIMD" class="headerlink" title="SIMD"></a>SIMD</h2><p>hyperscan&#x2F;pcre2(jit)&#x2F;re-flex -&gt; regex<br>simdjson&#x2F;sonic -&gt; json<br>myhtml&#x2F;html5ever? -&gt; html<br>blend2d -&gt; painter2d -&gt; asmjit<br>ispc -&gt; program</p><h2 id="用simd加速的库"><a href="#用simd加速的库" class="headerlink" title="用simd加速的库"></a>用simd加速的库</h2><p>zlib<br><a href="https://github.com/zlib-ng/zlib-ng">zlib-ng</a><br>image scale<br><a href="https://github.com/avaneev/avir">avir</a><br>json<br><a href="https://github.com/simdjson/simdjson">simdjson</a><br><a href="https://github.com/bytedance/sonic-cpp">sonic-cpp</a><br>jpeg<br><a href="https://github.com/libjpeg-turbo/libjpeg-turbo">libjpeg-turbo</a><br>base64<br><a href="https://github.com/powturbo/Turbo-Base64">Turbo-Base64</a><br>rand<br><a href="https://github.com/lyrahgames/pxart/">pxart</a><br>pixel&#x2F;image<br><a href="https://gitlab.freedesktop.org/pixman/pixman">pixman</a><br>utf<br><a href="https://github.com/simdutf/simdutf">simdutf</a><br>distance&#x2F;vector similarity<br><a href="https://github.com/ashvardanian/SimSIMD">simsimd</a><br>sort<br><a href="https://github.com/intel/x86-simd-sort">x86-simd-sort</a></p><h2 id="simd-learn"><a href="#simd-learn" class="headerlink" title="simd learn"></a>simd learn</h2><p><a href="https://zhuanlan.zhihu.com/p/556131141">SIMD指令简单上手指南</a><br><a href="https://gitee.com/clover1994/cpplib/tree/master/simd">https://gitee.com/clover1994/cpplib/tree/master/simd</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pragma loop(no_vector) -&gt; msvc</span></span><br><span class="line">-fno-vectorize -&gt; clang</span><br><span class="line">gcc ??</span><br></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.intrinsics.arm">https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.intrinsics.arm</a><br><a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.intrinsics.x86">https://learn.microsoft.com/zh-cn/dotnet/api/system.runtime.intrinsics.x86</a></p><h2 id="simd-with-multithread"><a href="#simd-with-multithread" class="headerlink" title="simd with multithread"></a>simd with multithread</h2><p>TensorFlow.js 后端更新：利用 SIMD 和多线程大幅增强开发效率<br><a href="https://zhuanlan.zhihu.com/p/268062021">https://zhuanlan.zhihu.com/p/268062021</a><br>webassembly-simd-multithreading-performance-gains<br><a href="https://www.infoq.com/articles/webassembly-simd-multithreading-performance-gains">https://www.infoq.com/articles/webassembly-simd-multithreading-performance-gains</a></p><h2 id="simd-in-qt"><a href="#simd-in-qt" class="headerlink" title="simd in qt"></a>simd in qt</h2><p>qstring&#x2F;qstrinconverter -&gt; sse2&#x2F;neon<br>qdrawhelper -&gt; sse2&#x2F;avx2&#x2F;neon&#x2F;mips<br>qimage -&gt; sse2&#x2F;neon&#x2F;mips<br>3rdparty -&gt; pcre2&#x2F;png</p>]]></content>
      
      
      
        <tags>
            
            <tag> simd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图形相关</title>
      <link href="/2023/06/25/graphic-note/"/>
      <url>/2023/06/25/graphic-note/</url>
      
        <content type="html"><![CDATA[<h2 id="opengl"><a href="#opengl" class="headerlink" title="opengl"></a>opengl</h2><p><a href="https://github.com/markkilgard/glut">glut</a><br><a href="https://github.com/cginternals/glbinding">glbinding</a><br><a href="https://github.com/Dav1dde/glad">glad</a><br><a href="https://github.com/stevenlovegrove/Pangolin">Pangolin</a><br><a href="https://github.com/htmlboss/OpenGL-Renderer">OpenGL-Renderer</a><br><a href="https://github.com/tksuoran/erhe">erhe</a><br><a href="https://github.com/rougier/freetype-gl">freetype-gl</a><br><a href="https://github.com/memononen/libtess2">libtess2</a><br><a href="https://github.com/opengl-tutorials/ogl">ogl</a> -&gt; <a href="http://www.opengl-tutorial.org/">www.opengl-tutorial.org</a><br><a href="https://github.com/AlloSphere-Research-Group/GLV">GLV</a><br><a href="https://github.com/raysan5/raylib">raylib</a><br><a href="https://github.com/raysan5/raygui">raygui</a><br><a href="https://github.com/skywind3000/mini3d">mini3d</a><br><a href="https://github.com/zhangbaochong/Tiny3D">Tiny3D</a><br><a href="https://github.com/sdlwlxf1/tinyEngine">tinyEngine</a><br><a href="https://github.com/FreeGLUTProject/freeglut">freeglut</a><br><a href="https://github.com/openglredbook/examples">examples</a> Examples for the OpenGL Red Book<br><a href="https://github.com/KhronosGroup/OpenGL-Registry">OpenGL-Registry</a><br><a href="https://github.com/JoeyDeVries/LearnOpenGL">LearnOpenGL</a><br><a href="https://github.com/LearnOpenGL-CN/LearnOpenGL-CN">LearnOpenGL-CN</a><br><a href="https://github.com/gamedev-net/nehe-opengl">nehe-opengl</a><br><a href="https://github.com/tyt2y3/vaserenderer">vaserenderer</a><br><a href="https://github.com/patriciogonzalezvivo/ada">ada</a><br><a href="https://github.com/sweetdark/openglex">openglex</a><br><a href="https://github.com/AidanDelaney/antons_opengl_tutorials_book">antons_opengl_tutorials_book</a><br><a href="https://github.com/capnramses/antons_opengl_tutorials_book">antons_opengl_tutorials_book</a><br><a href="https://github.com/zuck/opengl-examples">opengl-examples</a><br><a href="https://github.com/Polytonic/Glitter">Glitter</a><br><a href="https://github.com/SaschaWillems/glCapsViewer">glCapsViewer</a><br><a href="https://github.com/LukasBanana/LLGL">LLGL</a><br><a href="https://github.com/duilib/duilib">duilib</a></p><h2 id="vulkan"><a href="#vulkan" class="headerlink" title="vulkan"></a>vulkan</h2><p><a href="https://github.com/zeux/volk">volk</a><br><a href="https://github.com/jpbruyere/vkvg">vkvg</a><br><a href="https://github.com/mackron/vkbind">vkbind</a><br><a href="https://github.com/montychen/VulkanTutorial_GLFW">VulkanTutorial_GLFW</a><br><a href="https://github.com/SaschaWillems/Vulkan">Vulkan</a></p><h2 id="metal"><a href="#metal" class="headerlink" title="metal"></a>metal</h2><p><a href="https://github.com/tlareywi/MetalMinimal">MetalMinimal</a></p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p><a href="https://github.com/septag/rizz">rizz</a><br><a href="https://github.com/floooh/pacman.c">pacman.c</a><br><a href="https://github.com/misakamm/StandardTetris">StandardTetris</a><br><a href="https://github.com/sp4cerat/Game-GUI">Game-GUI</a></p><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p><a href="https://github.com/ssloy/tinyrenderer">tinyrenderer</a><br><a href="https://github.com/MethanePowered/MethaneKit">MethaneKit</a><br><a href="https://github.com/google/filament">filament</a><br><a href="https://github.com/pygame/pygame">pygame</a><br><a href="https://github.com/NadirRoGue/RenderEngine">RenderEngine</a><br><a href="https://github.com/o3de/o3de">o3de</a><br><a href="https://github.com/matrixcascade/PainterEngine">PainterEngine</a><br><a href="https://github.com/libsdl-org/SDL">SDL</a><br><a href="https://github.com/syoyo/lucille">lucille</a><br><a href="https://github.com/mortennobel/SimpleRenderEngine">SimpleRenderEngine</a><br><a href="https://github.com/nfrechette/rtm">rtm</a><br><a href="https://github.com/ramakarl/just_math">just_math</a><br><a href="https://github.com/intel/xess">xess</a> Intel(R) Xe Super Sampling (XeSS)</p><h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p><a href="https://github.com/apitrace/apitrace">apitrace</a><br><a href="https://github.com/baldurk/renderdoc">renderdoc</a></p><h2 id="rendergraph"><a href="#rendergraph" class="headerlink" title="rendergraph"></a>rendergraph</h2><p><a href="https://github.com/DragonJoker/RenderGraph">RenderGraph</a><br><a href="https://github.com/martty/vuk">vuk</a></p><h2 id="visulize"><a href="#visulize" class="headerlink" title="visulize"></a>visulize</h2><p><a href="https://github.com/datoviz/datoviz">datoviz</a><br><a href="https://github.com/vispy/vispy">vispy</a><br><a href="https://github.com/glumpy/glumpy">glumpy</a><br><a href="https://github.com/sciapp/gr">gr</a><br><a href="https://github.com/sciplot/sciplot">sciplot</a><br><a href="https://github.com/epezent/implot">implot</a><br><a href="https://github.com/isl-org/Open3D">Open3D</a><br><a href="https://github.com/trase-cpp/trase">trase</a><br><a href="https://github.com/svn2github/MathGL">MathGL</a><br><a href="https://github.com/sintegrial/qwtplot3d">qwtplot3d</a><br><a href="https://github.com/alandefreitas/matplotplusplus">matplotplusplus</a><br><a href="https://github.com/jonatanolofsson/cpplot">cpplot</a><br><a href="https://github.com/madplotlib/madplotlib">madplotlib</a><br><a href="https://github.com/imxxw/XCustomPlot">XCustomPlot</a><br><a href="https://github.com/jkriege2/JKQtPlotter">JKQtPlotter</a><br><a href="https://github.com/Slicer/SlicerGitSVNArchive">Slicer</a></p><h2 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h2><p><a href="https://github.com/hilgenberg/cplot">cplot</a><br><a href="https://github.com/gnuplot/gnuplot">gnuplot</a></p><h2 id="skia"><a href="#skia" class="headerlink" title="skia"></a>skia</h2><p><a href="https://github.com/google/skia">skia</a><br><a href="https://github.com/skui-org/skia">skia</a> -&gt; cmake<br>nodejs<br><a href="https://github.com/samizdatco/skia-canvas">skia-canvas</a><br>ui<br><a href="https://github.com/skui-org/skui">skui</a><br>qt<br><a href="https://github.com/QtSkia/QtSkia">QtSkia</a></p><h2 id="libgdiplus"><a href="#libgdiplus" class="headerlink" title="libgdiplus"></a>libgdiplus</h2><p><a href="https://github.com/mono/libgdiplus">libgdiplus</a></p><h2 id="blend2d"><a href="#blend2d" class="headerlink" title="blend2d"></a>blend2d</h2><p><a href="https://github.com/blend2d/blend2d">blend2d</a></p><h2 id="vector-graphic"><a href="#vector-graphic" class="headerlink" title="vector graphic"></a>vector graphic</h2><p><a href="https://github.com/tyoma/agge">agge</a><br><a href="https://github.com/alibaba/GCanvas">GCanvas</a><br><a href="https://github.com/thorvg/thorvg">thorvg</a><br><a href="https://github.com/intel/fastuidraw">fastuidraw</a><br><a href="https://github.com/styluslabs/nanovgXC">nanovgXC</a><br><a href="https://github.com/jrmuizel/glitter-paths">glitter-paths</a><br><a href="https://github.com/ezhangle/caskbench">caskbench</a> A Cairo&#x2F;Skia Benchmark<br><a href="https://github.com/jpbruyere/vgperf">vgperf</a> Vector graphic libraries performances tests<br><a href="https://github.com/fjolliton/cl-vectors">cl-vectors</a><br><a href="https://github.com/rougier/gl-agg">gl-agg</a><br><a href="https://github.com/ghaerr/agg-2.6">agg-2.6</a></p><h2 id="rust"><a href="#rust" class="headerlink" title="rust"></a>rust</h2><p><a href="https://github.com/servo/pathfinder">pathfinder</a><br><a href="https://github.com/linebender/piet">piet</a><br><a href="https://github.com/google/forma">forma</a><br><a href="https://github.com/linebender/vello">vello</a></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/ericjang/awesome-graphics">awesome-graphics</a><br><a href="https://github.com/PacktPublishing/3D-Graphics-Rendering-Cookbook">3D-Graphics-Rendering-Cookbook</a><br><a href="https://github.com/PacktPublishing/OpenGL-Build-High-Performance-Graphics">OpenGL-Build-High-Performance-Graphics</a><br><a href="https://github.com/KimuraRyo/BSDFProcessor">BSDFProcessor</a><br><a href="https://github.com/Madsy/Computer-Graphics-Explained">Computer-Graphics-Explained</a><br><a href="https://github.com/slackmoehrle/Computer-Graphics-Through-OpenGL-2nd">Computer-Graphics-Through-OpenGL-2nd</a><br><a href="https://github.com/xuhongxu96/Computer-Graphics-Course">Computer-Graphics-Course</a><br><a href="https://github.com/danginsburg/opengles3-book">opengles3-book</a><br><a href="https://github.com/OpenGLInsights/OpenGLInsightsCode">OpenGLInsightsCode</a><br><a href="https://github.com/dtrebilco/PreMulAlpha">PreMulAlpha</a></p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p><a href="https://github.com/cycfi/artist">artist</a><br><a href="https://github.com/cycfi/elements">elements</a><br><a href="https://github.com/floooh/sokol">sokol</a><br><a href="https://github.com/edubart/sokol_gp">sokol_gp</a></p><h2 id="html-x2F-css"><a href="#html-x2F-css" class="headerlink" title="html&#x2F;css"></a>html&#x2F;css</h2><p><a href="https://github.com/libRocket/libRocket">libRocket</a><br><a href="https://github.com/mikke89/RmlUi">RmlUi</a></p><h2 id="gui"><a href="#gui" class="headerlink" title="gui"></a>gui</h2><p><a href="https://github.com/Immediate-Mode-UI/Nuklear">Nuklear</a><br><a href="https://github.com/hoffstadt/DearPyGui">DearPyGui</a><br><a href="https://github.com/rxi/microui">microui</a><br><a href="https://github.com/cnjinhao/nana">nana</a><br><a href="https://github.com/wjakob/nanogui">nanogui</a><br><a href="https://github.com/libui-ng/libui-ng">libui-ng</a><br><a href="https://github.com/ocornut/imgui">imgui</a><br><a href="https://github.com/lc-soft/LCUI">LCUI</a><br><a href="https://github.com/nodegui/nodegui">nodegui</a><br><a href="https://github.com/wxWidgets/wxWidgets">wxWidgets</a><br><a href="https://github.com/MyGUI/mygui">mygui</a><br><a href="https://github.com/samhocevar/portable-file-dialogs">portable-file-dialogs</a><br><a href="https://github.com/HsiangHo/XUIKit">XUIKit</a><br><a href="https://github.com/gnustep/libs-gui">libs-gui</a><br><a href="https://github.com/slp/gui-dirty">gui-dirty</a><br><a href="https://github.com/AshampooSystems/boden">boden</a></p><h2 id="yue"><a href="#yue" class="headerlink" title="yue"></a>yue</h2><p><a href="https://github.com/yue/yue-sample-apps">yue-sample-apps</a><br><a href="https://github.com/yue/node-gui">node-gui</a><br><a href="https://github.com/yue/yackage">yackage</a><br><a href="https://github.com/yue/yue">yue</a><br><a href="https://github.com/yue/yode">yode</a><br><a href="https://github.com/nodegui/qodejs">qodejs</a><br><a href="https://github.com/facebook/yoga">yoga</a></p><h2 id="winui"><a href="#winui" class="headerlink" title="winui"></a>winui</h2><p><a href="https://github.com/microsoft/microsoft-ui-xaml">microsoft-ui-xaml</a><br><a href="https://github.com/sotanakamura/winui3-without-xaml">winui3-without-xaml</a></p><h2 id="direct-ui"><a href="#direct-ui" class="headerlink" title="direct ui"></a>direct ui</h2><p><a href="https://github.com/mrluanma/directui">directui</a><br><a href="https://github.com/lvgl/lvgl">lvgl</a><br><a href="https://github.com/jameskeane/directui">directui</a></p><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p><a href="https://github.com/sammycage/lunasvg">lunasvg</a><br><a href="https://github.com/rev22/svgl">svgl</a><br><a href="https://github.com/cppfw/svgren">svgren</a><br><a href="https://github.com/memononen/nanosvg">nanosvg</a></p><h2 id="math-3d"><a href="#math-3d" class="headerlink" title="math 3d"></a>math 3d</h2><p><a href="https://github.com/parisolab/mathmod">mathmod</a></p><h2 id="typography-排版"><a href="#typography-排版" class="headerlink" title="typography(排版)"></a>typography(排版)</h2><p><a href="https://github.com/harfbuzz/harfbuzz">harfbuzz</a></p><h2 id="math-ml"><a href="#math-ml" class="headerlink" title="math ml"></a>math ml</h2><p><a href="https://github.com/Nilis640/formulator-mathml">formulator-mathml</a><br><a href="https://github.com/khaledhosny/libmathview">libmathview</a><br><a href="https://github.com/soh534/mathML-grapher">mathML-grapher</a><br><a href="https://github.com/uwerat/qwt-mml-dev">qwt-mml-dev</a></p><h2 id="cocoa"><a href="#cocoa" class="headerlink" title="cocoa"></a>cocoa</h2><p><a href="https://github.com/NikolaGrujic91/Cocoa-macOS-Examples">Cocoa-macOS-Examples</a><br><a href="https://github.com/Kampfgnom/QINAppStoreMainWindow">QINAppStoreMainWindow</a><br><a href="https://github.com/indragiek/INAppStoreWindow">INAppStoreWindow</a><br><a href="https://github.com/mockingbot/mb_colorpicker_desktop_qt">mb_colorpicker_desktop_qt</a><br><a href="https://github.com/dsward2/macSVG">macSVG</a><br><a href="https://github.com/msorvig/qt-macos-examples">qt-macos-examples</a><br><a href="https://github.com/preble/Cocoa4eSolutions">Cocoa4eSolutions</a><br><a href="https://github.com/renmin/ChineseFontTestOC">ChineseFontTestOC</a><br><a href="https://github.com/typcn/chromium-tabs">chromium-tabs</a><br><a href="https://github.com/MysteryRan/RanWeChat">RanWeChat</a></p><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p><a href="https://github.com/DentonW/DevIL">DevIL</a><br><a href="https://github.com/emoon/minifb">minifb</a><br><a href="https://github.com/coin3d/simage">simage</a><br><a href="https://github.com/OpenImageIO/oiio">oiio</a><br><a href="https://github.com/python-pillow/Pillow">Pillow</a><br><a href="https://github.com/GreycLab/CImg">CImg</a><br><a href="https://github.com/epatel/SOIL">SOIL</a><br><a href="https://github.com/kbranigan/Simple-OpenGL-Image-Library">Simple-OpenGL-Image-Library</a><br><a href="https://github.com/tjko/jpeginfo">jpeginfo</a><br><a href="https://github.com/HappySeaFox/sail">sail</a><br><a href="https://github.com/sekrit-twc/zimg">zimg</a><br><a href="https://github.com/vcforge/WriteAnimatedGIF">WriteAnimatedGIF</a><br><a href="https://github.com/schani/rwimg">rwimg</a><br><a href="https://github.com/lvandeve/lodepng">lodepng</a><br><a href="https://github.com/bcampbell/impy">impy</a></p><h2 id="shortcut"><a href="#shortcut" class="headerlink" title="shortcut"></a>shortcut</h2><p><a href="https://github.com/hluk/qxtglobalshortcut">qxtglobalshortcut</a></p><h2 id="grammer-x2F-creative"><a href="#grammer-x2F-creative" class="headerlink" title="grammer&#x2F;creative"></a>grammer&#x2F;creative</h2><p><a href="https://github.com/MtnViewJohn/context-free">context-free</a><br><a href="https://github.com/vectorgraphics/asymptote">asymptote</a><br><a href="https://github.com/cinder/Cinder">Cinder</a><br><a href="https://github.com/ivansafrin/Polycode">Polycode</a></p><h2 id="ocr"><a href="#ocr" class="headerlink" title="ocr"></a>ocr</h2><p><a href="https://github.com/tesseract-ocr/tesseract">tesseract</a></p><h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><p><a href="https://github.com/kivy/kivy">kivy</a><br><a href="https://github.com/gongminmin/KlayGE">KlayGE</a><br><a href="https://github.com/juce-framework/JUCE">JUCE</a></p><h2 id="graph"><a href="#graph" class="headerlink" title="graph"></a>graph</h2><p>Force-directed graph layout with Fruchterman-Reingold<br><a href="https://github.com/olvb/nodesoup">nodesoup</a><br><a href="https://github.com/igraph/igraph">igraph</a></p><h2 id="paint"><a href="#paint" class="headerlink" title="paint"></a>paint</h2><p><a href="https://github.com/floooh/sokol">sokol</a><br><a href="https://github.com/rbrich/xcikit">xcikit</a></p><h2 id="basic-x2F-bgi-x2F-graphic-h"><a href="#basic-x2F-bgi-x2F-graphic-h" class="headerlink" title="basic&#x2F;bgi&#x2F;graphic.h"></a>basic&#x2F;bgi&#x2F;graphic.h</h2><p><a href="https://github.com/swornim00/libgraphics">libgraphics</a><br><a href="https://github.com/JulStrat/SDL_bgi">SDL_bgi</a><br><a href="https://github.com/cschladetsch/TurtleGraphics">TurtleGraphics</a><br><a href="https://github.com/royqh1979/raylib-drawing">raylib-drawing</a><br><a href="https://github.com/wysaid/xege">xege</a></p><h2 id="font"><a href="#font" class="headerlink" title="font"></a>font</h2><p><a href="https://github.com/ysc3839/FontMod">FontMod</a> Simple hook tool to change Win32 program font.<br><a href="https://github.com/memononen/fontstash">fontstash</a><br><a href="https://github.com/stipub/stixfonts">stixfonts</a><br><a href="https://github.com/aliftype/xits">xits</a></p><h2 id="math-render"><a href="#math-render" class="headerlink" title="math render"></a>math render</h2><p><a href="https://github.com/ForNeVeR/xaml-math">xaml-math</a></p><h2 id="shader"><a href="#shader" class="headerlink" title="shader"></a>shader</h2><p><a href="https://github.com/Rabbid76/graphics-snippets">graphics-snippets</a><br><a href="https://github.com/lettier/3d-game-shaders-for-beginners">3d-game-shaders-for-beginners</a><br><a href="https://github.com/patriciogonzalezvivo/glslViewer">glslViewer</a><br><a href="https://github.com/dfranx/SHADERed">SHADERed</a><br><a href="https://github.com/google/swiftshader">swiftshader</a><br><a href="https://github.com/patriciogonzalezvivo/glslCanvas">glslCanvas</a><br><a href="https://github.com/cdglabs/Shadershop">Shadershop</a><br><a href="https://github.com/patriciogonzalezvivo/thebookofshaders">thebookofshaders</a><br><a href="https://github.com/DragonJoker/ShaderWriter">ShaderWriter</a><br><a href="https://github.com/microsoft/ShaderConductor">ShaderConductor</a><br><a href="https://github.com/stevensona/shader-toy">shader-toy</a><br><a href="https://github.com/google/shaderc">shaderc</a></p><h2 id="shader-x2F-image-process"><a href="#shader-x2F-image-process" class="headerlink" title="shader&#x2F;image process"></a>shader&#x2F;image process</h2><p><a href="https://github.com/karlssonper/gpuip">gpuip</a><br><a href="https://github.com/goui/projetlibreopengl">projetlibreopengl</a><br><a href="https://github.com/davous267/OpenGL-ImageProcessing-shaders">OpenGL-ImageProcessing-shaders</a><br><a href="https://github.com/cromop/mOffscreenRendering">mOffscreenRendering</a><br><a href="https://github.com/piellardj/post-treatment-gpu">post-treatment-gpu</a><br><a href="https://github.com/madebyjeffrey/GrapheinPure">GrapheinPure</a><br><a href="https://github.com/jagregory/abrash-black-book">abrash-black-book</a> Graphics Programming Black Book</p><h2 id="geometry-x2F-triangle-meshes"><a href="#geometry-x2F-triangle-meshes" class="headerlink" title="geometry&#x2F;triangle meshes"></a>geometry&#x2F;triangle meshes</h2><p><a href="https://github.com/cnr-isti-vclab/vcglib">vcglib</a><br><a href="https://github.com/danfis/libccd">libccd</a><br><a href="https://github.com/libigl/libigl">libigl</a><br><a href="https://github.com/microsoft/Mesh-processing-library">Mesh-processing-library</a><br><a href="https://github.com/PixarAnimationStudios/OpenSubdiv">OpenSubdiv</a></p><h2 id="3d-volume"><a href="#3d-volume" class="headerlink" title="3d volume"></a>3d volume</h2><p><a href="https://github.com/AaronWatters/contourist">contourist</a><br><a href="https://github.com/mikolalysenko/mikolalysenko.github.com">mikolalysenko.github.com</a><br><a href="https://github.com/ericentin/marching_squares_cassini">marching_squares_cassini</a><br><a href="https://github.com/mikolalysenko/isosurface">isosurface</a><br><a href="https://github.com/lettier/isosurface">isosurface</a></p><h2 id="3d-model"><a href="#3d-model" class="headerlink" title="3d model"></a>3d model</h2><p><a href="https://github.com/assimp/assimp">assimp</a></p><h2 id="animate"><a href="#animate" class="headerlink" title="animate"></a>animate</h2><p><a href="https://github.com/Samsung/rlottie">rlottie</a></p><h2 id="physics"><a href="#physics" class="headerlink" title="physics"></a>physics</h2><p><a href="https://github.com/bulletphysics/bullet3">bullet3</a><br><a href="https://github.com/erincatto/box2d">box2d</a><br><a href="https://github.com/jrouwe/JoltPhysics">JoltPhysics</a></p><h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><p><a href="https://github.com/libharu/libharu">libharu</a><br><a href="https://github.com/sumatrapdfreader/sumatrapdf">sumatrapdf</a></p><h2 id="path-trace-x2F-ray-trace"><a href="#path-trace-x2F-ray-trace" class="headerlink" title="path trace&#x2F;ray trace"></a>path trace&#x2F;ray trace</h2><p><a href="https://github.com/sergcpp/Ray">Ray</a><br><a href="https://github.com/lighttransport/nanort">nanort</a><br><a href="https://github.com/ospray/ospray">ospray</a><br><a href="https://github.com/POV-Ray/povray">povray</a><br><a href="https://github.com/ssloy/tinyraytracer">tinyraytracer</a><br><a href="https://github.com/OpenPathGuidingLibrary/openpgl">openpgl</a></p>]]></content>
      
      
      <categories>
          
          <category> graphic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> graphic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake记录</title>
      <link href="/2023/06/25/cmake-note/"/>
      <url>/2023/06/25/cmake-note/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/toeb/cmakepp">cmakepp</a><br>代码格式化<br><a href="https://github.com/cheshirekow/cmake_format">cmake_format</a></p><p><a href="https://github.com/sakra/cotire">cotire</a><br><a href="https://github.com/microsoft/vcpkg">vcpkg</a><br><a href="https://github.com/cpm-cmake/CPM.cmake">CPM.cmake</a><br><a href="https://github.com/cmake-js/cmake-js">cmake-js</a><br><a href="https://github.com/cpp-pm/hunter">hunter</a><br><a href="https://github.com/district10/cmake-templates">cmake-templates</a><br><a href="https://github.com/nmgwddj/qt6-conan-cmake-sample">qt6-conan-cmake-sample</a></p><figure class="highlight sh"><figcaption><span>macos</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">curl -OL https://cmake.org/files/LatestRelease/cmake-3.23.1-macos10.10-universal.tar.gz</span><br><span class="line">tar xzf cmake*.tar.gz</span><br><span class="line"><span class="built_in">mv</span> cmake*/CMake.app /Applications</span><br><span class="line"><span class="built_in">rm</span> -rf cmake*</span><br><span class="line">sudo <span class="string">&quot;/Applications/CMake.app/Contents/bin/cmake-gui&quot;</span> --install</span><br></pre></td></tr></table></figure><h2 id="H。选项对CMake意味着什么？"><a href="#H。选项对CMake意味着什么？" class="headerlink" title="-H。选项对CMake意味着什么？"></a>-H。选项对CMake意味着什么？</h2><p><a href="https://www.codenong.com/31090821/">https://www.codenong.com/31090821/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频播放器</title>
      <link href="/2023/06/25/video-player/"/>
      <url>/2023/06/25/video-player/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/mpv-player/mpv">mpv</a><br><a href="https://github.com/iina/iina">iina</a><br><a href="https://github.com/smplayer-dev/smplayer">smplayer</a><br><a href="https://github.com/zaps166/QMPlay2">qmplay2</a><br><a href="https://github.com/bilibili/ijkplayer">ijkplayer</a><br><a href="https://github.com/OpenProgger/phonon-mpv">phonon-mpv</a></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/ithewei/hplayer">hplayer</a><br><a href="https://github.com/coslyk/moonplayer">moonplayer</a><br><a href="https://github.com/AVbin/AVbin">AVbin</a><br><a href="https://github.com/typcn/bilibili-mac-client">bilibili-mac-client</a><br><a href="https://github.com/sclavering/noirplayer">noirplayer</a></p><h2 id="learn"><a href="#learn" class="headerlink" title="learn"></a>learn</h2><p><a href="https://github.com/leixiaohua1020/simplest_media_play">simplest_media_play</a><br><a href="https://github.com/pockethook/player">player</a><br><a href="https://github.com/lnmcc/videoPlayer">videoPlayer</a><br><a href="https://github.com/aptakhin/video-player">video-player</a><br><a href="https://github.com/asahui/BiliLocal-OSX">BiliLocal-OSX</a><br><a href="https://github.com/AncientLysine/BiliLocal">BiliLocal</a><br><a href="https://github.com/chyxwzn/fplay">fplay</a></p><h2 id="encode-x2F-decode"><a href="#encode-x2F-decode" class="headerlink" title="encode&#x2F;decode"></a>encode&#x2F;decode</h2><p><a href="https://github.com/lieff/minih264">minih264</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> player </tag>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GrafEq记录</title>
      <link href="/2023/06/25/grafeq-note/"/>
      <url>/2023/06/25/grafeq-note/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.matrix67.com/blog/archives/4447">几个令人惊叹的函数图像</a><br><a href="https://zhuanlan.zhihu.com/p/450058787">浅谈二维函数作图</a><br><a href="https://www.luogu.com.cn/blog/UNVRS/GrafEq-Guide-for-use">上古绘图神器——GrafEq食用指北</a></p><h2 id="matlab实现"><a href="#matlab实现" class="headerlink" title="matlab实现"></a>matlab实现</h2><p><a href="https://blog.csdn.net/weixin_42943114/article/details/111059854">基于区间算法的像素函数绘图方法</a></p><h2 id="cpp实现"><a href="#cpp实现" class="headerlink" title="cpp实现"></a>cpp实现</h2><p><a href="https://github.com/maximsmol/Open-GraphEq">Open-GraphEq</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> grafeq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows上的DTrace</title>
      <link href="/2023/06/25/dtrace-on-windows/"/>
      <url>/2023/06/25/dtrace-on-windows/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/microsoft/DTrace-on-Windows">DTrace-on-Windows</a><br><a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/devtest/dtrace">Windows上的DTrace</a><br><a href="https://docs.microsoft.com/zh-cn/windows-hardware/drivers/devtest/dtrace-programming">DTrace编程</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>跟踪系统调用</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtrace -n &quot;syscall:::entry /execname == \&quot;notepad.exe\&quot;/ &#123;printf(\&quot;%s\&quot;,execname);&#125;&quot; -c notepad.exe</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dtrace </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像查看器</title>
      <link href="/2023/06/25/image-view/"/>
      <url>/2023/06/25/image-view/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/easymodo/qimgv">qimg</a><br><a href="https://github.com/nomacs/nomacs">nomacs</a><br><a href="https://github.com/AlienCowEatCake/ImageViewer">ImageViewer</a><br><a href="https://github.com/Wassimulator/CactusViewer">CactusViewer</a></p><h2 id="image-info"><a href="#image-info" class="headerlink" title="image info"></a>image info</h2><p><a href="https://github.com/xiaozhuai/imageinfo">imageinfo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> image </tag>
            
            <tag> viewer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法书籍</title>
      <link href="/2023/06/25/algo-book/"/>
      <url>/2023/06/25/algo-book/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/liuxinyu95/AlgoXY">算法新解</a><br><a href="https://weread.qq.com/web/bookDetail/fbf32b80715c0184fbff41f">算法图解</a> -&gt; <a href="https://github.com/egonSchiele/grokking_algorithms">源码</a></p><h2 id="鸢尾花书：从加减乘除到机器学习"><a href="#鸢尾花书：从加减乘除到机器学习" class="headerlink" title="鸢尾花书：从加减乘除到机器学习"></a>鸢尾花书：从加减乘除到机器学习</h2><p><a href="https://github.com/Visualize-ML/Book3_Elements-of-Mathematics">数学要素</a></p><p><a href="https://github.com/gzc/CLRS">CLRS</a></p><p><a href="https://github.com/kevin-wayne/algs4">algs4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> algo </tag>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习指南</title>
      <link href="/2023/06/25/cpp-learn/"/>
      <url>/2023/06/25/cpp-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="现代C"><a href="#现代C" class="headerlink" title="现代C++"></a>现代C++</h2><p><a href="https://changkun.de/modern-cpp/">现代C++教程</a><br><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/welcome-back-to-cpp-modern-cpp">欢迎回到C++</a><br><a href="https://www.zhihu.com/column/c_1645515166455435264">Modern C++学习笔记</a><br><a href="https://github.com/cpp-tutor/learnmoderncpp-articles">learnmoderncpp-articles</a><br><a href="https://github.com/AnthonyCalandra/modern-cpp-features">modern-cpp-features</a></p><h2 id="C-并发"><a href="#C-并发" class="headerlink" title="C++并发"></a>C++并发</h2><p><a href="https://nj.gitbooks.io/c/content/">C++并发编程实战</a><br><a href="https://paul.pub/cpp-concurrency/">C++并发编程</a><br><a href="https://downdemo.github.io/Cpp-Concurrency-in-Action-2ed/">C++并发编程实战 笔记</a><br><a href="https://zoucz.com/blog/2021/06/08/fbcfc460-c86d-11eb-9fe7-534bbf9f369d/">c++标准库：并发</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> any = std::<span class="built_in">async</span>([]()&#123;<span class="built_in">puts</span>(<span class="string">&quot;async any&quot;</span>);&#125;);</span><br><span class="line"><span class="keyword">auto</span> async = std::<span class="built_in">async</span>(std::launch::async, []()&#123;<span class="built_in">puts</span>(<span class="string">&quot;async async&quot;</span>);&#125;);</span><br><span class="line"><span class="keyword">auto</span> defer = std::<span class="built_in">async</span>(std::launch::deferred, []()&#123;<span class="built_in">puts</span>(<span class="string">&quot;async deferred&quot;</span>); &#125;);</span><br><span class="line">defer.<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/485011266">C++高性能编程笔记（第5讲 C++多线程）</a><br><a href="https://www.bennyhuo.com/book/cpp-coroutines/">渡劫C++协程</a> -&gt; <a href="https://github.com/bennyhuo/CppCoroutines">github</a><br><a href="https://github.com/parallel101/course">高性能并行编程与优化-课件</a><br><a href="https://github.com/AllenDowney/LittleBookOfSemaphores">LittleBookOfSemaphores</a> -&gt; 小信号量书</p><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><p><a href="https://paul.pub/cpp-date-time/">C++日期和时间编程</a></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="https://paul.pub/cpp-regex/">C++与正则表达式</a><br><a href="https://github.com/Lartu/cppregex">cppregex</a></p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><a href="https://github.com/liu-jianhao/Cpp-Design-Patterns">C++设计模式</a><br><a href="https://github.com/yogykwan/design-patterns-cpp">大话设计模式 C++实现</a><br><a href="https://github.com/ltimaginea/Design-Patterns">Design Patterns in Modern C++</a><br><a href="https://github.com/sftrabbit/CppPatterns-Patterns">CppPatterns-Patterns</a></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p><a href="https://weread.qq.com/web/bookDetail/e4d325f0718f6373e4dca29">Effective Debugging</a><br><a href="https://github.com/Celthi/effective-debugging-zh">effective-debugging-zh</a><br><a href="https://github.com/fengjixuchui/AdvancedWindowsDebugging">AdvancedWindowsDebugging</a></p><h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><p><a href="https://github.com/wuye9036/CppTemplateTutorial">CppTemplateTutorial</a></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><a href="https://github.com/fenbf/AwesomePerfCpp">AwesomePerfCpp</a><br><a href="https://github.com/intel/optimization-manual">optimization-manual</a><br><a href="https://github.com/mpw/iOS-macOS-performance">iOS-macOS-performance</a></p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p><a href="https://github.com/Kobzol/hardware-effects">hardware-effects</a></p><h2 id="安全编码"><a href="#安全编码" class="headerlink" title="安全编码"></a>安全编码</h2><p><a href="https://github.com/Qihoo360/safe-rules">360安全规则集合</a></p><h2 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h2><p><a href="https://github.com/zh-google-styleguide/zh-google-styleguide">Google开源项目风格指南</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p><a href="https://github.com/PacktPublishing/Cpp-Windows-Programming">Cpp-Windows-Programming</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><a href="https://github.com/geeeeeeeeek/git-recipes">git-recipes</a></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p><a href="https://github.com/applenob/Cpp_Primer_Practice">C++ Primer 中文版第5版学习仓库</a><br><a href="https://csdiy.wiki/">CS自学指南</a><br><a href="https://github.com/jobbole/awesome-cpp-cn">C++资源大全中文版</a><br><a href="https://github.com/rigtorp/awesome-modern-cpp">awesome-modern-cpp</a><br><a href="https://github.com/cpp-best-practices/cppbestpractices">cppbestpractices</a><br><a href="https://github.com/wangzheng0822/algo">数据结构和算法必知必会的50个代码实现</a><br><a href="https://www.hello-algo.com/">Hello算法</a><br>Code samples for C++ Concurrency in Action<br><a href="https://github.com/anthonywilliams/ccia_code_samples">ccia_code_samples</a><br><a href="https://github.com/huihut/interview">C&#x2F;C++ 技术面试</a><br><a href="https://github.com/isocpp/CppCoreGuidelines">CppCoreGuidelines</a><br><a href="https://github.com/microsoft/GSL">GSL</a><br><a href="https://github.com/pezy/CppPrimer">CppPrimer</a><br><a href="https://github.com/huangmingchuan/Cpp_Primer_Answers">Cpp_Primer_Answers</a><br><a href="https://github.com/jaege/Cpp-Primer-5th-Exercises">Cpp-Primer-5th-Exercises</a><br><a href="https://github.com/hunterzju/llvm-tutorial">llvm-tutorial</a><br><a href="https://github.com/Apress/cpp-standard-library-quick-reference">cpp-standard-library-quick-reference</a><br><a href="https://github.com/aherne/c-data-structures-api">c-data-structures-api</a><br><a href="https://github.com/fool2fish/dragon-book-exercise-answers">dragon-book-exercise-answers</a><br><a href="https://github.com/jaywcjlove/reference">快速参考备忘清单(速查表) </a><br><a href="https://github.com/jamesroutley/write-a-hash-table">write-a-hash-table</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-api使用</title>
      <link href="/2023/06/25/node-api/"/>
      <url>/2023/06/25/node-api/</url>
      
        <content type="html"><![CDATA[<h1 id="node-api使用"><a href="#node-api使用" class="headerlink" title="node-api使用"></a>node-api使用</h1><p><a href="https://github.com/nodejs/node-addon-api">https://github.com/nodejs/node-addon-api</a></p><h2 id="参考例子"><a href="#参考例子" class="headerlink" title="参考例子"></a>参考例子</h2><p><a href="https://github.com/nodejs/node-addon-examples">https://github.com/nodejs/node-addon-examples</a></p><blockquote><p>主要使用方式: node-gyp、cmake-js</p></blockquote><h2 id="macOS使用分析"><a href="#macOS使用分析" class="headerlink" title="macOS使用分析"></a>macOS使用分析</h2><figure class="highlight c"><figcaption><span>hello.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;node_api.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> napi_value <span class="title function_">Method</span><span class="params">(napi_env env, napi_callback_info info)</span> &#123;</span><br><span class="line">  napi_status status;</span><br><span class="line">  napi_value world;</span><br><span class="line">  status = napi_create_string_utf8(env, <span class="string">&quot;world&quot;</span>, <span class="number">5</span>, &amp;world);</span><br><span class="line">  assert(status == napi_ok);</span><br><span class="line">  <span class="keyword">return</span> world;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_NAPI_METHOD(name, func)                                        \</span></span><br><span class="line"><span class="meta">  &#123; name, 0, func, 0, 0, 0, napi_default, 0 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> napi_value <span class="title function_">Init</span><span class="params">(napi_env env, napi_value exports)</span> &#123;</span><br><span class="line">  napi_status status;</span><br><span class="line">  napi_property_descriptor desc = DECLARE_NAPI_METHOD(<span class="string">&quot;hello&quot;</span>, Method);</span><br><span class="line">  status = napi_define_properties(env, exports, <span class="number">1</span>, &amp;desc);</span><br><span class="line">  assert(status == napi_ok);</span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>hello.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addon = <span class="built_in">require</span>(<span class="string">&#x27;./hello.node&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(addon.<span class="title function_">hello</span>());</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brew install node</span></span><br><span class="line"><span class="comment"># clang -o hello.o hello.c  -I/opt/homebrew/include/node -c</span></span><br><span class="line">clang -c hello.c -I<span class="variable">$&#123;HOMEBREW_PREFIX&#125;</span>/include/node -o hello.o</span><br><span class="line">clang -undefined dynamic_lookup hello.o -o hello.node  </span><br><span class="line">node hello.js</span><br></pre></td></tr></table></figure><h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><p><a href="https://github.com/akab/electron-cpp">electron-cpp</a></p><p>写一个EventEmitter类，包含on,emit,off,once方法<br><a href="https://blog.csdn.net/rraxx/article/details/115064099">https://blog.csdn.net/rraxx/article/details/115064099</a></p><p>NAPI 开发 C++ Addon<br><a href="https://www.cnblogs.com/Asp1rant/p/14765222.html">https://www.cnblogs.com/Asp1rant/p/14765222.html</a></p><p><a href="https://github.com/nodejs/node-addon-examples.git">https://github.com/nodejs/node-addon-examples.git</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dispatch库使用</title>
      <link href="/2023/06/25/dispatch-note/"/>
      <url>/2023/06/25/dispatch-note/</url>
      
        <content type="html"><![CDATA[<h1 id="libdispatch"><a href="#libdispatch" class="headerlink" title="libdispatch"></a>libdispatch</h1><p>libdispatch主要用于Apple平台, 称为GCD。也可在其他平台使用。<br><a href="https://github.com/apple-oss-distributions/libdispatch">https://github.com/apple-oss-distributions/libdispatch</a><br>比如，swift语言目前跨平台，也使用libdispatch。<br><a href="https://github.com/apple/swift-corelibs-libdispatch">https://github.com/apple/swift-corelibs-libdispatch</a></p><blockquote><p>一个简单例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dispatch/dispatch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">dispatch_queue_t</span> dq = <span class="built_in">dispatch_queue_create</span>(<span class="string">&quot;com.test&quot;</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, dq);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dq, ^&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">      <span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      <span class="built_in">usleep</span>(<span class="number">1000</span> * <span class="number">1000</span>); <span class="comment">// 线程休眠一秒</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_after</span>(<span class="built_in">dispatch_time</span>(DISPATCH_TIME_NOW, (<span class="type">int64_t</span>)(<span class="number">500</span> * NSEC_PER_MSEC)), <span class="built_in">dispatch_get_main_queue</span>(), ^&#123;</span><br><span class="line">      <span class="comment">// dispatch_resume(dq);</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_main</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang dispatch.c</span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pacman -S libdispatch</span></span><br></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">REM https://github.com/gnustep/tools-windows-msvc</span></span><br><span class="line"><span class="comment">REM C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">PATH</span>=<span class="variable">%VS2022INSTALLDIR%</span>\VC\Tools\Llvm\x64\bin;<span class="variable">%cd%</span>\x64\Debug\bin;<span class="variable">%PATH%</span></span><br><span class="line">clang -fblocks -Ix64\Debug\include -Lx64\Debug\lib -lobjc -ldispatch dispatch.c</span><br></pre></td></tr></table></figure><h2 id="qt"><a href="#qt" class="headerlink" title="qt"></a>qt</h2><p>dispatch_sync -&gt; Qt::BlockingQueuedConnection<br><a href="https://www.jianshu.com/p/19871d3209bf">https://www.jianshu.com/p/19871d3209bf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> gcd </tag>
            
            <tag> libdispatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2023/06/23/setup-blog/"/>
      <url>/2023/06/23/setup-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="使用Butterfly主题"><a href="#使用Butterfly主题" class="headerlink" title="使用Butterfly主题"></a>使用Butterfly主题</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm install hexo</span></span><br><span class="line"><span class="comment"># npm install hexo-server</span></span><br><span class="line">hexo init .</span><br></pre></td></tr></table></figure><blockquote><p>编辑_config.yml设置主题</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="npm方式"><a href="#npm方式" class="headerlink" title="npm方式"></a>npm方式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h3 id="git方式"><a href="#git方式" class="headerlink" title="git方式"></a>git方式</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly themes/butterfly</span><br><span class="line">npm install hexo-renderer-stylus</span><br><span class="line">npm install hexo-renderer-pug</span><br></pre></td></tr></table></figure><h2 id="上传到github-pages"><a href="#上传到github-pages" class="headerlink" title="上传到github pages"></a>上传到github pages</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><blockquote><p>编辑_config.yml设置deploy, repo为你的github.io的地址</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/wurui1994/wurui1994.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># word count</span></span><br><span class="line">npm install hexo-wordcount</span><br><span class="line"><span class="comment"># local search</span></span><br><span class="line">npm install hexo-generator-search</span><br><span class="line"><span class="comment"># aplayer</span></span><br><span class="line">npm install aplayer</span><br><span class="line">npm install hexo-tag-aplayer</span><br></pre></td></tr></table></figure><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><p>点击文章卡片跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.recent-post-item(onclick=`pjax.loadUrl(&quot;$&#123;article.link || article.path&#125;&quot;)`)</span><br></pre></td></tr></table></figure><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: pointer;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些博客</title>
      <link href="/2023/06/23/some-blogs/"/>
      <url>/2023/06/23/some-blogs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://paul.pub/">保罗的酒吧</a><br><a href="https://cloud-atlas.readthedocs.io/">云图 – 云计算图志</a></p><h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h2><p><a href="https://gukaifeng.cn/">gukaifeng.cn</a> -&gt; <a href="https://github.com/gukaifeng/gukaifeng.cn">github</a><br><a href="https://blog.meta-code.top/">百里飞洋</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron播放器</title>
      <link href="/2023/06/23/electron-player/"/>
      <url>/2023/06/23/electron-player/</url>
      
        <content type="html"><![CDATA[<p>electron播放器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ffmpeg</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;node:child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ls = <span class="title function_">exec</span>(<span class="string">&quot;ffmpeg -f lavfi -i mandelbrot -f mp4 \</span></span><br><span class="line"><span class="string">-movflags frag_keyframe -preset ultrafast -pix_fmt yuv420p -listen 1 http://localhost:8000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ls.<span class="property">spawnargs</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// html</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;video controls autoplay src=http://localhost:8000 /&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span> &#125;)</span><br><span class="line">    res.<span class="title function_">end</span>(html)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>)</span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">window</span> = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">loadURL</span>(<span class="string">&quot;http://localhost:8080/&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://github.com/fluent-ffmpeg/node-fluent-ffmpeg">node-fluent-ffmpeg</a><br><a href="https://github.com/alex8088/EvPlayer">EvPlayer</a><br><a href="https://github.com/ziyang0116/rockplayer">rockplayer</a><br><a href="https://github.com/sindresorhus/electron-better-ipc">electron-better-ipc</a><br><a href="https://github.com/electron-userland/electron-builder">electron-builder</a><br><a href="https://github.com/Kagami/mpv.js">mpv.js</a></p><p>其他</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pnpm config <span class="built_in">set</span> ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br><span class="line">pnpm config <span class="built_in">set</span> ELECTRON_SKIP_BINARY_DOWNLOAD=1</span><br><span class="line"></span><br><span class="line">choco install visualstudio2022buildtools --package-parameters <span class="string">&quot;--passive --add &quot;</span></span><br></pre></td></tr></table></figure><p>修复video标签在safari中无法播放mp4视频的问题<br><a href="https://www.jianshu.com/p/fecdec504ab0">https://www.jianshu.com/p/fecdec504ab0</a><br>safari下video标签无法播放视频的问题<br><a href="https://juejin.cn/post/6844903640419794958">https://juejin.cn/post/6844903640419794958</a></p><p>看样子要支持safari 需要修改ffmpeg的http支持</p>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> ffmpeg </tag>
            
            <tag> player </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/22/hello-world/"/>
      <url>/2023/06/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
